--- python/piscope.py	(original)
+++ python/piscope.py	(refactored)
@@ -201,7 +201,7 @@
        ifig_app.use_server()
        process_server_request = True
        port = server.info()[3]
-       print('remote port is open : port = '+ str(port) + '\n')
+       print(('remote port is open : port = '+ str(port) + '\n'))
 
    ###  call tempdir_clean when ifig_app is being deleted
    class TempdirObj(object):
--- python/ifigure/client.py	(original)
+++ python/ifigure/client.py	(refactored)
@@ -24,17 +24,17 @@
         get('varname')
 
 '''
-import socket,subprocess,sys,shlex,cPickle
+import socket,subprocess,sys,shlex,pickle
 import binascii, threading, os
-import SocketServer
+import socketserver
 from ifigure.utils.cbook import pick_unused_port
 
-class ReceiverReqHandler(SocketServer.BaseRequestHandler):
+class ReceiverReqHandler(socketserver.BaseRequestHandler):
     def handle(self):
         rfile = self.request.makefile('r')
         response = rfile.readline().strip()
         rfile.close()
-        data = cPickle.loads(binascii.a2b_hex(response))
+        data = pickle.loads(binascii.a2b_hex(response))
         if data['type'] == 'data':
            import __main__
            text = '\n'
@@ -49,7 +49,7 @@
            print((data['data']))
    
 
-class Receiver(SocketServer.ThreadingMixIn, SocketServer.TCPServer):
+class Receiver(socketserver.ThreadingMixIn, socketserver.TCPServer):
     pass
 
 class Client(object):
@@ -93,7 +93,7 @@
           server_thread.start()
        ip, port = Client.receiver.server_address
        print(('receiver :', ip,':', port))
-       message = cPickle.dumps(('r', ip, port))
+       message = pickle.dumps(('r', ip, port))
        self.send(message, noresponse=True)
 
    def shutdown(self):
@@ -124,7 +124,7 @@
              rfile.close()
 #             response = sock.recv(1024)
 #             print len(response)
-             response = cPickle.loads(binascii.a2b_hex(response))
+             response = pickle.loads(binascii.a2b_hex(response))
        finally:
           sock.close()
        return response         
@@ -151,7 +151,7 @@
         if c.host is None: return
         if c.port == 0: return
 
-        message = cPickle.dumps(('f','quit', tuple(), dict()))
+        message = pickle.dumps(('f','quit', tuple(), dict()))
         c = Client() 
         c.send(message, noresponse=True) 
         c.shutdown()
@@ -159,11 +159,11 @@
 
 def check_connection():
     c = Client()    
-    message = cPickle.dumps(('c',))
+    message = pickle.dumps(('c',))
     print((c.send(message)))
 
 def make_testplot():
-    message = cPickle.dumps(('t','plot(range(10))'))
+    message = pickle.dumps(('t','plot(range(10))'))
     c = Client() 
     c.send(message) 
 
@@ -186,12 +186,12 @@
 def _save_parameter_file(*args, **kargs):
     try:
         return sr
-    except IOError, error:
+    except IOError as error:
         return False
     
 def _send_message(command, *args, **kargs):
     try:
-       message = cPickle.dumps(('f', command, args, kargs))
+       message = pickle.dumps(('f', command, args, kargs))
     except  error:
        print('failed to save parameter file')
        return 
@@ -200,7 +200,7 @@
 
 def _send_message_g(command, *args, **kargs):
     try:
-       message = cPickle.dumps(('g', command, args, kargs))
+       message = pickle.dumps(('g', command, args, kargs))
     except  error:
        print('failed to save parameter file')
        return 
--- python/ifigure/ifigure_app.py	(original)
+++ python/ifigure/ifigure_app.py	(refactored)
@@ -18,7 +18,7 @@
 #
 
 import sys, shutil, os, tarfile, collections, logging, threading
-import cPickle as pickle
+import pickle as pickle
 
 from numpy import arange, sin, pi
 import ifigure
@@ -671,7 +671,7 @@
                rule = x['ext']
                p = re.compile(rule)
             except:
-               print('compile error of regular expression: ' + rule)
+               print(('compile error of regular expression: ' + rule))
             if p.match(basepath) is not None:
                 if not x['use']: continue
                 command = x['action']
@@ -1988,8 +1988,8 @@
         self.server_response_queue.put(response)
 
     def use_server(self):
-        import Queue
-        self.server_response_queue = Queue.Queue()
+        import queue
+        self.server_response_queue = queue.Queue()
         return self.server_response_queue
 
     def find_bookviewer(self, book):
--- python/ifigure/interactive.py	(original)
+++ python/ifigure/interactive.py	(refactored)
@@ -1033,7 +1033,7 @@
           view('ortho')
           view('updown')
     '''
-    if len(args) == 0 and len(kwargs.keys()) == 0:
+    if len(args) == 0 and len(list(kwargs.keys())) == 0:
         v = aviewer
         return v.view()
     else:
@@ -1313,7 +1313,7 @@
        x = args[1]
        y = args[2]
     else:
-       raise(ValueError('data dimension is not right'))
+       raise ValueError
 
     v = videoviewer()
     o = v.image(*args, **kargs)
@@ -1410,7 +1410,7 @@
              'ncalls', pcalls', 'line', 'name',
              'nfl', stdname', 'time', 'tottime'
     '''
-    import StringIO, pstats
+    import io, pstats
     pr.disable()
     #print 'stopped profiler'
     lsortby = ['cumulative', 'calls', 'cumtime', 
@@ -1422,7 +1422,7 @@
        print(lsortby)
        return
 
-    s = StringIO.StringIO()
+    s = io.StringIO()
     sortby = sortby
     ps = pstats.Stats(pr, stream=s).sort_stats(sortby)
     ps.print_stats()
@@ -1454,7 +1454,7 @@
     import variables which was saved as pickled file
 
     '''
-    import cPickle as pickle 
+    import pickle as pickle 
     from ifigure.mto.py_code import PyData
     if dest is None:
        from __main__ import ifig_app
@@ -1489,7 +1489,7 @@
           or export subtree.
 
     '''
-    import cPickle as pickle
+    import pickle as pickle
     save_dlg = wx.FileDialog ( None, message="Enter Data File Name", 
                               defaultDir = os.getcwd(), 
                               style=wx.FD_SAVE | wx.FD_OVERWRITE_PROMPT)
@@ -1522,10 +1522,10 @@
     except ImportError:
         print("OpenGL not avaiable")
         return
-    print('OpenGL Ver. : ' + OpenGL.GL.glGetString(OpenGL.GL.GL_VERSION))
-    print('GS Lang Ver.: ' + OpenGL.GL.glGetString(OpenGL.GL.GL_SHADING_LANGUAGE_VERSION))    
-    print('Vendor      : ' + OpenGL.GL.glGetString(OpenGL.GL.GL_VENDOR))
-    print('Renderer    : ' + OpenGL.GL.glGetString(OpenGL.GL.GL_RENDERER))
+    print(('OpenGL Ver. : ' + OpenGL.GL.glGetString(OpenGL.GL.GL_VERSION)))
+    print(('GS Lang Ver.: ' + OpenGL.GL.glGetString(OpenGL.GL.GL_SHADING_LANGUAGE_VERSION)))    
+    print(('Vendor      : ' + OpenGL.GL.glGetString(OpenGL.GL.GL_VENDOR)))
+    print(('Renderer    : ' + OpenGL.GL.glGetString(OpenGL.GL.GL_RENDERER)))
 
 
 def setupmodel(package = '', root = '', path = 'setup_scripts', model=None,
--- python/ifigure/server.py	(original)
+++ python/ifigure/server.py	(refactored)
@@ -19,20 +19,20 @@
       
 '''
 
-import subprocess, shlex, time, cPickle, os
+import subprocess, shlex, time, pickle, os
 import sys
 import threading
 import socket
 import threading
-import SocketServer
+import socketserver
 import wx
 import ifigure.events, ifigure.interactive
 import binascii
 import logging, time
-import socket,subprocess,sys,shlex,cPickle
+import socket,subprocess,sys,shlex,pickle
 from ifigure.utils.cbook import pick_unused_port
 
-class ThreadedTCPRequestHandler(SocketServer.BaseRequestHandler):
+class ThreadedTCPRequestHandler(socketserver.BaseRequestHandler):
     def handle(self):
         import __main__
         while not __main__.process_server_request:
@@ -40,7 +40,7 @@
         rfile = self.request.makefile('r')
         response = rfile.readline().strip()
         rfile.close()
-        data = cPickle.loads(binascii.a2b_hex(response))
+        data = pickle.loads(binascii.a2b_hex(response))
 #        data = self.request.recv(1024)
 #        data = cPickle.loads(binascii.a2b_hex(data))
         ifig_app = wx.GetApp().TopWindow
@@ -51,7 +51,7 @@
                                               command=data)
         try:
             data = wx.GetApp().TopWindow.server_response_queue.get(True)
-            data = binascii.b2a_hex(cPickle.dumps(data))
+            data = binascii.b2a_hex(pickle.dumps(data))
             self.request.sendall(data)
         except:
             import traceback
@@ -59,7 +59,7 @@
 
         ifig_app.remote_lock.release()
 
-class ThreadedTCPServer(SocketServer.ThreadingMixIn, SocketServer.TCPServer):
+class ThreadedTCPServer(socketserver.ThreadingMixIn, socketserver.TCPServer):
     pass
 
 class Server(object):
@@ -80,7 +80,7 @@
           HOST = host
       PORT = pick_unused_port()
 
-      print(''.join(('starting server:', HOST,':', str(PORT))))
+      print((''.join(('starting server:', HOST,':', str(PORT)))))
       sys.stdout.flush()
       server = ThreadedTCPServer((HOST, PORT), ThreadedTCPRequestHandler)
       server.request_queue_size = 1
@@ -178,7 +178,7 @@
 
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.connect((self.rhost, self.rport))
-       data = binascii.b2a_hex(cPickle.dumps({'type':data_type, 'data':data}))
+       data = binascii.b2a_hex(pickle.dumps({'type':data_type, 'data':data}))
        sock.sendall(data+'\n')
        sock.close()
 
--- python/ifigure/startup.py	(original)
+++ python/ifigure/startup.py	(refactored)
@@ -119,6 +119,6 @@
            if f.__doc__ is not None:
                 print((f.__doc__))
            else:
-                print('help is not available for ' + f.__repr__())
+                print(('help is not available for ' + f.__repr__()))
        else:
            print(('help is not available for ', f))
--- python/ifigure/add_on/model/module/csv.py	(original)
+++ python/ifigure/add_on/model/module/csv.py	(refactored)
@@ -63,7 +63,7 @@
 def init(self, *args, **kargs):
     #   a function called when py_module is initialized
     self.td.mk_owndir()
-    if not kargs.has_key('src'):
+    if 'src' not in kargs:
        self.onLoadFile()
 
 def load_csv_file(obj):
@@ -82,7 +82,7 @@
     with open(file, 'rU') as csvfile:
         spamreader = csv.reader(csvfile, dialect='excel')
 #                                delimiter=' ', quotechar='|')
-        keys = spamreader.next()
+        keys = next(spamreader)
         d = {k:[] for k in keys}
         for row in spamreader:
              for k, num in zip(keys, row):
@@ -103,7 +103,7 @@
 def export_csvfile(obj, filename):
     import csv
     var = obj.data.getvar()
-    names = var.keys()
+    names = list(var.keys())
     with open(filename, 'wb') as csvfile:
         spamwriter = csv.writer(csvfile, delimiter=' ',)
 #                            quotechar='|', quoting=csv.QUOTE_MINIMAL)
@@ -164,7 +164,7 @@
 def ask_field(self, dest):
     vars = self.td.data.getvar()
     list6 = [["", "Select field to convert", 2], 
-             [None, None, 36, {'col':4, 'labels': vars.keys()}],]
+             [None, None, 36, {'col':4, 'labels': list(vars.keys())}],]
     value = DialogEditList(list6, modal = True, 
                      style=wx.DEFAULT_DIALOG_STYLE|wx.RESIZE_BORDER,
                      tip = None, 
--- python/ifigure/add_on/model/module/efit_afile.py	(original)
+++ python/ifigure/add_on/model/module/efit_afile.py	(refactored)
@@ -40,7 +40,7 @@
 extname  = 'afile_ext'
 
 def init(self, *args, **kargs):
-   if not kargs.has_key("src"):
+   if "src" not in kargs:
       self.onLoadFile(file = '')
 
 def load_file(file=None):
--- python/ifigure/add_on/model/module/efit_gfile.py	(original)
+++ python/ifigure/add_on/model/module/efit_gfile.py	(refactored)
@@ -76,7 +76,7 @@
 
 def string_split_ig(s, sep):
    t=re.split(sep,s)
-   id=range(len(t))
+   id=list(range(len(t)))
    id.reverse()
    for i in id:
       if t[i]=='': del t[i]
@@ -226,13 +226,13 @@
    tmp=string_split_ig(line[49:], ' |,')
 
    header=line[:48]
-   idum=long(tmp[0])
-   mw=long(tmp[1])
-   mh=long(tmp[2])
+   idum=int(tmp[0])
+   mw=int(tmp[1])
+   mh=int(tmp[2])
    mw2 = mw
    if len(tmp)  == 4: 
       try:
-          mw2 = long(tmp[3])
+          mw2 = int(tmp[3])
           if mw2 == 0: mw2 = mw
       except:
           pass
@@ -254,8 +254,8 @@
    try:
       nbbbs,limitr=string_split_ig(readandstrip(f), ' |,')
    #print nbbbs, limitr
-      nbbbs=long(nbbbs) 
-      limitr=long(limitr)
+      nbbbs=int(nbbbs) 
+      limitr=int(limitr)
       if nbbbs is not 0:
           rzbbbs = load_matrix_form2020(f, nbbbs,2)
 
@@ -350,7 +350,7 @@
       if line.startswith('&'):
          s=string_split_ig(line, ' |,')
          sec=s[0][1:]
-         print 'making new sec ', sec, line.__repr__(), s
+         print('making new sec ', sec, line.__repr__(), s)
          nm[sec] = OrderedDict()
          if len(s) > 1:
             line = ' '.join(s[1:])
@@ -387,7 +387,7 @@
 #          s[0]=k[1]
 #          print s
 #          if s[0] is '': del s[0]
-          if debug != 0: print('create dict key', sec, varname)
+          if debug != 0: print(('create dict key', sec, varname))
           #print 'create dict key', sec, varname
           nm[sec][varname]=[]
           if s.endswith('/'):
@@ -441,7 +441,7 @@
       else:
          return
 
-   print('Pres scale by', str(factor))
+   print(('Pres scale by', str(factor)))
    td[:]["table"]["pres"]   *= factor
    td[:]["table"]["pressmid"]   *= np.abs(factor)
    td[:]["table"]["pressrz"] *= factor
@@ -463,7 +463,7 @@
       else:
          return
 
-   print('Bt scale by', str(factor))
+   print(('Bt scale by', str(factor)))
 
    td[:]["table"]["ffprim"] *= factor*factor
    td[:]["table"]["fpol"]   *= factor
@@ -486,7 +486,7 @@
       else:
          return
 
-   print('Ip scale by', str(factor))
+   print(('Ip scale by', str(factor)))
 
    td[:]["table"]["psirz"] *= factor
    td[:]["table"]["qpsi"]   *= np.abs(1./factor)
@@ -503,7 +503,7 @@
 def onScaleBt(self, evt):
     self.scale_b()
 def init(self, *args, **kargs):
-    if not kargs.has_key("src"):
+    if "src" not in kargs:
       self.onLoadFile(file = '')
 
 def load_gfile(obj):
--- python/ifigure/add_on/model/module/idl_save.py	(original)
+++ python/ifigure/add_on/model/module/idl_save.py	(refactored)
@@ -59,7 +59,7 @@
     obj.mk_owndir()
     nm = IDLfile(); #nm['data'] = IDLData()
     obj.setvar0(nm)
-    if not kargs.has_key('src'):
+    if 'src' not in kargs:
        self.onLoadFile(None)
     #self.onLoadFile()
 
@@ -73,9 +73,9 @@
 
     def idl2dict(dd, cls = collections.OrderedDict):
        r = cls()
-       for name in dd.keys():
-           print name
-           print isinstance(dd[name], np.recarray)
+       for name in list(dd.keys()):
+           print(name)
+           print(isinstance(dd[name], np.recarray))
            if isinstance(dd[name], np.recarray):
                r[name] = rec2dict(dd[name], cls=cls)
            else:
--- python/ifigure/add_on/model/module/matlab_mat.py	(original)
+++ python/ifigure/add_on/model/module/matlab_mat.py	(refactored)
@@ -59,7 +59,7 @@
     obj.mk_owndir()
     nm = Matfile(); nm['data'] = MatData()
     obj.setvar0(nm)
-    if not kargs.has_key('src'):
+    if 'src' not in kargs:
        self.onLoadFile(None)
     #self.onLoadFile()
 
--- python/ifigure/add_on/model/module/mdsplus_tree.py	(original)
+++ python/ifigure/add_on/model/module/mdsplus_tree.py	(refactored)
@@ -83,7 +83,7 @@
     dicttop = MDSPlusTree()
     top.setvar0(dicttop)
 
-    print("tree nodes :", len(tree))
+    print(("tree nodes :", len(tree)))
 
     for k in range(len(tree)-1): 
        arr=split_str(tree[k+1], '[\:.]')
@@ -174,7 +174,7 @@
 
     if server is None: server = this.getvar('mdsplus_server')
     if tree is None: tree=this.getvar("tree")
-    if shot is None: shot=long(this.getvar("shot"))
+    if shot is None: shot=int(this.getvar("shot"))
 
     from ifigure.mdsplus.fig_mds import MDSsession
     from ifigure.mdsplus.mds_job import MDSjob
--- python/ifigure/add_on/model/module/name_list.py	(original)
+++ python/ifigure/add_on/model/module/name_list.py	(refactored)
@@ -78,7 +78,7 @@
     obj.mk_owndir()
     nm = Namelist()
     obj.setvar0(nm)
-    if not kargs.has_key('src'):
+    if 'src' not in kargs:
        self.onLoadFile()
     else:
        try:
@@ -157,7 +157,7 @@
 
 def string_split_ig(s, sep):
    t=re.split(sep,s)
-   id=range(len(t))
+   id=list(range(len(t)))
    id.reverse()
    for i in id:
       if t[i]=='': del t[i]
@@ -251,7 +251,7 @@
 
                continue
             if sall[i].endswith('='):
-               print(sall[i])
+               print((sall[i]))
                i=i+1
                continue #'name='
             k=sall[i].split('=')
@@ -293,7 +293,7 @@
         child.destroy()
 
     nm=load_file(file)
-    print('reading file', file)
+    print(('reading file', file))
     obj.setvar0(nm)
     mtime = os.path.getmtime(file)
     obj.setvar('namelist_mtime', mtime)
@@ -306,12 +306,12 @@
     td  = self.td
     var0= td[:]
     txt = []
-    for key0 in var0.keys():
+    for key0 in list(var0.keys()):
 
         txt.append(' &'+key0+'\n')
         var=var0[key0]
         
-        for key in var.keys():
+        for key in list(var.keys()):
             line = ' '+key+' = '
 
             for el in var[key]:
@@ -432,7 +432,7 @@
     ret, name = dialog.textselect(parent, 
                    "Select section name", 
                    "Remove Section...", 
-                    choices = var0.keys())
+                    choices = list(var0.keys()))
     if not ret: return  
 
     del var0[name] 
@@ -446,7 +446,7 @@
     ret, name = dialog.textselect(parent, 
                    "Select section name", 
                    "Rename Section...", 
-                    choices = var0.keys())
+                    choices = list(var0.keys()))
     if not ret: return  
     ret, name1 = dialog.textentry(parent, 
                    "Enter new section name", 
--- python/ifigure/add_on/model/module/netcdf4.py	(original)
+++ python/ifigure/add_on/model/module/netcdf4.py	(refactored)
@@ -65,7 +65,7 @@
 def init(self, *args, **kargs):
     #   a function called when py_module is initialized
     self.td.mk_owndir()
-    if not kargs.has_key('src'):
+    if 'src' not in kargs:
        self.onLoadFile()
     #self.onLoadFile()
 
@@ -141,7 +141,7 @@
            variable[:] = nm["variables"][key]._data
 
     rootgrp.close() 
-    print('write NC file completed. ' + filename)       
+    print(('write NC file completed. ' + filename))       
    
 def load_file(fname, check_format = False):
     import subprocess, shlex
@@ -157,13 +157,13 @@
        fname2=fname[:-3]
 #       print fname2
        if not os.path.exists(fname2): 
-           print('!!!!!!!!!!!! netcdf file is not found', fname2)
+           print(('!!!!!!!!!!!! netcdf file is not found', fname2))
            return
        g = Dataset(fname2, 'r')
     else:
 #       print fname
        if not os.path.exists(fname): 
-           print('!!!!!!!!!!!! netcdf file is not found', fname)
+           print(('!!!!!!!!!!!! netcdf file is not found', fname))
            return
        g = Dataset(fname, 'r')
     if check_format:
@@ -216,7 +216,7 @@
                            pathname=pathname)
     if file == '': return
     format = load_file(file, check_format = True)
-    print format
+    print(format)
 
 def onUpdateTree(self, e=None):
     obj = self.td
--- python/ifigure/add_on/model/module/tsc_input.py	(original)
+++ python/ifigure/add_on/model/module/tsc_input.py	(refactored)
@@ -57,7 +57,7 @@
 extname  = 'namelist_ext'
 
 def init(self, *args, **kargs):
-    if not kargs.has_key('src'):
+    if 'src' not in kargs:
        self.onLoadFile()
 
 def split_line(s):
@@ -112,14 +112,14 @@
         d = TSCInputFile()
         for x in od:
            print(x)
-           for i in range(long(x[1])):
+           for i in range(int(x[1])):
                x = x + [0,0,0,0,0]  #safe gurad...
-               label = ('0000'+str(long(x[0]+i)))[-4:]
+               label = ('0000'+str(int(x[0]+i)))[-4:]
                d[label] = x[2+i]
-        d = TSCInputFile(sorted(d.items(), key = lambda t: t[0]))
+        d = TSCInputFile(sorted(list(d.items()), key = lambda t: t[0]))
         nm['11'] = d
 
-    nm = TSCInputFile(sorted(nm.items(), key = lambda t: t[0]))
+    nm = TSCInputFile(sorted(list(nm.items()), key = lambda t: t[0]))
     nm = add_help(nm)
     return nm
 
@@ -155,7 +155,7 @@
 
     nm=load_file(file)
 
-    print('reading file', file)
+    print(('reading file', file))
     obj.setvar0(nm)
 
 #def fromat_float(num):
@@ -180,7 +180,7 @@
     def data2lines_11(key, data):
         lines = []
         for d in data:
-           l = str(long(key))
+           l = str(int(key))
            l = l + ' '*(10-len(l))
            for item in d:
                if item is None:
@@ -196,12 +196,12 @@
        var0 = self.td.getvar0()
     txt = ['c ... title card\n', 'c produced by piscope input generator\n', 'c\n']
 
-    for key0 in var0.keys():
+    for key0 in list(var0.keys()):
         if key0 == '11': 
             for key1 in var0[key0]:
                 if key1 == 'name': continue
                 if key1 == 'format': continue
-                txt.extend(data2lines_11(key0, [[long(key1), 1, var0[key0][key1]]]))
+                txt.extend(data2lines_11(key0, [[int(key1), 1, var0[key0][key1]]]))
         else:
             txt.extend(data2lines(key0, var0[key0]['data']))
 
@@ -210,7 +210,7 @@
   
 def onGenerateRestartInput(self, e=None, filename = 'inputa',
                            update_card = None, stop_time=None):
-    print('here', update_card, stop_time)
+    print(('here', update_card, stop_time))
     var0 = self.td.getvar0()
     if update_card is not None:
         d = TSCInputFile()
@@ -296,7 +296,7 @@
               plt.title(x)
               new_plot = False
            except:
-              print('failed to generate picture for', key)
+              print(('failed to generate picture for', key))
               new_plot = True
     pass
 
--- python/ifigure/add_on/model/module/subs/dwscope_sub.py	(original)
+++ python/ifigure/add_on/model/module/subs/dwscope_sub.py	(refactored)
@@ -53,7 +53,7 @@
            line = f.readline()
            print(line)
        except Exception:
-           print(sys.exc_info())
+           print((sys.exc_info()))
     f.close()
     
 def onLoadFile(self_obj):
--- python/ifigure/add_on/model/module/subs/dwscope_subs.py	(original)
+++ python/ifigure/add_on/model/module/subs/dwscope_subs.py	(refactored)
@@ -61,25 +61,25 @@
        print(line)
        arr=command.split('.')
        if len(arr)==3:
-          if not d.has_key(arr[1]):d[arr[1]]={}
+          if arr[1] not in d:d[arr[1]]={}
           d[arr[1]][arr[2]]=data
        if len(arr)==2:
-          if not d.has_key(arr[1]):d[arr[1]]={}
+          if arr[1] not in d:d[arr[1]]={}
           d[arr[1]]=data
 
     f.close()
 
-    num_c=long(d["columns"])
+    num_c=int(d["columns"])
     num_r=[0]*num_c
     return d
-    for i in range(num_c)+1:
+    for i in list(range(num_c))+1:
        key = 'rows_in_column_'+str(i)
-       num_r[i-1]=long(d[key])
+       num_r[i-1]=int(d[key])
 
     d2={"num_c": num_c, 
         "num_r": num_r}
 
-    for key in d.keys():
+    for key in list(d.keys()):
       if key[:4]=='plot':
           d2[key[5:]]=d[key]
       if key[:6]=='global':
--- python/ifigure/add_on/model/module/subs/idl_save_subs.py	(original)
+++ python/ifigure/add_on/model/module/subs/idl_save_subs.py	(refactored)
@@ -48,7 +48,7 @@
 ######################################################
 def expand_recarray(top, var):
     for name in var.dtype.names:
-       print(name,  type(var.field(name)))
+       print((name,  type(var.field(name))))
 
        if isinstance(var.field(name), numpy.recarray):
            child=PyData()
@@ -60,7 +60,7 @@
 def read_sav_file(this):
     file=this.getvar("filename")
     s = idlsave.read(file)
-    for key in s.keys():
+    for key in list(s.keys()):
         if isinstance(s[key], numpy.recarray):
            child=PyData()
            this.add_child(key, child)
--- python/ifigure/add_on/model/module/subs/mdsplus_tree_node.py	(original)
+++ python/ifigure/add_on/model/module/subs/mdsplus_tree_node.py	(refactored)
@@ -69,7 +69,7 @@
 
 def dim_of(self, num=0):
     print(self)
-    print(self.td)
+    print((self.td))
     node=self.td.getvar("node")
     txt='dim_of('+node.strip()+','+str(num)+')'
     return self.call_mdsvalue(txt)
@@ -91,14 +91,14 @@
    port=parent.getvar("port")
    mds.port=port
    mds.server=server
-   print(tree, shot, port, server, str)
+   print((tree, shot, port, server, str))
    try:
        res=mds.open(tree, shot)
        print(res)
        return mds.value(str)  
    except Exception:
        print("!!!!!! Error in evaluating the following node  !!!!!!")
-       print("TREE/SHOT", tree, shot)
-       print("NODE", str)
-       print(sys.exc_info())
+       print(("TREE/SHOT", tree, shot))
+       print(("NODE", str))
+       print((sys.exc_info()))
    return None
--- python/ifigure/add_on/setting/module/mdsplus_worker.py	(original)
+++ python/ifigure/add_on/setting/module/mdsplus_worker.py	(refactored)
@@ -98,7 +98,7 @@
     pool = self.td._pool.pool
     print(pool)
     if isinstance(pool, MDSSPWorkerPool):
-        print(pool.pch)
+        print((pool.pch))
     elif isinstance(pool, MDSMPWorkerPool):
         for w in pool.workers: print(w)
     else: # isinstance(pool, MDSTHWorkerPool):
@@ -136,7 +136,7 @@
     else:
         t = 'direct'
     onum = ifigure.mdsplus.mdsscope.mds_num_worker
-    ifigure.mdsplus.mdsscope.mds_num_worker = long(v[4])
+    ifigure.mdsplus.mdsscope.mds_num_worker = int(v[4])
     w =  str(v[5])
 #    w = 'mp' ## always use mp worker
     port =  str(v[3])
@@ -146,12 +146,12 @@
         s['worker'] != w  or
         onum != ifigure.mdsplus.mdsscope.mds_num_worker or
         s['connection'][0]['server'] != host or
-        long(s['connection'][0]['port']) != long(port)):
+        int(s['connection'][0]['port']) != int(port)):
             restart = True
     s['connection_type'] =  t
     s['worker'] = w
     s['connection'][0]['server'] = host
-    s['connection'][0]['port'] = long(port)
+    s['connection'][0]['port'] = int(port)
     if restart: 
         self.onReset()
         self.onStartWorker()
--- python/ifigure/add_on/setting/module/ssh.py	(original)
+++ python/ifigure/add_on/setting/module/ssh.py	(refactored)
@@ -54,8 +54,8 @@
                    rport=None, mode=None, 
                    rserver=None):
     if server is not None: td.setvar("server",str(server))
-    if port is not None: td.setvar("port",long(port))
-    if rport is not None: td.setvar("rport",long(rport))
+    if port is not None: td.setvar("port",int(port))
+    if rport is not None: td.setvar("rport",int(rport))
     if mode is not None: td.setvar("mode",str(mode))    
     if rserver is not None: td.setvar("rserver",str(rserver))    
 
@@ -108,7 +108,7 @@
     p=subprocess.Popen(shlex.split(command), stderr=subprocess.STDOUT,
                  stdout = subprocess.PIPE)
     p.wait()
-    print('stdout', p.stdout.read())     
+    print(('stdout', p.stdout.read()))     
 
 def onExec(self, e=None, command=None, wait=True):
     if command is None: return 
@@ -124,7 +124,7 @@
        while p.wait() == None:
            wx.SafeYield()
            time.sleep(0.25)
-    print('stdout', p.stdout.read())
+    print(('stdout', p.stdout.read()))
 
 def onSend(self, file=None, rdir=None, rfile=None):
     if self.td._status != 'connected':
@@ -155,14 +155,14 @@
 
 
     p.wait()
-    print('stdout', p.stdout.read())
+    print(('stdout', p.stdout.read()))
 
     #scp_paramiko('localhost', port, file, rfile)
     
     command='scp -P '+str(port)+ ' '+str(file)+ ' localhost:'+rfile
     print(command)
     subprocess.Popen(command, shell=True)
-    print(p.wait())
+    print((p.wait()))
 
 def onClose(self):
     if hasattr(self, 'p'):
--- python/ifigure/add_on/solver/script/def_script.py	(original)
+++ python/ifigure/add_on/solver/script/def_script.py	(refactored)
@@ -5,12 +5,12 @@
 print("")
 print(" Running evniroment for script file")
 proj = obj.get_root_parent()
-print("   proj    =", proj)
-print("   treeobj =", obj)
+print(("   proj    =", proj))
+print(("   treeobj =", obj))
 print(" ")
 
 import time, os
 
 
 
-print(proj.book1.page6.axes1.spline1._artists[0].get_xdata())
+print((proj.book1.page6.axes1.spline1._artists[0].get_xdata()))
--- python/ifigure/add_on/solver/script/genray_loki.py	(original)
+++ python/ifigure/add_on/solver/script/genray_loki.py	(refactored)
@@ -5,20 +5,20 @@
 print("")
 print(" Running evniroment for script file")
 #print "   proj    =", proj
-print("   treeobj =", obj.get_full_path(), obj)
+print(("   treeobj =", obj.get_full_path(), obj))
 print(" ")
 
 import time, os
-print(" Script File : ",  obj.path2fullpath())
-print(" Last Modified : ", time.ctime(obj._script._script_mtime))
+print((" Script File : ",  obj.path2fullpath()))
+print((" Last Modified : ", time.ctime(obj._script._script_mtime)))
 
 solver=obj.get_parent()
-print('model folder:', solver.model.get_full_path())
-print('solution folder :', solver.sol.get_full_path())
+print(('model folder:', solver.model.get_full_path()))
+print(('solution folder :', solver.sol.get_full_path()))
 
 root=obj.get_root_parent()
-print('setting:' , root.psetting.get_full_path())
-print('connection:' , root.psetting.loki.get_full_path())
+print(('setting:' , root.psetting.get_full_path()))
+print(('connection:' , root.psetting.loki.get_full_path()))
 
 proj = obj.get_root_parent()
 wdir = proj.eval("wdir")
--- python/ifigure/add_on/solver/script/merge_sol.py	(original)
+++ python/ifigure/add_on/solver/script/merge_sol.py	(refactored)
@@ -23,9 +23,9 @@
 index  = args[0]
 
 #sol.aquire_lock()
-print('merging solution index=', index)
-print('worker', worker)
-print('solution', sol)
+print(('merging solution index=', index))
+print(('worker', worker))
+print(('solution', sol))
 
 sol
 from ifigure.mto.py_code import PySol
--- python/ifigure/add_on/solver/script/merge_sol_parametric.py	(original)
+++ python/ifigure/add_on/solver/script/merge_sol_parametric.py	(refactored)
@@ -30,9 +30,9 @@
 
 name = 'case' + str(index)
 if sol.has_child(name):
-    print('removing ', name)
+    print(('removing ', name))
     sol.get_child(name=name).destroy()
-print('merging solution index=', index)
+print(('merging solution index=', index))
 ps=PySol()
 sol.add_child(name, ps)
 
--- python/ifigure/add_on/solver/script/run_optimizer.py	(original)
+++ python/ifigure/add_on/solver/script/run_optimizer.py	(refactored)
@@ -8,12 +8,12 @@
 #  
 def modifier(worker, names, values):
     print('Running modifier')
-    print('working on model directory ...', worker)
+    print(('working on model directory ...', worker))
     for name, value in zip(names, values):
-       print('appling new parameter...', name, value)
+       print(('appling new parameter...', name, value))
        worker.parameters.setvar(name, value)
 
-import Queue, threading, weakref, wx
+import queue, threading, weakref, wx
 import ifigure.events
 
 solver = obj.get_parent()
@@ -28,7 +28,7 @@
     else:
         txt = solver._cost
     root = solver.get_root_parent()
-    exec root._name + ' = root'
+    exec(root._name + ' = root')
     return eval(txt)
 
 use_def_merger = solver._use_def_merger
@@ -58,7 +58,7 @@
         queue.put(w)
         solver._queue = None
 
-    q = Queue.Queue()
+    q = queue.Queue()
     solver._queue = q
     cost_script = locate_cost_script()
 
@@ -81,7 +81,7 @@
            model = rmodel.resolve_td_path(rpath)
            c = cost_script.RunA(model)
            return c
-        except Queue.Empty:
+        except queue.Empty:
            solver._queue = None
            print('Failed to get response')
            raise ValueError
--- python/ifigure/add_on/solver/script/run_parametric.py	(original)
+++ python/ifigure/add_on/solver/script/run_parametric.py	(refactored)
@@ -33,12 +33,12 @@
 def modifier(worker, name, param):
 
     print('Running modifier')
-    print('working on model directory ...', model)
+    print(('working on model directory ...', model))
     for i in range(len(name)):
-       print('appling new parameter...', name[i], param[i])
+       print(('appling new parameter...', name[i], param[i]))
        worker.parameters.setvar(name[i], param[i])
 
-import Queue, threading, weakref, wx
+import queue, threading, weakref, wx
 import ifigure.events
 
 renew_model_each_time = True
@@ -76,7 +76,7 @@
         method(idx, w, sol)
         queue.put(w)
 
-    q = Queue.Queue()
+    q = queue.Queue()
     solver._queue = q
     finished = 0
     current = 0
@@ -110,8 +110,8 @@
                 if o._thread_name == t: 
                    w = o
                    break
-        except Queue.Empty:
-            print('not respond', finished)
+        except queue.Empty:
+            print(('not respond', finished))
             continue
         if t == 'abort job': 
              abroted = True
@@ -156,7 +156,7 @@
         name, case_xxx = xxx
         rmodel = case_xxx.get_child(name = rname)
         model = rmodel.resolve_td_path(rpath)
-        print(case_xxx, model)
+        print((case_xxx, model))
         if model is not None:
              solver.apply_modifier(modifier, case_xxx, k)
              model.Run()
--- python/ifigure/add_on/solver/script/run_stdsolver.py	(original)
+++ python/ifigure/add_on/solver/script/run_stdsolver.py	(refactored)
@@ -5,7 +5,7 @@
 #   and the thread submit a job, which is started
 #   in a main thread.
 #
-import Queue, threading, weakref, wx
+import queue, threading, weakref, wx
 renew_model_each_time = True
 solver = obj.get_parent()
 tmodel = solver._model
@@ -36,14 +36,14 @@
         queue.put(w)
         solver._queue = None
 
-    q = Queue.Queue()
+    q = queue.Queue()
     solver._queue = q
     wx.CallAfter(submit, *(w, q))
     while True:
         try:
            t = q.get(True)
            break
-        except Queue.Empty:
+        except queue.Empty:
            solver._queue = None
            print('Failed to get response')
            return
--- python/ifigure/example/gl_demos.py	(original)
+++ python/ifigure/example/gl_demos.py	(refactored)
@@ -167,7 +167,7 @@
     idxset=tri.triangles
     v = v.transpose()
     
-    print v.shape, idxset.shape
+    print(v.shape, idxset.shape)
     viewer = figure()
     nsec(3)
     isec(0)
--- python/ifigure/matplotlib_mod/axes3d_mod.py	(original)
+++ python/ifigure/matplotlib_mod/axes3d_mod.py	(refactored)
@@ -10,6 +10,7 @@
 import mpl_toolkits.mplot3d.art3d as art3d
 import matplotlib.transforms as trans
 from matplotlib.colors import ColorConverter
+from functools import reduce
 cc = ColorConverter()
 
 from matplotlib.artist import allow_rasterization
@@ -290,7 +291,7 @@
               
         arr = self._gl_mask_artist.get_array()
 
-        for k in id_dict.keys():
+        for k in list(id_dict.keys()):
             if (id_dict[k]() == artist):
                if hit_id is not None:
                    if len(hit_id) > 0:
@@ -787,8 +788,8 @@
         rstride = kwargs.pop('rstride', 10)
         cstride = kwargs.pop('cstride', 10)
         idxset3d =[]
-        r = list(xrange(0, rows, rstride))
-        c = list(xrange(0, cols, cstride))
+        r = list(range(0, rows, rstride))
+        c = list(range(0, cols, cstride))
 
         X3D = X[r, :][:, c].flatten()
         Y3D = Y[r, :][:, c].flatten()
@@ -1245,7 +1246,7 @@
 
 
         if self._gl_scale != 1.0:
-            print("gl_scale", self._gl_scale)            
+            print(("gl_scale", self._gl_scale))            
             xmin, xmax = self.get_xlim3d()
             ymin, ymax = self.get_ylim3d()
             zmin, zmax = self.get_zlim3d()
--- python/ifigure/matplotlib_mod/backend_wxagg_gl_12.py	(original)
+++ python/ifigure/matplotlib_mod/backend_wxagg_gl_12.py	(refactored)
@@ -74,12 +74,12 @@
 def check_framebuffer(message, mode = GL_FRAMEBUFFER):
     if (glCheckFramebufferStatus(mode) !=
         GL_FRAMEBUFFER_COMPLETE):
-         print('Framebuffer imcomplete (' + message + ')')
-         print(str(glCheckFramebufferStatus(GL_FRAMEBUFFER)))
-         print(str(GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT))
-         print(str(GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS))
-         print(str(GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT))
-         print(str(GL_FRAMEBUFFER_UNSUPPORTED))
+         print(('Framebuffer imcomplete (' + message + ')'))
+         print((str(glCheckFramebufferStatus(GL_FRAMEBUFFER))))
+         print((str(GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT)))
+         print((str(GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS)))
+         print((str(GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT)))
+         print((str(GL_FRAMEBUFFER_UNSUPPORTED)))
          return False
     return True
  
@@ -115,7 +115,7 @@
 def check_gl_error():
     error = glGetError()
     if error != 0:
-       print("GL error ", error)
+       print(("GL error ", error))
        
 class vbos_dict(dict):
     def __del__(self, *args, **kwargs):
--- python/ifigure/matplotlib_mod/backend_wxagg_gl_15.py	(original)
+++ python/ifigure/matplotlib_mod/backend_wxagg_gl_15.py	(refactored)
@@ -76,16 +76,16 @@
 def check_framebuffer(message, mode = GL_FRAMEBUFFER):
     if (glCheckFramebufferStatus(mode) !=
         GL_FRAMEBUFFER_COMPLETE):
-         print('Framebuffer imcomplete (' + message + ')')
-         print(str(glCheckFramebufferStatus(GL_FRAMEBUFFER)))
-         print(str(GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT))
-         print(str(GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS))
-         print(str(GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT))
-         print(str(GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE))
-         print(str(GL_FRAMEBUFFER_UNSUPPORTED))
+         print(('Framebuffer imcomplete (' + message + ')'))
+         print((str(glCheckFramebufferStatus(GL_FRAMEBUFFER))))
+         print((str(GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT)))
+         print((str(GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS)))
+         print((str(GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT)))
+         print((str(GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE)))
+         print((str(GL_FRAMEBUFFER_UNSUPPORTED)))
 
          return False
-    print "test sample", glGetIntegerv(GL_SAMPLE_BUFFERS)
+    print("test sample", glGetIntegerv(GL_SAMPLE_BUFFERS))
     return True
 
 def frustum(left, right, bottom, top, zNear, zFar):
@@ -122,7 +122,7 @@
 def check_gl_error():
     error = glGetError()
     if error != 0:
-       print("GL error ", error)
+       print(("GL error ", error))
        
 class vbos_dict(dict):
     def __del__(self, *args, **kwargs):
@@ -197,13 +197,13 @@
             
 
     def gc_artist_data(self):
-        keys = self.artists_data.keys()
+        keys = list(self.artists_data.keys())
         for aa in keys:
             if aa.figobj is None:
                del self.artists_data[aa]
                del self.vbo[aa]               
             else:
-               keys2 = self.artists_data[aa].keys()  
+               keys2 = list(self.artists_data[aa].keys())  
                for a in keys2:
                   if hasattr(a, 'figobj') and a.figobj is None:
                       del self.artists_data[aa][a]
@@ -341,7 +341,7 @@
         glHint(GL_LINE_SMOOTH_HINT, GL_NICEST)
            
     def EnableVertexAttrib(self, name):
-        print "enable", name, self._p_attrib_loc[name]
+        print("enable", name, self._p_attrib_loc[name])
         glEnableVertexAttribArray(self._p_attrib_loc[name])
     def DisableVertexAttrib(self, name):
         glDisableVertexAttribArray(self._p_attrib_loc[name])
@@ -843,7 +843,7 @@
                     m = getattr(self, 'draw_'+ data[0])
                     m(xxx[k], *data[1], **data[2])
                 self.vbo[aa][a] = xxx
-                id_dict[long(current_id)] = weakref.ref(a)
+                id_dict[int(current_id)] = weakref.ref(a)
                 current_id = current_id + 1
         #glFinish()                
         return id_dict, need_oit
@@ -2104,7 +2104,7 @@
         target = self.get_container(a)
         box = trans.transform([frame_range[0:2], frame_range[2:4]])
         d = box[1] - box[0]
-        w, h = long(d[0])*multisample, long(d[1])*multisample
+        w, h = int(d[0])*multisample, int(d[1])*multisample
         make_new = False
 
 
--- python/ifigure/matplotlib_mod/backend_wxagg_gl_org.py	(original)
+++ python/ifigure/matplotlib_mod/backend_wxagg_gl_org.py	(refactored)
@@ -74,12 +74,12 @@
 def check_framebuffer(message, mode = GL_FRAMEBUFFER):
     if (glCheckFramebufferStatus(mode) !=
         GL_FRAMEBUFFER_COMPLETE):
-         print('Framebuffer imcomplete (' + message + ')')
-         print(str(glCheckFramebufferStatus(GL_FRAMEBUFFER)))
-         print(str(GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT))
-         print(str(GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS))
-         print(str(GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT))
-         print(str(GL_FRAMEBUFFER_UNSUPPORTED))
+         print(('Framebuffer imcomplete (' + message + ')'))
+         print((str(glCheckFramebufferStatus(GL_FRAMEBUFFER))))
+         print((str(GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT)))
+         print((str(GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS)))
+         print((str(GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT)))
+         print((str(GL_FRAMEBUFFER_UNSUPPORTED)))
          return False
     return True
  
@@ -92,7 +92,7 @@
 def check_gl_error():
     error = glGetError()
     if error != 0:
-       print("GL error ", error)
+       print(("GL error ", error))
        
 class vbos_dict(dict):
     def __del__(self, *args, **kwargs):
@@ -148,13 +148,13 @@
             
 
     def gc_artist_data(self):
-        keys = self.artists_data.keys()
+        keys = list(self.artists_data.keys())
         for aa in keys:
             if aa.figobj is None:
                del self.artists_data[aa]
                del self.vbo[aa]               
             else:
-               keys2 = self.artists_data[aa].keys()  
+               keys2 = list(self.artists_data[aa].keys())  
                for a in keys2:
                   if hasattr(a, 'figobj') and a.figobj is None:
                       del self.artists_data[aa][a]
@@ -772,7 +772,7 @@
                     m = getattr(self, 'draw_'+ data[0])
                     m(xxx[k], *data[1], **data[2])
                 self.vbo[aa][a] = xxx
-                id_dict[long(current_id)] = weakref.ref(a)
+                id_dict[int(current_id)] = weakref.ref(a)
                 current_id = current_id + 1
         #glFinish()                
         return id_dict, need_oit
@@ -2025,7 +2025,7 @@
         target = self.get_container(a)
         box = trans.transform([frame_range[0:2], frame_range[2:4]])
         d = box[1] - box[0]
-        w, h = long(d[0])*multisample, long(d[1])*multisample
+        w, h = int(d[0])*multisample, int(d[1])*multisample
         make_new = False
 
 
--- python/ifigure/matplotlib_mod/backend_wxagg_gl_tmp.py	(original)
+++ python/ifigure/matplotlib_mod/backend_wxagg_gl_tmp.py	(refactored)
@@ -76,16 +76,16 @@
 def check_framebuffer(message, mode = GL_FRAMEBUFFER):
     if (glCheckFramebufferStatus(mode) !=
         GL_FRAMEBUFFER_COMPLETE):
-         print('Framebuffer imcomplete (' + message + ')')
-         print(str(glCheckFramebufferStatus(GL_FRAMEBUFFER)))
-         print(str(GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT))
-         print(str(GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS))
-         print(str(GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT))
-         print(str(GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE))
-         print(str(GL_FRAMEBUFFER_UNSUPPORTED))
+         print(('Framebuffer imcomplete (' + message + ')'))
+         print((str(glCheckFramebufferStatus(GL_FRAMEBUFFER))))
+         print((str(GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT)))
+         print((str(GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS)))
+         print((str(GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT)))
+         print((str(GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE)))
+         print((str(GL_FRAMEBUFFER_UNSUPPORTED)))
 
          return False
-    print "test sample", glGetIntegerv(GL_SAMPLE_BUFFERS)
+    print("test sample", glGetIntegerv(GL_SAMPLE_BUFFERS))
     return True
 
 def frustum(left, right, bottom, top, zNear, zFar):
@@ -122,7 +122,7 @@
 def check_gl_error():
     error = glGetError()
     if error != 0:
-       print("GL error ", error)
+       print(("GL error ", error))
        
 class vbos_dict(dict):
     def __del__(self, *args, **kwargs):
@@ -197,13 +197,13 @@
             
 
     def gc_artist_data(self):
-        keys = self.artists_data.keys()
+        keys = list(self.artists_data.keys())
         for aa in keys:
             if aa.figobj is None:
                del self.artists_data[aa]
                del self.vbo[aa]               
             else:
-               keys2 = self.artists_data[aa].keys()  
+               keys2 = list(self.artists_data[aa].keys())  
                for a in keys2:
                   if hasattr(a, 'figobj') and a.figobj is None:
                       del self.artists_data[aa][a]
@@ -341,7 +341,7 @@
         glHint(GL_LINE_SMOOTH_HINT, GL_NICEST)
            
     def EnableVertexAttrib(self, name):
-        print "enable", name, self._p_attrib_loc[name]
+        print("enable", name, self._p_attrib_loc[name])
         glEnableVertexAttribArray(self._p_attrib_loc[name])
     def DisableVertexAttrib(self, name):
         glDisableVertexAttribArray(self._p_attrib_loc[name])
@@ -843,7 +843,7 @@
                     m = getattr(self, 'draw_'+ data[0])
                     m(xxx[k], *data[1], **data[2])
                 self.vbo[aa][a] = xxx
-                id_dict[long(current_id)] = weakref.ref(a)
+                id_dict[int(current_id)] = weakref.ref(a)
                 current_id = current_id + 1
         #glFinish()                
         return id_dict, need_oit
@@ -2108,7 +2108,7 @@
         target = self.get_container(a)
         box = trans.transform([frame_range[0:2], frame_range[2:4]])
         d = box[1] - box[0]
-        w, h = long(d[0])*multisample, long(d[1])*multisample
+        w, h = int(d[0])*multisample, int(d[1])*multisample
         make_new = False
 
 
--- python/ifigure/matplotlib_mod/backend_wxagg_mod.py	(original)
+++ python/ifigure/matplotlib_mod/backend_wxagg_mod.py	(refactored)
@@ -211,7 +211,7 @@
                                     'Coping bitmap image to System Clipboard.', 
                                     maximum = 10, 
                                     parent = self.GetTopLevelParent() )
-           for x in xrange (10):
+           for x in range (10):
               wx.Sleep (0.05)
               dialog.Update (x+1, 'Coping bitmap image to System Clipboard.('+str(x)+'/10')
            dialog.Destroy()
--- python/ifigure/matplotlib_mod/canvas_common.py	(original)
+++ python/ifigure/matplotlib_mod/canvas_common.py	(refactored)
@@ -61,13 +61,13 @@
 def check_framebuffer(message, mode = GL_FRAMEBUFFER):
     if (glCheckFramebufferStatus(mode) !=
         GL_FRAMEBUFFER_COMPLETE):
-         print('Framebuffer imcomplete (' + message + ')')
-         print(str(glCheckFramebufferStatus(GL_FRAMEBUFFER)))
-         print(str(GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT))
-         print(str(GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS))
-         print(str(GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT))
-         print(str(GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE))
-         print(str(GL_FRAMEBUFFER_UNSUPPORTED))
+         print(('Framebuffer imcomplete (' + message + ')'))
+         print((str(glCheckFramebufferStatus(GL_FRAMEBUFFER))))
+         print((str(GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT)))
+         print((str(GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS)))
+         print((str(GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT)))
+         print((str(GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE)))
+         print((str(GL_FRAMEBUFFER_UNSUPPORTED)))
 
          return False
     #print "test sample", glGetIntegerv(GL_SAMPLE_BUFFERS)
@@ -108,7 +108,7 @@
 def check_gl_error():
     error = glGetError()
     if error != 0:
-       print("GL error ", error)
+       print(("GL error ", error))
        
 class vbos_dict(dict):
     def __del__(self, *args, **kwargs):
--- python/ifigure/matplotlib_mod/glcanvas_12.py	(original)
+++ python/ifigure/matplotlib_mod/glcanvas_12.py	(refactored)
@@ -75,13 +75,13 @@
             
 
     def gc_artist_data(self):
-        keys = self.artists_data.keys()
+        keys = list(self.artists_data.keys())
         for aa in keys:
             if aa.figobj is None:
                del self.artists_data[aa]
                del self.vbo[aa]               
             else:
-               keys2 = self.artists_data[aa].keys()  
+               keys2 = list(self.artists_data[aa].keys())  
                for a in keys2:
                   if hasattr(a, 'figobj') and a.figobj is None:
                       del self.artists_data[aa][a]
@@ -707,7 +707,7 @@
                     m = getattr(self, 'draw_'+ data[0])
                     m(xxx[k], *data[1], **data[2])
                 self.vbo[aa][a] = xxx
-                id_dict[long(current_id)] = weakref.ref(a)
+                id_dict[int(current_id)] = weakref.ref(a)
                 current_id = current_id + 1
         #glFinish()                
         return id_dict, need_oit
@@ -1968,7 +1968,7 @@
         target = self.get_container(a)
         box = trans.transform([frame_range[0:2], frame_range[2:4]])
         d = box[1] - box[0]
-        w, h = long(d[0])*multisample, long(d[1])*multisample
+        w, h = int(d[0])*multisample, int(d[1])*multisample
         make_new = False
 
 
--- python/ifigure/matplotlib_mod/glcanvas_15.py	(original)
+++ python/ifigure/matplotlib_mod/glcanvas_15.py	(refactored)
@@ -81,13 +81,13 @@
             
 
     def gc_artist_data(self):
-        keys = self.artists_data.keys()
+        keys = list(self.artists_data.keys())
         for aa in keys:
             if aa.figobj is None:
                del self.artists_data[aa]
                del self.vbo[aa]               
             else:
-               keys2 = self.artists_data[aa].keys()  
+               keys2 = list(self.artists_data[aa].keys())  
                for a in keys2:
                   if hasattr(a, 'figobj') and a.figobj is None:
                       del self.artists_data[aa][a]
@@ -303,8 +303,8 @@
         iNumSamples = (GLint * 1)()               
         glGetIntegerv(GL_SAMPLE_BUFFERS, iMultiSample)
         glGetIntegerv(GL_SAMPLES, iNumSamples)
-        print("MSAA on, GL_SAMPLE_BUFFERS ",  np.array(iMultiSample),
-              " ", np.array(iNumSamples))
+        print(("MSAA on, GL_SAMPLE_BUFFERS ",  np.array(iMultiSample),
+              " ", np.array(iNumSamples)))
 
     def setLineWidth(self, l):
         self.set_uniform(glUniform1f,  'uLineWidth', l)
@@ -789,7 +789,7 @@
                     m = getattr(self, 'draw_'+ data[0])
                     m(xxx[k], *data[1], **data[2])
                 self.vbo[aa][a] = xxx
-                id_dict[long(current_id)] = weakref.ref(a)
+                id_dict[int(current_id)] = weakref.ref(a)
                 current_id = current_id + 1
         #glFinish()                
         return id_dict, need_oit
@@ -1771,7 +1771,7 @@
             if len(edgecolor) == np.sum(counts):
                 col = edgecolor
             else:
-                print edgecolor.shape, counts
+                print(edgecolor.shape, counts)
                 assert False, "edge color length is wrong"
             col = np.hstack(col).astype(np.float32) 
             if vbos['ec'] is None:
@@ -2198,7 +2198,7 @@
         target = self.get_container(a)
         box = trans.transform([frame_range[0:2], frame_range[2:4]])
         d = box[1] - box[0]
-        w, h = long(d[0])*multisample, long(d[1])*multisample
+        w, h = int(d[0])*multisample, int(d[1])*multisample
         make_new = False
 
         if target in self.frame_list:
--- python/ifigure/matplotlib_mod/mpl_utils.py	(original)
+++ python/ifigure/matplotlib_mod/mpl_utils.py	(refactored)
@@ -27,7 +27,7 @@
     else:
         import six
         color = [six.next(get_color_cycle(axes))
-                 for i in xrange(nx)]
+                 for i in range(nx)]
 
 def call_savefig_method(ifigure_canvas, name, *args, **kargs):
     '''
--- python/ifigure/mdsplus/direct_jobrunner.py	(original)
+++ python/ifigure/mdsplus/direct_jobrunner.py	(refactored)
@@ -21,7 +21,7 @@
        a class for debuging
        '''
        def get(self, expr, *args, **kwargs):
-           print 'expression'+expr
+           print('expression'+expr)
            return Connection.get(self, expr, *args, **kwargs)
 except:
    traceback.print_exc()
@@ -146,7 +146,7 @@
             code = compile(expr, '<string>', 'exec')
             g = {}
             l = {}
-            exec code in self.g, self.r
+            exec(code, self.g, self.r)
             return 'ok'
          except:
             self.error = ['Scrip Error', expr, sys.exc_info()[0]]
@@ -166,7 +166,7 @@
                      #print tree, 
                      #print long(shot)
                      if tree != '':
-                         self.connection.openTree(tree, long(shot))
+                         self.connection.openTree(tree, int(shot))
                   except:
                      self.error = ['run error', traceback.format_exc()]
                      return None
@@ -241,7 +241,7 @@
                shot = job.params[1]
                try:
                   if tree != '':
-                      self.t = MDSplus.Tree(tree, long(shot))
+                      self.t = MDSplus.Tree(tree, int(shot))
                   if shot != self._shot:
                       expr = 'reset_private();reset_public();1'
 #                      r =MDSplus.Data.compile(expr).evaluate().data()
--- python/ifigure/mdsplus/direct_jobrunner_ts.py	(original)
+++ python/ifigure/mdsplus/direct_jobrunner_ts.py	(refactored)
@@ -115,7 +115,7 @@
             code = compile(expr, '<string>', 'exec')
             g = {}
             l = {}
-            exec code in self.g, self.r
+            exec(code, self.g, self.r)
             return 'ok'
          except:
             self.error = ['Scrip Error', expr, sys.exc_info()[0]]
@@ -135,7 +135,7 @@
 #                  print tree, 
 #                  print long(shot)
                   if tree != '':
-                      self.connection.openTree(tree, long(shot))
+                      self.connection.openTree(tree, int(shot))
                except:
                   self.error = ['run error', traceback.format_exc()]
                   return None
@@ -205,7 +205,7 @@
                shot = job.params[1]
                try:
                   if tree != '':
-                      self.t = MDSplus.Tree(tree, long(shot))
+                      self.t = MDSplus.Tree(tree, int(shot))
                   if shot != self._shot:
                       expr = 'reset_private();reset_public();1'
 #                      r =MDSplus.Data.compile(expr).evaluate().data()
--- python/ifigure/mdsplus/dlg_mdssession.py	(original)
+++ python/ifigure/mdsplus/dlg_mdssession.py	(refactored)
@@ -347,7 +347,7 @@
 #            self.Freeze()
             new_name = str(dlg.GetValue())
             data, script = self.pages2data()
-            if new_name in  data.keys(): 
+            if new_name in  list(data.keys()): 
                 dlg.Destroy()
                 return
 #            len(data.keys())
@@ -360,7 +360,7 @@
                 else:
                    self.nb.GetPage(i).set_syntax('none')
             p = self._new_stc(self.nb, '', syntax = 'none') 
-            self.nb.InsertPage(len(data.keys()), p, new_name, True)
+            self.nb.InsertPage(len(list(data.keys())), p, new_name, True)
             self.Bind(wx.stc.EVT_STC_MODIFIED, self.onModified, p)
 #            data[new_name] = ''
 #            self.data2pages(data)
@@ -402,7 +402,7 @@
 #        self._selected_page = label
 
     def onClosePage(self, evt):
-        print 'onClose'
+        print('onClose')
         ipage = self.nb.GetSelection()
         label  = str(self.nb.GetPageText(ipage))
         if label.startswith('*'): label = label[1:]
@@ -579,7 +579,7 @@
 
     def onEL_Changed(self, evt): 
         from ifigure.mdsplus.fig_mds import required_variables
-        print evt.widget_idx
+        print(evt.widget_idx)
         if evt.widget_idx == 0:
             plot_type = str(evt.elp.GetValue()[0])
             v = required_variables[plot_type]
@@ -621,7 +621,7 @@
             p.SetText(txt)
 #            if not mod: p.SetSavePoint()
         except UnicodeDecodeError:
-            p.SetText(unicode(txt, errors='ignore'))
+            p.SetText(str(txt, errors='ignore'))
 #            if not mod: p.SetSavePoint()
         pass
 
--- python/ifigure/mdsplus/dlg_mdssession_data.py	(original)
+++ python/ifigure/mdsplus/dlg_mdssession_data.py	(refactored)
@@ -196,13 +196,13 @@
 #            self.Freeze()
             new_name = str(dlg.GetValue())
             data, script = self.pages2data()
-            if new_name in  data.keys(): return
+            if new_name in  list(data.keys()): return
 #            len(data.keys())
             for i in range(self.nb.GetPageCount()):
                 self.nb.GetPage(i).set_syntax('none')
 
             p = self._new_stc(self.nb, '', syntax = 'none') 
-            self.nb.InsertPage(len(data.keys()), p, new_name, True)
+            self.nb.InsertPage(len(list(data.keys())), p, new_name, True)
             self.Bind(wx.stc.EVT_STC_MODIFIED, self.onModified, p)
 #            data[new_name] = ''
 #            self.data2pages(data)
@@ -459,7 +459,7 @@
             p.SetText(txt)
 #            if not mod: p.SetSavePoint()
         except UnicodeDecodeError:
-            p.SetText(unicode(txt, errors='ignore'))
+            p.SetText(str(txt, errors='ignore'))
 #            if not mod: p.SetSavePoint()
         pass
 
--- python/ifigure/mdsplus/dlg_setting2.py	(original)
+++ python/ifigure/mdsplus/dlg_setting2.py	(refactored)
@@ -153,7 +153,7 @@
 
     if not '_flag' in gs: gs['_flag'] = [[],[],[],[]]
     for m in range(4):
-             for key in value[m][0].keys():
+             for key in list(value[m][0].keys()):
                   if not key in gs:
                      gs[key] = [None]*4
                   gs[key][m] = value[m][0][key]
--- python/ifigure/mdsplus/event_listener.py	(original)
+++ python/ifigure/mdsplus/event_listener.py	(refactored)
@@ -1,5 +1,5 @@
 import multiprocessing as mp
-import threading, Queue, traceback
+import threading, queue, traceback
 import time, tempfile, wx, select
 from weakref import WeakKeyDictionary
 import ifigure.utils.debug as debug
--- python/ifigure/mdsplus/event_listener_proc.py	(original)
+++ python/ifigure/mdsplus/event_listener_proc.py	(refactored)
@@ -1,5 +1,5 @@
 import multiprocessing as mp
-import threading, Queue, traceback
+import threading, queue, traceback
 import time
 from weakref import WeakKeyDictionary
 import __future__
--- python/ifigure/mdsplus/event_listener_proc_debug.py	(original)
+++ python/ifigure/mdsplus/event_listener_proc_debug.py	(refactored)
@@ -2,7 +2,7 @@
 fake listner thread for debugging
 '''
 import multiprocessing as mp
-import threading, Queue, traceback
+import threading, queue, traceback
 import time
 from weakref import WeakKeyDictionary
 import __future__
@@ -70,7 +70,7 @@
     listener_thread.task_queue.put(('exit', ''), False)
     listener_thread.queue.put('stop')
 
-    print 'good bye'
+    print('good bye')
 
     
    
--- python/ifigure/mdsplus/event_listener_proc_fake.py	(original)
+++ python/ifigure/mdsplus/event_listener_proc_fake.py	(refactored)
@@ -3,7 +3,7 @@
 '''
 
 import multiprocessing as mp
-import threading, Queue, traceback
+import threading, queue, traceback
 import time
 from weakref import WeakKeyDictionary
 import __future__
--- python/ifigure/mdsplus/fake_jobrunner.py	(original)
+++ python/ifigure/mdsplus/fake_jobrunner.py	(refactored)
@@ -1,6 +1,6 @@
 import sys, socket, shlex, threading, os, binascii, subprocess, time, tempfile
-import SocketServer, traceback
-import cPickle as pickle
+import socketserver, traceback
+import pickle as pickle
 from ifigure.utils.pickled_pipe import PickledPipe
 l = 3000000
 
--- python/ifigure/mdsplus/fig_mds.py	(original)
+++ python/ifigure/mdsplus/fig_mds.py	(refactored)
@@ -21,7 +21,7 @@
 
 import logging, os, weakref, time, threading
 import ifigure.utils.cbook as cbook
-import cPickle as pickle
+import pickle as pickle
 
 from ifigure.mto.treedict  import TreeDict
 from ifigure.mto.fig_obj   import FigObj
@@ -203,7 +203,7 @@
                    extra[key+'_catalog'] = self.result[key]
                    self.result[key] = self.result[key].restore()
                except:
-                   print(traceback.format_exc())
+                   print((traceback.format_exc()))
                    self.result['error message'] = ['failed to file transfar']           
        for key in extra: self.result[key] = extra[key]
        self.done = True
@@ -245,7 +245,7 @@
 
 class FigMds(FigGrp):
     def __init__(self, *args, **kargs):
-        if kargs.has_key('dwplot'):
+        if 'dwplot' in kargs:
            dwplot = kargs['dwplot']
            del(kargs['dwplot'])
         else:
@@ -274,7 +274,7 @@
 
     def import_dwplot(self, dwplot):
         def read_dwplot(name, dwplot):
-            if dwplot.has_key(name): 
+            if name in dwplot: 
                 return dwplot[name]
             return ''
  
@@ -285,13 +285,13 @@
         ## this is an option to generate FigXXX
         plot_options = self.getvar('plot_options')
         if 'show_mode' in dwplot:
-           if long(dwplot['show_mode']) == 2:
+           if int(dwplot['show_mode']) == 2:
                plot_options['timetrace'] = (('-o',), 
                                        def_plot_options['timetrace'][1].copy())
                plot_options['stepplot'] = (('-o',), 
                                        def_plot_options['stepplot'][1].copy())
 
-           elif long(dwplot['show_mode']) == 1:
+           elif int(dwplot['show_mode']) == 1:
                plot_options['timetrace'] = (('s',),
                                        def_plot_options['timetrace'][1].copy())
                plot_options['stepplot'] = (('s',), 
@@ -692,7 +692,7 @@
                   ana.result['shot'] = ana.shot
                   if self.getvar('posvars') is not None:
                       a = {}; b = {}
-                      exec self.getvar('posvars') in  a, b
+                      exec(self.getvar('posvars'),  a, b)
                       for key in b:
                           ana.result[key] = b[key]
                   filepath = os.path.join(self.owndir(), script_file_name)
@@ -711,14 +711,14 @@
                       else:
                           se.RunSED(code, viewer.g, ana.result, filepath)
                   else:
-                      exec code in viewer.g, ana.result
+                      exec(code, viewer.g, ana.result)
                except:
                   dprint1('error occured when processing data by script')
                   print('error occured when processing data by following script')
                   print('#####')
                   print(txt)
                   print('#####')
-                  print(traceback.format_exc())
+                  print((traceback.format_exc()))
                   self.change_suppress(True, self.get_child(ishot))
                   return False
 
@@ -897,7 +897,7 @@
         except Exception:
            logging.basicConfig(level=logging.DEBUG)
            logging.exception('error in post processing')
-           print(ana.result)
+           print((ana.result))
            obj.setvar('x', [0])
            obj.setvar('y', [0])
            obj.setp('use_var', True)
@@ -1146,14 +1146,14 @@
 
         lc = {'c':current, 'p':prevshot, 'm': -1}
         if self.getvar("posvars") is not None:
-           exec self.getvar("posvars") in {}, lc
+           exec(self.getvar("posvars"), {}, lc)
         if txt.strip() == '': return 0, prevshot
         try:
             val = eval(txt, {}, lc)
         except:
             print('Failed to evaluate shot text')
-            print('shot text', txt)
-            print('name space', lc)
+            print(('shot text', txt))
+            print(('name space', lc))
             #print traceback.format_exc()
             return None, None
         if 0 < val < 1000:
@@ -1220,7 +1220,7 @@
             opt[mode][1][name] = v
         if 'FigMds' in data:
             val = data['FigMds'][1]
-            for key in val.keys():
+            for key in list(val.keys()):
                  self.setp(key, val[key])
             if len(data['FigMds']) > 2:
                 param = data['FigMds'][2]
--- python/ifigure/mdsplus/fig_mdsdata.py	(original)
+++ python/ifigure/mdsplus/fig_mdsdata.py	(refactored)
@@ -46,14 +46,14 @@
                   code = compile(txt, '<string>', 'exec')
                   g = {}
                   l = {}
-                  exec code in viewer.g, ana.result
+                  exec(code, viewer.g, ana.result)
                except:
                   dprint1('error occured when processing data by script')
                   print('error occured when processing data by following script')
                   print('#####')
                   print(txt)
                   print('#####')
-                  print(traceback.format_exc())
+                  print((traceback.format_exc()))
                   self.get_child(ishot).set_suppress(True)
                   ana.postprocess_done = True
                   return
--- python/ifigure/mdsplus/import_dw.py	(original)
+++ python/ifigure/mdsplus/import_dw.py	(refactored)
@@ -79,7 +79,7 @@
        elif coms[1]=='columns':
            plots= [[] for k in range(int(var))]
        elif coms[1][:8]=='geometry':
-           geom = [long(x) for x in var.split('+')[0].split('x')]
+           geom = [int(x) for x in var.split('+')[0].split('x')]
        else:    
            setting[coms[-1]]=var      
        wx.GetApp().Yield(True)
--- python/ifigure/mdsplus/mds_job.py	(original)
+++ python/ifigure/mdsplus/mds_job.py	(refactored)
@@ -6,6 +6,6 @@
    def __repr__(self):
        return str(self.command) + ' ' + str(self.params)
    def print_job(self):
-       print(self.command, self.params)
+       print((self.command, self.params))
    def txt_job(self):
        return (self.command, self.params)
--- python/ifigure/mdsplus/mds_mpth_directworker.py	(original)
+++ python/ifigure/mdsplus/mds_mpth_directworker.py	(refactored)
@@ -64,7 +64,7 @@
 
                       r2 = {}
                       for n in def_names:
-                          if r.has_key(n):
+                          if n in r:
                               if isinstance(r[n], ndarray) and can_compress:  r[n] = squeeze(r[n])
                               if (isinstance(r[n], ndarray) and
                                   r[n].size > 5e4 and len(r[n].shape) == 1 and
--- python/ifigure/mdsplus/mds_mpth_proxyworker.py	(original)
+++ python/ifigure/mdsplus/mds_mpth_proxyworker.py	(refactored)
@@ -58,7 +58,7 @@
                              def_names.append(n)
                        r2 = {}
                        for n in def_names:
-                           if r.has_key(n):
+                           if n in r:
                                if isinstance(r[n], ndarray) and can_compress:  r[n] = squeeze(r[n])
                                if (isinstance(r[n], ndarray) and
                                     r[n].size > 5e4 and len(r[n].shape) == 1 and
@@ -90,7 +90,7 @@
        super(MDSMPProxyWorker, self).__init__(*args, **kargs)
        self.task_queue = task_queue
        self.result_queue = result_queue
-       self.port = long(port)
+       self.port = int(port)
        self.host = host
 
    def run(self, *args, **kargs):
@@ -102,7 +102,7 @@
        super(MDSTHProxyWorker, self).__init__(*args, **kargs)
        self.task_queue = task_queue
        self.result_queue = result_queue
-       self.port = long(port)
+       self.port = int(port)
        self.host = host
        ProxyWorkerBase.use_compress = True
    def run(self, *args, **kargs):
--- python/ifigure/mdsplus/mds_mpth_worker_pool.py	(original)
+++ python/ifigure/mdsplus/mds_mpth_worker_pool.py	(refactored)
@@ -2,7 +2,7 @@
 #   MDS worker pool for threaded worker and multiprocessing worker.
 #
 import multiprocessing as mp
-import time, weakref, threading, Queue
+import time, weakref, threading, queue
 import ifigure.utils.debug as debug
 debug.debug_default_level = 1
 dprint1, dprint2, dprint3 = debug.init_dprints('MDSMPWorkerPool')
@@ -35,7 +35,7 @@
            v = self.results.get(True)
        except:
            import traceback
-           print(traceback.format_exc())
+           print((traceback.format_exc()))
            return None
        self.results.task_done()
        if not (isinstance(v, tuple) and len(v) == 3): return v
@@ -55,7 +55,7 @@
                 ana_group[idx].set_result(result != None, result)
             except:
                 import traceback
-                print(traceback.format_exc())
+                print((traceback.format_exc()))
                 return None
             xxx[0] = xxx[0]-1
             if xxx[0] == 0:
@@ -82,7 +82,7 @@
                ana_group = xxx[1]()
                ana_groups.append(ana_group)
                del MDSWorkerPoolBase.job_list[job_id]
-       print('cancelled jobs', ana_groups)
+       print(('cancelled jobs', ana_groups))
        return ana_groups
 
    def has_noresult(self):
@@ -152,8 +152,8 @@
            host = None
            port = None
 
-       self.tasks = Queue.Queue()   
-       self.results= Queue.Queue()   
+       self.tasks = queue.Queue()   
+       self.results= queue.Queue()   
 
        self.workers = [None]*num
        for i in range(num):
--- python/ifigure/mdsplus/mds_sp_directworker.py	(original)
+++ python/ifigure/mdsplus/mds_sp_directworker.py	(refactored)
@@ -74,7 +74,7 @@
             code = compile(expr, '<string>', 'exec')
             g = {}
             l = {}
-            exec code in self.g, self.r
+            exec(code, self.g, self.r)
             return 'ok'
          except:
             self.error = ['Scrip Error', expr, sys.exc_info()[0]]
@@ -86,7 +86,7 @@
                tree = job.params[0]
                shot = job.params[1]
                try:
-                  self.connection.openTree(tree, long(shot))
+                  self.connection.openTree(tree, int(shot))
                   return 'ok'
                except:
                   self.error = ['run error', traceback.format_exc()]
@@ -122,7 +122,7 @@
                tree = job.params[0]
                shot = job.params[1]
                try:
-                  self.t = MDSplus.Tree(tree, long(shot))
+                  self.t = MDSplus.Tree(tree, int(shot))
                   return 'ok'
                except:
                   self.error = ['run error', traceback.format_exc()]
@@ -185,7 +185,7 @@
                r2 = {}
 #               r = {n:r[n] for n in def_names if r.has_key(n)}
                for n in def_names:
-                   if r.has_key(n):
+                   if n in r:
                       r2[n] = r[n]
 
                ch.send(r2)
--- python/ifigure/mdsplus/mds_sp_proxyworker.py	(original)
+++ python/ifigure/mdsplus/mds_sp_proxyworker.py	(refactored)
@@ -1,6 +1,6 @@
 import sys, socket, shlex, threading, os, binascii, subprocess, time, tempfile
-import SocketServer, traceback
-import cPickle as pickle
+import socketserver, traceback
+import pickle as pickle
 from ifigure.utils.pickled_pipe import PickledPipe
 
 from ifigure.mdsplus.proxy_jobrunner import JobRunner
@@ -44,7 +44,7 @@
                      def_names.append(n)
                r2 = {}
                for n in def_names:
-                   if r.has_key(n):
+                   if n in r:
                       r2[n] = r[n]
                ch.send(r2)
         else:
--- python/ifigure/mdsplus/mds_sp_worker_pool.py	(original)
+++ python/ifigure/mdsplus/mds_sp_worker_pool.py	(refactored)
@@ -95,7 +95,7 @@
                ans_list.append((p, i))
        if len(ans_list) == 0:
            return None, -1
-       ret = ans_list[long(random.random()*len(ans_list))]
+       ret = ans_list[int(random.random()*len(ans_list))]
        return ret[0], ret[1] 
 
    def get_num_worker(self):
--- python/ifigure/mdsplus/mdsplus_gateway.py	(original)
+++ python/ifigure/mdsplus/mdsplus_gateway.py	(refactored)
@@ -1,7 +1,7 @@
 #!/usr/bin/python
 
 import socket, threading, os, signal, sys, time, logging, traceback
-import SocketServer
+import socketserver
 #import paramiko
 import binascii
 import pickle as pickle
@@ -19,7 +19,7 @@
     s = ':'.join(l[:-2])
     return s, p, t
 
-class ForkingTCPRequestHandler(SocketServer.StreamRequestHandler):
+class ForkingTCPRequestHandler(socketserver.StreamRequestHandler):
 #
     def __init__(self, *args, **kargs):
         name = '/tmp/mdsplus_gateway_'+str(os.getpid()) +'.log'
@@ -31,7 +31,7 @@
            self.fid = open(name, 'w')
         else:
            self.fid = None
-        SocketServer.StreamRequestHandler.__init__(self, *args, **kargs)
+        socketserver.StreamRequestHandler.__init__(self, *args, **kargs)
     def write_log(self, txt):
         if self.fid is not None:
            self.fid.write(txt + '\n')
@@ -49,7 +49,7 @@
 #        logging.basicConfig(level = logging.DEBUG)
         try:
             data = pickle.loads(asmessage)
-        except ValueError, EOFError:
+        except ValueError as EOFError:
             if self.fid is not None:
                  self.fid.write('picke error \n')
                  self.fid.flush()
@@ -103,7 +103,7 @@
                             self.fid.write(str(self.error))
                             self.fid.flush()
         if self.fid is not None:
-           self.fid.write('return variables  \n' + str(r.keys()) + '\n')
+           self.fid.write('return variables  \n' + str(list(r.keys())) + '\n')
            self.fid.flush()
 
         sr=pickle.dumps(r)
@@ -126,7 +126,7 @@
            try:
               if tree != '':
                   self.write_log('opening tree :' +str(tree) + ':'+str(shot))
-                  self.connection.openTree(tree, long(shot))
+                  self.connection.openTree(tree, int(shot))
               response='ok'
            except Exception:
               self.error = ['run error', traceback.format_exc()]
@@ -158,7 +158,7 @@
         elif com == 'w': # dim_of (this is not used anymore)
            self.write_log('dim_of '+str(param))
            expr = param[1:]
-           dim =  long(param[0])
+           dim =  int(param[0])
            try:
 #               response =MDSplus.Data.compile(param).evaluate().data() 
                response = self.connection.get(expr).dim_of(dim).data() 
@@ -179,7 +179,7 @@
            try:
               if tree != '':
                   self.write_log('opening tree '+str(tree) + ' '+str(shot))
-                  self.t = MDSplus.Tree(tree, long(shot))
+                  self.t = MDSplus.Tree(tree, int(shot))
                   self.write_log('opening tree '+str(self.t))
               response='ok'
            except Exception:
@@ -203,7 +203,7 @@
            node = a[2]
            expr = ','.join(a[3:])
            try:
-              self.t = MDSplus.Tree(tree, long(shot))
+              self.t = MDSplus.Tree(tree, int(shot))
               if node.strip() != '':
                  tn = self.t.getNode(node)
                  self.t.setDefault(tn)
@@ -228,7 +228,7 @@
         elif com == 'w': # dim_of (this is not used anymore)
            self.write_log('dim_of '+str(param))
            expr = param[1:]
-           dim =  long(param[0])
+           dim =  int(param[0])
            try:
 #               response =MDSplus.Data.compile(param).evaluate().data() 
                response =MDSplus.Data.execute(expr).dim_of(dim).data() 
@@ -240,7 +240,7 @@
 
 #class ThreadedTCPServer(SocketServer.ThreadingMixIn, SocketServer.TCPServer):
 #    pass
-class ForkingTCPServer(SocketServer.ForkingMixIn, SocketServer.TCPServer):
+class ForkingTCPServer(socketserver.ForkingMixIn, socketserver.TCPServer):
      pass
 
 
@@ -255,8 +255,8 @@
         self.server = ForkingTCPServer((self.host, self.port), 
                                     ForkingTCPRequestHandler)
 
-        print('Starting MDSplus Gateway', self.host, self.port)
-        print(sys.stdout)
+        print(('Starting MDSplus Gateway', self.host, self.port))
+        print((sys.stdout))
         self.ip, self.port = self.server.server_address
         sys.stdout.flush()
         sys.stderr.flush()
@@ -277,7 +277,7 @@
            sys.stderr.flush()
 
     def signal_handler(self, signal, frame):
-        print('Received singal', signal)
+        print(('Received singal', signal))
         self.server.shutdown()      
         sys.exit(0)
 
@@ -313,6 +313,6 @@
               sys.exit(2)
               sys.exit(0)
     else:
-        print("usage: %s start|stop|restart" % sys.argv[0])
+        print(("usage: %s start|stop|restart" % sys.argv[0]))
         sys.exit(2)
 
--- python/ifigure/mdsplus/mdsplus_gateway_th.py	(original)
+++ python/ifigure/mdsplus/mdsplus_gateway_th.py	(refactored)
@@ -1,17 +1,17 @@
 #!/usr/bin/python
 
 import socket, threading, os, signal, sys, time
-import SocketServer
+import socketserver
 import paramiko
 import binascii
-import cPickle as pickle
+import pickle as pickle
 from ifigure.utils.daemon import Daemon
 import MDSplus
 
-class ThreadingTCPRequestHandler(SocketServer.BaseRequestHandler):
+class ThreadingTCPRequestHandler(socketserver.BaseRequestHandler):
 #
     def __init__(self, *args, **kargs):
-        SocketServer.BaseRequestHandler.__init__(self, *args, **kargs)
+        socketserver.BaseRequestHandler.__init__(self, *args, **kargs)
         name = '/tmp/mdspluse_gateway_thread'+str(os.getpid()) +'.log'
 #        self.fid = open(name, 'w')
     def handle(self):
@@ -19,7 +19,7 @@
 
         data = pickle.loads(binascii.a2b_hex(message))
         #cur_thread = threading.current_thread()
-        print("Request " , data)
+        print(("Request " , data))
 
         r = {}
         for name, commands in data:
@@ -28,41 +28,41 @@
                 param = command[1:]
                 r[name] = self._handle(com, param)
 
-        print('return variables', r.keys())
+        print(('return variables', list(r.keys())))
 
         sr=pickle.dumps(r)
         response = binascii.b2a_hex(sr)
-        print("sending data (length)", len(response))
+        print(("sending data (length)", len(response)))
         self.request.sendall(response+'\n')
 #        self.fid.flush()
 
     def _handle(self, com, param):
         response = ''
 
-        print(com, param)
+        print((com, param))
         if com == 'c': # connection request
            tree, shot, node=param.split(',')
            try:
-              print('opening tree', tree, shot)
-              self.t = MDSplus.Tree(tree, long(shot))
-              print('opening tree', self.t)
+              print(('opening tree', tree, shot))
+              self.t = MDSplus.Tree(tree, int(shot))
+              print(('opening tree', self.t))
               if node.strip() != '':
                  tn = self.t.getNode(node)
                  self.t.setDefault(tn)
               response='ok'
            except Exception:
-              print('Error', str(sys.exc_info()[1])+','+str(sys.exc_info()[2]))
+              print(('Error', str(sys.exc_info()[1])+','+str(sys.exc_info()[2])))
               response = ''
         if com == 'd':
            node=param
-           print('setting def node', node)
+           print(('setting def node', node))
            try:
               if node.strip() != '':
                  tn = self.t.getNode(node)
                  self.t.setDefault(tn)
               response='ok'
            except Exception:
-              print('Error', str(sys.exc_info()[1])+','+str(sys.exc_info()[2]))
+              print(('Error', str(sys.exc_info()[1])+','+str(sys.exc_info()[2])))
               response=''
 
         if com == 'f': # connection request
@@ -72,23 +72,23 @@
            node = a[2]
            expr = ','.join(a[3:])
            try:
-              self.t = MDSplus.Tree(tree, long(shot))
+              self.t = MDSplus.Tree(tree, int(shot))
               if node.strip() != '':
                  tn = self.t.getNode(node)
                  self.t.setDefault(tn)
               response =MDSplus.Data.compile(expr).evaluate().data() 
 #              print "sending data (length)", len(response)
            except Exception:
-              print('Error', str(sys.exc_info()[1])+','+str(sys.exc_info()[2]))
+              print(('Error', str(sys.exc_info()[1])+','+str(sys.exc_info()[2])))
               response=''
 
 
         if com == 'v': # mdsvalue
-           print('mdsvalue', param)
+           print(('mdsvalue', param))
            try:
                response =MDSplus.Data.compile(param).evaluate().data() 
            except Exception:
-              print('Error', str(sys.exc_info()[1])+','+str(sys.exc_info()[2]))
+              print(('Error', str(sys.exc_info()[1])+','+str(sys.exc_info()[2])))
               response=''
 
 #           print "sending data (length)", len(response), 'original :', type(sr)
@@ -97,7 +97,7 @@
 
 #class ThreadedTCPServer(SocketServer.ThreadingMixIn, SocketServer.TCPServer):
 #    pass
-class ThreadingTCPServer(SocketServer.ThreadingMixIn, SocketServer.TCPServer):
+class ThreadingTCPServer(socketserver.ThreadingMixIn, socketserver.TCPServer):
      pass
 
 
@@ -112,8 +112,8 @@
         self.server = ThreadingTCPServer((self.host, self.port), 
                                     ThreadingTCPRequestHandler)
 
-        print('Starting MDSGateway', self.host, self.port)
-        print(sys.stdout)
+        print(('Starting MDSGateway', self.host, self.port))
+        print((sys.stdout))
         self.ip, self.port = self.server.server_address
         sys.stdout.flush()
         sys.stderr.flush()
@@ -133,7 +133,7 @@
            sys.stderr.flush()
 
     def signal_handler(self, signal, frame):
-        print('Received singal', signal)
+        print(('Received singal', signal))
         self.server.shutdown()      
         sys.exit(0)
 
@@ -159,6 +159,6 @@
               sys.exit(2)
               sys.exit(0)
     else:
-        print("usage: %s start|stop|restart" % sys.argv[0])
+        print(("usage: %s start|stop|restart" % sys.argv[0]))
         sys.exit(2)
 
--- python/ifigure/mdsplus/mdsscope.py	(original)
+++ python/ifigure/mdsplus/mdsscope.py	(refactored)
@@ -45,7 +45,7 @@
 __email__ = "shiraiwa@psfc.mit.edu"
 __status__ = "beta"
 
-import wx, sys, time, weakref, logging, threading, Queue, os, shutil, numpy, traceback, collections
+import wx, sys, time, weakref, logging, threading, queue, os, shutil, numpy, traceback, collections
 import multiprocessing as mp
 #import wx.aui as aui
 import ifigure
@@ -114,7 +114,7 @@
 def start_mds_threads():
     if globals()['mds_thread'] is None:
        lock.acquire()
-       queue = Queue.Queue()   
+       queue = queue.Queue()   
        globals()['mds_thread'] = SessionRunner(queue)
        globals()['mds_thread'].start()
        lock.release()
@@ -161,7 +161,7 @@
                    self.w_type == w_type and
                    self.t_type == t_type): return
                num_worker = mds_num_worker
-               print('starting '+ str(num_worker) + ' ' + w_type +  ' workers')
+               print(('starting '+ str(num_worker) + ' ' + w_type +  ' workers'))
                kwargs = {'translater':t_type}
                if w_type == 'mp':
                     self.pool = MDSMPWorkerPool(num_worker, 
@@ -1054,8 +1054,8 @@
            try:
                txt = eval(txt[1:], globals(), self._shot_dict)
            except:
-               print('Failed to evaluate string', txt[1:])
-               print(traceback.format_exc())
+               print(('Failed to evaluate string', txt[1:]))
+               print((traceback.format_exc()))
                raise
         return txt
 
@@ -1185,7 +1185,7 @@
         self.startup_script = user_file
         dc = {}; dg = {}
         from ifigure.mdsplus.fig_mds import read_scriptfile
-        exec read_scriptfile(self.startup_script) in dg, dc
+        exec(read_scriptfile(self.startup_script), dg, dc)
         self.startup_values = dc
 
         self._start_mds_threads() # start session runner and event listener
@@ -1200,7 +1200,7 @@
         self.use_book_scope_param()
 
 
-        if len(bitmaps.keys()) == 0:
+        if len(list(bitmaps.keys())) == 0:
            for icon in bitmap_names:
               from ifigure.ifigure_config import icondir as path
               path=os.path.join(path, '16x16', icon)
@@ -1688,7 +1688,7 @@
                for y in ax._yaxis:
                    y.ticks = ps[iax]['y.grid_lines']
            if 'global_defaults' in ps[iax]:
-               bit = long(ps[iax]['global_defaults'])
+               bit = int(ps[iax]['global_defaults'])
                if bit & 2**10 != 0: figmds._var_mask.append('x')
                if bit & 2**11 != 0: figmds._var_mask.append('y')
                # set grid
@@ -2253,7 +2253,7 @@
                 p.setvar('group_id', gid)
                 p._status = 'group '+str(gid+1)
             ip = p.get_ichild()
-            for i in range(nump)-1:
+            for i in list(range(nump))-1:
                obj = self.book.load_subtree(fname, compress=False)
                obj.rename(obj.name + 'tmptmp')
                obj.setvar('group_id', gid)
@@ -2354,7 +2354,7 @@
 #             w = None
 #             h = None
              for p in self.book.walk_page():
-                 p.set_figure_dpi(long(p.getp('dpi')*ratio))
+                 p.set_figure_dpi(int(p.getp('dpi')*ratio))
 #             self.canvas.show_spacer(w=0, h=0)
 #             self.canvas.full_screen(True)
              self.ShowFullScreen(True)
@@ -2381,7 +2381,7 @@
         return vars
     def onMDSEvent(self, e):
         txt = str(self.txt_shot.GetValue())
-        print('MDS event', e.mdsevent_name, self)
+        print(('MDS event', e.mdsevent_name, self))
         self.check_valid_worker_type()
 
         if (txt.startswith('=') or
@@ -2404,7 +2404,7 @@
         if self._mode == 'apply':
             mm = [x for x in self._figmds_list if x.get_figbook() is self.book]
             self._figmds_list = []
-            print('updating '+str(len(mm)) + ' panels')
+            print(('updating '+str(len(mm)) + ' panels'))
             self._handle_apply_abort(allshot=True, 
                                      figaxes = mm)
         else:
@@ -2549,7 +2549,7 @@
         LoadData(False) : no blocking mode
         '''
         if blocking:
-           m =  Queue.Queue()
+           m =  queue.Queue()
            globals()['call_after_queue'] = m
         self._handle_apply_abort(allshot=allshot, figaxes=figaxes, do_apply=do_apply)
         if not blocking: return
--- python/ifigure/mdsplus/mdsscope_nw.py	(original)
+++ python/ifigure/mdsplus/mdsscope_nw.py	(refactored)
@@ -25,7 +25,7 @@
 __email__ = "shiraiwa@psfc.mit.edu"
 __status__ = "beta"
 
-import wx, sys, time, weakref, logging, threading, Queue, os, shutil, numpy, traceback, collections
+import wx, sys, time, weakref, logging, threading, queue, os, shutil, numpy, traceback, collections
 import multiprocessing as mp
 #import wx.aui as aui
 import ifigure
@@ -79,7 +79,7 @@
         self._parent = ''
         self._status_txt = ['']*10
         self._print_status = True
-        if kargs.has_key("book"):
+        if "book" in kargs:
            self.book = kargs["book"]
            del kargs["book"]
  #          self.book.set_open(True)
@@ -89,13 +89,13 @@
 
     def SetTitle(self, title):
         self._title = title
-        print('title: ', title)
+        print(('title: ', title))
     def GetTitle(self):
         return self._title
     def SetStatusText(self, txt, idx):
         self._status_txt[idx] = txt
         if self._print_status:
-             print('status: ', txt)
+             print(('status: ', txt))
 
     def get_page(self, ipage=None):
         if ipage is None:
@@ -194,7 +194,7 @@
         self.startup_script = user_file
         dc = {}; dg = {}
         from ifigure.mdsplus.fig_mds import read_scriptfile
-        exec read_scriptfile(self.startup_script) in dg, dc
+        exec(read_scriptfile(self.startup_script), dg, dc)
         self.startup_values = dc
 
         self._start_mds_threads() # start session runner and event listener
@@ -266,7 +266,7 @@
         o_printstatus = self._print_status
         self._print_status = verbose
         if blocking:
-           m =  Queue.Queue()
+           m =  queue.Queue()
            set_call_after_queue(m)
         self._handle_apply_abort(allshot = allshot, 
                                  figaxes = figaxes, 
--- python/ifigure/mdsplus/proxy_jobrunner.py	(original)
+++ python/ifigure/mdsplus/proxy_jobrunner.py	(refactored)
@@ -1,6 +1,6 @@
 import sys, socket, shlex, threading, os, binascii, subprocess, time, tempfile
-import SocketServer, traceback
-import cPickle as pickle
+import socketserver, traceback
+import pickle as pickle
 from ifigure.utils.pickled_pipe import PickledPipe
 
 def pick_unused_port():
@@ -189,7 +189,7 @@
             code = compile(expr, '<string>', 'exec')
             g = globals()
             l = {}
-            exec code in self.g, self.r
+            exec(code, self.g, self.r)
             return 'ok'
         except:
             self.error = ['Scrip Error', expr, sys.exc_info()[0]]
--- python/ifigure/mto/abs_module.py	(original)
+++ python/ifigure/mto/abs_module.py	(refactored)
@@ -23,8 +23,8 @@
         mtime = os.path.getmtime(file)     
         return m, mtime
     except Exception:
-        print('Module loading failed: ', file)
-        print(traceback.format_exc())
+        print(('Module loading failed: ', file))
+        print((traceback.format_exc()))
 
     return None, 0
 
@@ -137,7 +137,7 @@
         return self._debug
 
     def load_module(self):
-        print('Loading Module File :', self._m_file)
+        print(('Loading Module File :', self._m_file))
         self.unbind_method()
         self._m_co, self._m_mtime = load_module_file(self._m_file)
         if self._m_co is not None:
--- python/ifigure/mto/fig_annotate.py	(original)
+++ python/ifigure/mto/fig_annotate.py	(refactored)
@@ -27,7 +27,7 @@
            arrowprops=dict(arrowstyle="->",
                            connectionstyle="arc3")
         self._objs=[]  ## for debug....        
-        if kywds.has_key("draggable"): 
+        if "draggable" in kywds: 
             self.setvar("draggable", kywds["draggable"])
             del kywds["draggable"]
         else: self.setvar("draggable", True)
@@ -189,7 +189,7 @@
         return hit, extra, type, loc
 
     def drag_a(self, a, evt, shift=None):
-        print(self._picker_a_type)
+        print((self._picker_a_type))
         shift = evt.guiEvent.ShiftDown()
         redraw = super(FigAnnotate, self).drag_a(a, evt, shift = shift)
         return redraw
--- python/ifigure/mto/fig_arrow.py	(original)
+++ python/ifigure/mto/fig_arrow.py	(refactored)
@@ -43,7 +43,7 @@
             obj._drag_start = None
             return obj
 
-        if kywds.has_key('src'):
+        if 'src' in kywds:
             obj = FigObjGPHolder.__new__(cls, *args, **kywds)
             obj = set_hidden_vars(obj)
             obj.setvar('clip', True)   ## backword compatiblity should come here
@@ -84,7 +84,7 @@
         obj = FigObjGPHolder.__new__(cls, *args, **kywds)
         obj = set_hidden_vars(obj)
 
-        for name in v.keys(): 
+        for name in list(v.keys()): 
             obj.setvar(name, v[name])
 
         if not 'facecolor' in kywds: kywds['facecolor'] = 'k'
@@ -99,7 +99,7 @@
         self._cb_added = False
 
         args = []
-        if not kywds.has_key('src'):
+        if 'src' not in kywds:
             kywds = self.getvar("kywds")
 
         GenericPointsHolder.__init__(self, num=2)
--- python/ifigure/mto/fig_axes.py	(original)
+++ python/ifigure/mto/fig_axes.py	(refactored)
@@ -38,7 +38,7 @@
 import ifigure, os, ifigure.events
 from ifigure.utils.geom import scale_rect
 
-import cPickle as pickle
+import pickle as pickle
 import ifigure.utils.cbook as cbook
 from ifigure.widgets.undo_redo_history import GlobalHistory
 from ifigure.widgets.undo_redo_history import UndoRedoArtistProperty
@@ -964,7 +964,7 @@
         tsize = figpage.getp('title_size')        
 
 
-        if isinstance(value, basestring):
+        if isinstance(value, str):
             # Don't use this!
             # use viewer.title whenever possible.
             dprint1('set_title is called with string argument. not recommendad')
@@ -1071,7 +1071,7 @@
     ### tick color
     def set_axtcolor(self, param, a):
         p = self.get_axis_param(param[0])
-        if isinstance(param[1], unicode):
+        if isinstance(param[1], str):
             p.tcolor = str(param[1])
         else:
             p.tcolor = param[1]
@@ -1085,7 +1085,7 @@
     ### tick/label color
     def set_axtlcolor(self, param, a):
         p = self.get_axis_param(param[0])
-        if isinstance(param[1], unicode):
+        if isinstance(param[1], str):
             p.tcolor = str(param[1][0])
         else:
             p.tcolor = param[1][0]
@@ -1266,7 +1266,7 @@
     def load_data(self, fid=None):
 #        print "loading  fig_axes data"        
         val=pickle.load(fid)
-        for key in val.keys():
+        for key in list(val.keys()):
            self.setp(key, val[key])
         #print "loading  fig_axes data", val        
         super(FigAxes, self).load_data(fid)
@@ -1286,7 +1286,7 @@
                     #print self.getp('title_labelinfo')
                     if 'title_labelinfo' in data['FigObj'][2]:
                          del data['FigObj'][2]['title_labelinfo']
-            for key in val.keys():
+            for key in list(val.keys()):
                  self.setp(key, val[key])
             if len(data['FigAxes']) > 2:
                 param = data['FigAxes'][2]
@@ -1760,11 +1760,11 @@
         self._set_3d_pane_color(self.get_3d_pane_colorcode())
 
     def get_3d_pane_colorname(self):
-        return zip(*self._3d_pane_color)[0]
+        return list(zip(*self._3d_pane_color))[0]
     def get_3d_pane_coloralpha(self):
-        return zip(*self._3d_pane_color)[1]
+        return list(zip(*self._3d_pane_color))[1]
     def get_3d_pane_colorcode(self):
-        return zip(*self._3d_pane_color)[2]
+        return list(zip(*self._3d_pane_color))[2]
 
     def _set_3d_pane_color(self, code):
         from ifigure.matplotlib_mod.axes_mod import AxesMod
@@ -1853,7 +1853,7 @@
 class FigInsetAxes(FigAxes):
     def __init__(self, *args, **kywds):
 #        self.child=[]
-        if kywds.has_key("draggable"): 
+        if "draggable" in kywds: 
             self.setvar("draggable", kywds["draggable"])
             del kywds["draggable"]
         else: self.setvar("draggable", True)
--- python/ifigure/mto/fig_axline.py	(original)
+++ python/ifigure/mto/fig_axline.py	(refactored)
@@ -32,7 +32,7 @@
             obj._data_extent=None
             return obj
 
-        if kywds.has_key('src'):
+        if 'src' in kywds:
             obj = FigObj.__new__(cls, *args, **kywds)
             obj = set_hidden_vars(obj)
             return obj
@@ -55,7 +55,7 @@
 
         obj = FigObj.__new__(cls, *args, **kywds)
         obj = set_hidden_vars(obj)
-        for name in v.keys(): obj.setvar(name, v[name])
+        for name in list(v.keys()): obj.setvar(name, v[name])
         obj.setvar("kywds", kywds)        
 
         return obj
@@ -69,7 +69,7 @@
         YUser.__init__(self)
 
         args = []
-        if not kywds.has_key('src'):
+        if 'src' not in kywds:
             kywds = self.getvar("kywds")
         super(FigAxline,self).__init__(*args, **kywds)
 
--- python/ifigure/mto/fig_axspan.py	(original)
+++ python/ifigure/mto/fig_axspan.py	(refactored)
@@ -56,7 +56,7 @@
             obj._drag_mode=0
             obj._data_extent=None
             return obj
-        if kywds.has_key('src'):
+        if 'src' in kywds:
             obj = FigObj.__new__(cls, *args, **kywds)
             obj = set_hidden_vars(obj)
             return obj
@@ -80,7 +80,7 @@
         obj = FigObj.__new__(cls, *args, **kywds)
 
         obj = set_hidden_vars(obj)
-        for name in v.keys(): obj.setvar(name, v[name])
+        for name in list(v.keys()): obj.setvar(name, v[name])
         obj.setvar("kywds", kywds)        
 
         return obj
@@ -90,7 +90,7 @@
         YUser.__init__(self)
 
         args = []
-        if not kywds.has_key('src'):
+        if 'src' not in kywds:
             kywds = self.getvar("kywds")
         FigObj.__init__(self, *args, **kywds)
 
--- python/ifigure/mto/fig_box.py	(original)
+++ python/ifigure/mto/fig_box.py	(refactored)
@@ -38,7 +38,7 @@
         '''
 
         self._objs=[]  ## for debug....        
-        if kywds.has_key("draggable"): 
+        if "draggable" in kywds: 
             self.setvar("draggable", kywds["draggable"])
             del kywds["draggable"]
         else: self.setvar("draggable", True)
--- python/ifigure/mto/fig_circle.py	(original)
+++ python/ifigure/mto/fig_circle.py	(refactored)
@@ -46,7 +46,7 @@
         '''
 
         self._objs=[]  ## for debug....        
-        if kywds.has_key("draggable"): 
+        if "draggable" in kywds: 
             self.setvar("draggable", kywds["draggable"])
             del kywds["draggable"]
         else: self.setvar("draggable", True)
--- python/ifigure/mto/fig_contour.py	(original)
+++ python/ifigure/mto/fig_contour.py	(refactored)
@@ -78,7 +78,7 @@
             obj._expression = ''
             return obj
 
-        if kywds.has_key('src'):
+        if 'src' in kywds:
             obj = FigObj.__new__(cls, *args, **kywds)
             obj = set_hidden_vars(obj)
             return obj
@@ -140,7 +140,7 @@
 
         self._pick_pos = None
         args = []
-        if not kywds.has_key('src'):
+        if 'src' not in kywds:
             kywds = self.getvar("kywds")
         super(FigContour,self).__init__(**kywds)
 
@@ -249,7 +249,7 @@
                y = y.flatten()
                z = z.flatten()                              
                args, self._tri =  tri_args(x, y, self._tri)
-               print args
+               print(args)
            else:
                args=[]               
                if x is not None: args.append(x)
@@ -450,7 +450,7 @@
     def set_contour_nlevel2(self, value, a=None):
         self._nouse_expression = not value[0]
 #        print value
-        self.setp('n', long(value[2][0]))
+        self.setp('n', int(value[2][0]))
         self.setp('v', value[1][0][1])
         self._expression = value[1][0][0]
         self.highlight_artist(False)
@@ -859,7 +859,7 @@
         self._clabel_param['inline'] = gui_param[1][2]
         self._clabel_param['inline_spacing'] = float(gui_param[1][3])
         self._clabel_param['fmt'] =  str(gui_param[1][4])
-        self._clabel_param['skip'] = long(gui_param[1][5])
+        self._clabel_param['skip'] = int(gui_param[1][5])
         
     def _make_clabel_param(self):
         keys = ['fontsize', 'colors', 'inline', 'inline_spacing', 'fmt']
@@ -868,7 +868,7 @@
         if self._clabel_param['skip'] == 0:
              args = tuple()
         else:
-             k = long(self._clabel_param['skip'])
+             k = int(self._clabel_param['skip'])
              args = (self._mappable.levels[:(self._mappable.levels.size/k)*k].reshape(-1,k)[:,0],)
         kargs['use_clabeltext'] = True
         return args, kargs
--- python/ifigure/mto/fig_control.py	(original)
+++ python/ifigure/mto/fig_control.py	(refactored)
@@ -14,7 +14,7 @@
         try:
             m = getattr(self._cc_callback_obj(), self._cc_callback_name)
         except:
-            print('callback not found', self)
+            print(('callback not found', self))
             traceback.print_exc()                        
             return
         try:        
--- python/ifigure/mto/fig_curve.py	(original)
+++ python/ifigure/mto/fig_curve.py	(refactored)
@@ -38,7 +38,7 @@
         '''
 
         self._objs=[]  ## for debug....        
-        if kywds.has_key("draggable"): 
+        if "draggable" in kywds: 
             self.setvar("draggable", kywds["draggable"])
             del kywds["draggable"]
         else: self.setvar("draggable", True)
@@ -318,7 +318,7 @@
     
     def make_newartist0(self,  pin, draw_arrow = True):
         p = [(item[0], item[1]) for item in pin]
-        codes, verts = zip(*p)
+        codes, verts = list(zip(*p))
         path = matplotlib.path.Path(verts, codes)
         a = PathPatch(path, facecolor='none', fill=False, 
                             edgecolor='black', alpha=1)
--- python/ifigure/mto/fig_eps.py	(original)
+++ python/ifigure/mto/fig_eps.py	(refactored)
@@ -100,17 +100,17 @@
         self.writeFonts()
         self.writeObject(self.alphaStateObject,
                          dict([(val[0], val[1])
-                               for val in self.alphaStates.itervalues()]))
+                               for val in self.alphaStates.values()]))
         self.writeHatches()
         self.writeGouraudTriangles()
-        xobjects = dict(self.images.itervalues())
-        for tup in self.markers.itervalues():
+        xobjects = dict(iter(self.images.values()))
+        for tup in self.markers.values():
             xobjects[tup[0]] = tup[1]
-        for name, value in self.multi_byte_charprocs.iteritems():
+        for name, value in self.multi_byte_charprocs.items():
             xobjects[name] = value
         for name, path, trans, ob, join, cap, padding, filled, stroked in self.paths:
             xobjects[name] = ob
-        for tup in self.pdfs.itervalues():
+        for tup in self.pdfs.values():
             xobjects[tup[0]] = tup[1]
         self.writeObject(self.XObjectObject, xobjects)
         self.writeImages()
@@ -340,7 +340,7 @@
             _eps_file = os.path.join(self._figobj().owndir(), self._eps_file)
             def ps_write(txt):
                 if unicode_file:                
-                    ps_write0(unicode(txt))
+                    ps_write0(str(txt))
                 else:
                     ps_write0(txt)
                 
@@ -424,7 +424,7 @@
 #        file = '/Users/shiraiwa/piscope_src/example/images/cmod_logo_official_better_color.eps'
 
         self.setvar('org_epsfile', file)
-        if not kywds.has_key('src'):
+        if 'src' not in kywds:
             kywds = self.getvar("kywds")
             kywds['xy'] = self.getvar('xy')
         super(FigEPS,self).__init__(**kywds)
@@ -560,8 +560,8 @@
         ox = self._eps_bbox[2] - self._eps_bbox[0]
         oy = self._eps_bbox[3] - self._eps_bbox[1]
 
-        dx = long(ox*float(value[2])/100.)
-        dy = long(oy*float(value[3])/100.)
+        dx = int(ox*float(value[2])/100.)
+        dy = int(oy*float(value[3])/100.)
         x1d, y1d=self.get_gp(0).get_device_point()
         self.get_gp(1).set_device_point(x1d+dx, y1d+dy)
         self.refresh_artist()
@@ -572,8 +572,8 @@
         ix = self._image.shape[1]
         iy = self._image.shape[0]
 
-        dx = long(ox*float(self._image_scale_str[0])/100.)
-        dy = long(oy*float(self._image_scale_str[1])/100.)
+        dx = int(ox*float(self._image_scale_str[0])/100.)
+        dy = int(oy*float(self._image_scale_str[1])/100.)
         if (ix != dx or iy != dy):
            return (self._keep_aspect,
                    self._resize_mode,
@@ -608,7 +608,7 @@
         else:
            new_size = (abs(x1d - x2d), abs(y1d-y2d))
 
-        new_size = [long(x) for x in new_size]
+        new_size = [int(x) for x in new_size]
         if (new_size[0] == self._image_size[0] and
             new_size[1] == self._image_size[1] and
             self._image is not None): return
@@ -618,7 +618,7 @@
         src = os.path.join(wdir, self.getvar('epsfile'))
 
         params = []
-        params += ['-resize', str(long(new_size[0]))+'x'+str(long(new_size[1]))+'!']
+        params += ['-resize', str(int(new_size[0]))+'x'+str(int(new_size[1]))+'!']
         #print 'calling convert',  params
 
         app = self.get_root_parent().app
--- python/ifigure/mto/fig_fill.py	(original)
+++ python/ifigure/mto/fig_fill.py	(refactored)
@@ -59,7 +59,7 @@
             obj._data_extent=None
             return obj
 
-        if kywds.has_key('src'):
+        if 'src' in kywds:
             obj = FigObj.__new__(cls, *args, **kywds)
             obj = set_hidden_vars(obj)
             return obj
@@ -98,7 +98,7 @@
         obj._mpl_cmd = mpl_cmd
         if v["x"] is None:
            v["x"] = np.arange(v["y"].shape[-1])
-        for name in v.keys(): obj.setvar(name, v[name])
+        for name in list(v.keys()): obj.setvar(name, v[name])
         obj.setvar("kywds", kywds)
         return obj
 
@@ -108,7 +108,7 @@
         ZUser.__init__(self)
 
         args = []
-        if not kywds.has_key('src'):
+        if 'src' not in kywds:
             kywds = self.getvar("kywds")
         super(FigFill,self).__init__(*args, **kywds)
 
@@ -234,7 +234,7 @@
         except:
             dprint1('Failed to generate artilst') 
             import traceback
-            print(traceback.format_exc())
+            print((traceback.format_exc()))
             self._artists = []
             return
             pass
--- python/ifigure/mto/fig_hist.py	(original)
+++ python/ifigure/mto/fig_hist.py	(refactored)
@@ -52,7 +52,7 @@
                 if not obj.hasvar(key): obj.setvar(key, default_kargs[key])
             return obj
 
-        if kywds.has_key('src'):
+        if 'src' in kywds:
             obj = FigObj.__new__(cls, *args, **kywds)
             obj = set_hidden_vars(obj)
             return obj
@@ -89,7 +89,7 @@
         self._bins = None
         self._hit_a = None                    
         args = []
-        if not kywds.has_key('src'):
+        if 'src' not in kywds:
             kywds = self.getvar("kywds")
         super(FigHist,self).__init__(**kywds)
     @classmethod
--- python/ifigure/mto/fig_image.py	(original)
+++ python/ifigure/mto/fig_image.py	(refactored)
@@ -63,7 +63,7 @@
             return obj
 
 
-        if kywds.has_key('src'):
+        if 'src' in kywds:
             obj = FigObj.__new__(cls, *args, **kywds)
             obj = set_hidden_vars(obj)
             return obj
@@ -107,7 +107,7 @@
         self._pick_pos = None
         self._cb_added = False
         args = []
-        if not kywds.has_key('src'):
+        if 'src' not in kywds:
             kywds = self.getvar("kywds")
         super(FigImage,self).__init__(**kywds)
 
@@ -596,11 +596,11 @@
             dy = np.floor(p1[1]-p0[1])+2
             xp = idtrans(
                 np.transpose(
-                np.vstack((np.floor(p0[0])+np.arange(long(dx)),
+                np.vstack((np.floor(p0[0])+np.arange(int(dx)),
                            np.linspace(p0[0], p1[0], dx)))))[:,0]
             yp = idtrans(
                 np.transpose(
-                np.vstack((np.floor(p0[1])-1+np.zeros(long(dy)),
+                np.vstack((np.floor(p0[1])-1+np.zeros(int(dy)),
                            np.linspace(p0[1], p1[1], dy)))))[:,1]
 
             # eliminate points outside the data range
--- python/ifigure/mto/fig_legend.py	(original)
+++ python/ifigure/mto/fig_legend.py	(refactored)
@@ -41,11 +41,11 @@
         '''
 
         self._objs=[]  ## for debug....        
-        if kywds.has_key("draggable"): 
+        if "draggable" in kywds: 
             self.setvar("draggable", kywds["draggable"])
             del kywds["draggable"]
         else: self.setvar("draggable", False)
-        if kywds.has_key("container_idx"): 
+        if "container_idx" in kywds: 
             self._container_idx = kywds["container_idx"]
             del kywds["container_idx"]
         else: self._container_idx = 0
@@ -458,7 +458,7 @@
             idx = self._artists[0].get_texts().index(self._hit_a)
         else:
             idx = -1
-        return idx, idxlabel, zip(labels, colors)
+        return idx, idxlabel, list(zip(labels, colors))
 
     def set_legendentry(self, value, a):
         idx = value[0]
@@ -581,7 +581,7 @@
         if tab == 'label1':
            idx = 0
         else:
-           idx = long(tab)-1
+           idx = int(tab)-1
         return idx
     def _get_texts(self):
         if len(self._artists)==0: return []
--- python/ifigure/mto/fig_obj.py	(original)
+++ python/ifigure/mto/fig_obj.py	(refactored)
@@ -26,7 +26,7 @@
 import ifigure.utils.geom as geom
 import ifigure.events
 import logging, weakref, traceback
-import cPickle as pickle
+import pickle as pickle
 from matplotlib.lines import Line2D
 from ifigure.utils.cbook import isiterable
 import numpy as np
@@ -306,7 +306,7 @@
         process keyword given to __init__
         store them to var
         '''
-        if kywds.has_key(name):
+        if name in kywds:
             self.setvar(name, kywds[name])
             del kywds[name]
         else: self.setvar(name, d)
@@ -391,7 +391,7 @@
            self._drag_hl.figure.lines.remove(self._drag_hl)
            self._drag_hl = None
         self.del_artist(delall=True)
-        for key in self._attr.keys(): 
+        for key in list(self._attr.keys()): 
             self._attr[key]=None
         ### calles super class which kills children first
         super(FigObj, self).destroy(clean_owndir=clean_owndir)
@@ -920,7 +920,7 @@
            obj=args[0]
            name = obj.name
 
-        if not kargs.has_key('keep_zorder'):kargs['keep_zorder']=False
+        if 'keep_zorder' not in kargs:kargs['keep_zorder']=False
 
         figpage = self.get_figpage()
         if not 'z_base' in kargs:
@@ -963,8 +963,8 @@
               return tuple([self._attr.get(n, None) for n in name])
            except:
               import sys, traceback
-              print("FigObj::getp error:", sys.exc_info()[0])
-              print(traceback.format_exc())
+              print(("FigObj::getp error:", sys.exc_info()[0]))
+              print((traceback.format_exc()))
 #              print "fig obj att not found "+name
               return [None]*len(name)
        else:
@@ -982,7 +982,7 @@
 #          print "fig obj att not found "+name
           return None
     def hasp(self, name):
-        return self._attr.has_key(name)
+        return name in self._attr
 
 
      
@@ -1093,10 +1093,10 @@
         
     def onShowAtt(self, e):
         from matplotlib.artist import getp
-        for key in self._attr.keys():
-             print(key, type(self._attr[key]))
+        for key in list(self._attr.keys()):
+             print((key, type(self._attr[key])))
         for a in self._artists:
-             print(getp(a))
+             print((getp(a)))
 
     def onForceUpdate(self, evt):
         print('calling forced update.... check if it is necessary')
@@ -1174,8 +1174,8 @@
            box=a.get_window_extent(a.figure._cachedRenderer)
            return box.xmin, box.xmax, box.ymin, box.ymax
         except:
-           print('error in get_artist_extent for ', a)
-           print(traceback.format_exc())
+           print(('error in get_artist_extent for ', a))
+           print((traceback.format_exc()))
            return [None]*4
         return [None]*4
 
@@ -1306,8 +1306,8 @@
                d = (float(self._st_extent[3]-self._st_extent[2])/
                     float(self._st_extent[1]-self._st_extent[0]))     
                dy = float(rec[1]-rec[0])*d
-               if ((loc & 4) != 0): rec[2] = long(rec[3]-dy)
-               if ((loc & 8) != 0): rec[3] = long(rec[2]+dy)
+               if ((loc & 4) != 0): rec[2] = int(rec[3]-dy)
+               if ((loc & 8) != 0): rec[3] = int(rec[2]+dy)
 
             self._drag_rec = rec
             scale = geom.calc_scale(rec, self._st_extent)
@@ -1471,7 +1471,7 @@
            pass
 #           print "no loaded property....artist was not realized when saved?"
 #        print(loaded_prop)
-        if val.has_key("format"):
+        if "format" in val:
            if val["format"]==2:
               attr=pickle.load(fid)
               for k in attr:
@@ -1520,7 +1520,7 @@
        return vals
 
     def set_artist_property(self, a, vals):
-       for key in vals.keys():
+       for key in list(vals.keys()):
 #          if isMPL2 and key == 'axis_bgcolor': key = 'facecolor'           
           if hasattr(a, 'set_'+key):
               (getattr(a, 'set_'+key))(vals[key])
@@ -1534,7 +1534,7 @@
 #   set artist property
 #
     def mpl_set(self, name, *value, **kargs):
-        if kargs.has_key("ia"):
+        if "ia" in kargs:
             ia = kargs["ia"]
         else:
             ia = 0
--- python/ifigure/mto/fig_page.py	(original)
+++ python/ifigure/mto/fig_page.py	(refactored)
@@ -346,10 +346,10 @@
         dx = [1./ncol]*ncol
         dy = [[1./nrow[k]]*nrow[k] for k in range(ncol)]
 
-        if kargs.has_key('dx'):
+        if 'dx' in kargs:
             dx = check_d(kargs["dx"], ncol)
             if dx is None: return             
-        if kargs.has_key('dy'):
+        if 'dy' in kargs:
             dy = check_d(kargs["dy"], nrow[0])
     
         areas0=[]
--- python/ifigure/mto/fig_plot.py	(original)
+++ python/ifigure/mto/fig_plot.py	(refactored)
@@ -47,7 +47,7 @@
             obj._decimate_limit = _decimate_limit
             return obj
 
-        if kywds.has_key('src'):
+        if 'src' in kywds:
             obj = FigObj.__new__(cls, *args, **kywds)
             obj = set_hidden_vars(obj)
             return obj
@@ -84,7 +84,7 @@
             if isinstance(v['cmap'], Colormap): v['cmap'] = v['cmap'].name
             kywds['cmap'] = v['cmap']
             del v['cmap']
-        for name in v.keys(): obj.setvar(name, v[name])
+        for name in list(v.keys()): obj.setvar(name, v[name])
         obj.setvar("kywds", kywds)
         return obj
 
@@ -95,7 +95,7 @@
         CUser.__init__(self)
 
         args = []
-        if not kywds.has_key('src'):
+        if 'src' not in kywds:
             kywds = self.getvar("kywds")
         super(FigPlot,self).__init__(*args, **kywds)
 
@@ -534,7 +534,7 @@
             self._use_decimate = False
             return False
         skip = x.size/10
-        ix = range(10)
+        ix = list(range(10))
         t = [x[ix*skip] - x[(ix+1)*skip] for ix in range(9)]
         #print t
         #print abs((max(t) - min(t))/np.mean(t))
@@ -811,7 +811,7 @@
     written in FigPLot
     '''
     def __new__(cls, *args, **kywds):
-        if kywds.has_key('src'):
+        if 'src' in kywds:
             obj = FigPlot.__new__(cls, *args, **kywds)
 #            obj = set_hidden_vars(obj)
             obj._use_decimate = False
@@ -838,7 +838,7 @@
         obj._mpl_cmd = mpl_cmd
         if (v["x"] is None and not isdynamic(v["y"])):
             v["x"] = np.arange(v["y"].shape[-1])
-        for name in v.keys(): obj.setvar(name, v[name])
+        for name in list(v.keys()): obj.setvar(name, v[name])
         obj.setvar("kywds", kywds)
         return obj
 
@@ -895,7 +895,7 @@
    
     '''
     def __new__(cls, *args, **kywds):
-        if kywds.has_key('src'):
+        if 'src' in kywds:
             obj = FigPlot.__new__(cls, *args, **kywds)
 #            obj = set_hidden_vars(obj)
             obj._use_decimate = True
@@ -922,7 +922,7 @@
         obj._mpl_cmd = mpl_cmd
         if (v["x"] is None and not isdynamic(v["y"])):
             v["x"] = np.arange(v["y"].shape[-1])
-        for name in v.keys(): obj.setvar(name, v[name])
+        for name in list(v.keys()): obj.setvar(name, v[name])
         obj.setvar("kywds", kywds)
         return obj
 
--- python/ifigure/mto/fig_quiver.py	(original)
+++ python/ifigure/mto/fig_quiver.py	(refactored)
@@ -33,7 +33,7 @@
         def set_hidden_vars(obj):
             return obj
 
-        if kywds.has_key('src'):
+        if 'src' in kywds:
             obj = FigObj.__new__(cls, *args, **kywds)
             obj = set_hidden_vars(obj)
             return obj
@@ -81,7 +81,7 @@
 
         self._pick_pos = None
         args = []
-        if not kywds.has_key('src'):
+        if 'src' not in kywds:
             kywds = self.getvar("kywds")
         super(FigQuiver,self).__init__(**kywds)
 
@@ -477,7 +477,7 @@
         def set_hidden_vars(obj):
             return obj
 
-        if kywds.has_key('src'):
+        if 'src' in kywds:
             obj = FigObj.__new__(cls, *args, **kywds)
             obj = set_hidden_vars(obj)
             return obj
@@ -712,7 +712,7 @@
         for a in self._artists:
             a.set_edgecolor(value)
             a._update_ec = True
-            print 'update_ec'
+            print('update_ec')
 
     def _update_artist(self):
         self.highlight_artist(False)
--- python/ifigure/mto/fig_scatter.py	(original)
+++ python/ifigure/mto/fig_scatter.py	(refactored)
@@ -51,7 +51,7 @@
                 if not obj.hasvar(key): obj.setvar(key, default_kargs[key])
             return obj
 
-        if kywds.has_key('src'):
+        if 'src' in kywds:
             obj = FigObj.__new__(cls, *args, **kywds)
             obj = set_hidden_vars(obj)
             return obj
@@ -97,7 +97,7 @@
         self._pick_pos = None
         self._cb_added = False
         args = []
-        if not kywds.has_key('src'):
+        if 'src' not in kywds:
             kywds = self.getvar("kywds")
         super(FigScatter,self).__init__(**kywds)
     @classmethod
--- python/ifigure/mto/fig_solid.py	(original)
+++ python/ifigure/mto/fig_solid.py	(refactored)
@@ -27,7 +27,7 @@
             obj._data_extent=None
             return obj
 
-        if kywds.has_key('src'):
+        if 'src' in kywds:
             obj = FigObj.__new__(cls, *args, **kywds)
             obj = set_hidden_vars(obj)
             return obj
@@ -71,7 +71,7 @@
         obj = FigObj.__new__(cls, *args, **kywds)
         obj = set_hidden_vars(obj)
 
-        for name in v.keys(): obj.setvar(name, v[name])
+        for name in list(v.keys()): obj.setvar(name, v[name])
         obj.setvar("kywds", kywds)
         return obj
 
@@ -83,7 +83,7 @@
         GLCompound.__init__(self)
 
         args = []
-        if not kywds.has_key('src'):
+        if 'src' not in kywds:
             kywds = self.getvar("kywds")
         super(FigSolid,self).__init__(*args, **kywds)
 
--- python/ifigure/mto/fig_spec.py	(original)
+++ python/ifigure/mto/fig_spec.py	(refactored)
@@ -39,7 +39,7 @@
                 if not obj.hasvar(key): obj.setvar(key, default_kargs[key])
             return obj
 
-        if kywds.has_key('src'):
+        if 'src' in kywds:
             obj = FigObj.__new__(cls, *args, **kywds)
             obj = set_hidden_vars(obj)
             return obj
@@ -143,11 +143,11 @@
         self._rebuild_artist()
 #        super(FigSpec, self).refresh_artist_data()
     def set_spec_fftp(self, value, a):
-        self.setp('NFFT', long(value[0]))
+        self.setp('NFFT', int(value[0]))
         if value[1] == 'none':
             self.setp('pad_to', None)
         else:
-            self.setp('pad_to', long(value[1]))
+            self.setp('pad_to', int(value[1]))
         self._rebuild_artist()
     def get_spec_fftp(self, a):
         if self.getp("pad_to") is None:
@@ -156,7 +156,7 @@
            pad_to  = str(self.getp("pad_to"))
         return str(self.getp('NFFT')), pad_to
     def set_spec_noverlap(self, value, a):
-        self.setp('noverlap', long(value))
+        self.setp('noverlap', int(value))
         self._rebuild_artist()
     def get_spec_noverlap(self,  a):        
         return self.getp('noverlap')        
--- python/ifigure/mto/fig_spline.py	(original)
+++ python/ifigure/mto/fig_spline.py	(refactored)
@@ -28,7 +28,7 @@
     xp1 = np.concatenate(([xp[0], xp[0]],xp,[xp[-1], xp[-1]]))
     yp1 = np.concatenate(([yp[0], yp[0]],yp,[yp[-1], yp[-1]]))
 
-    ks = range(len(xp)+2)
+    ks = list(range(len(xp)+2))
     ts = np.arange((len(xp)+1)*mesh+1)/float(mesh)-1
     xval = np.zeros(len(ts))
     yval = np.zeros(len(ts))
@@ -58,7 +58,7 @@
             obj._sp_interp = 1
             return obj
 
-        if kywds.has_key('src'):
+        if 'src' in kywds:
             obj = FigObj.__new__(cls, *args, **kywds)
             obj = set_hidden_vars(obj)
             return obj
@@ -81,7 +81,7 @@
 
         if v["x"] is None:
            v["x"] = np.arange(v["y"].shape[-1])
-        for name in v.keys(): obj.setvar(name, v[name])
+        for name in list(v.keys()): obj.setvar(name, v[name])
         obj.setvar("kywds", kywds)
         return obj
 
@@ -90,7 +90,7 @@
         YUser.__init__(self)
 
         args = []
-        if not kywds.has_key('src'):
+        if 'src' not in kywds:
             kywds = self.getvar("kywds")
         super(FigSpline,self).__init__(*args, **kywds)
 
@@ -370,7 +370,7 @@
         if self._hit_seg    == -1: return
 
         #_hit_artist = (artist index, mpl event)
-        idx = long(self._hit_seg/self._mesh)
+        idx = int(self._hit_seg/self._mesh)
         x = [p for p in self.getp("x")]
         y = [p for p in self.getp("y")]
         x.insert(idx, self._hit_artist[1].xdata)
--- python/ifigure/mto/fig_surface.py	(original)
+++ python/ifigure/mto/fig_surface.py	(refactored)
@@ -31,8 +31,8 @@
     # We want two sets of lines, one running along the "rows" of
     # Z and another set of lines running along the "columns" of Z.
     # This transpose will make it easy to obtain the columns.
-    rii = range(0, rows, rstride)
-    cii = range(0, cols, cstride)
+    rii = list(range(0, rows, rstride))
+    cii = list(range(0, cols, cstride))
 
     # Add the last index only if needed
     if rows > 0 and rii[-1] != (rows - 1) :
@@ -52,7 +52,7 @@
             obj._fine_artist = None
             return obj
 
-        if kywds.has_key('src'):
+        if 'src' in kywds:
             obj = FigObj.__new__(cls, *args, **kywds)
             obj = set_hidden_vars(obj)
             return obj
@@ -90,7 +90,7 @@
             kywds['cmap'] = v['cmap']
             del v['cmap']
 
-        for name in v.keys(): obj.setvar(name, v[name])
+        for name in list(v.keys()): obj.setvar(name, v[name])
         obj.setvar("kywds", kywds)
         return obj
 
@@ -101,7 +101,7 @@
         CUser.__init__(self)
 
         args = []
-        if not kywds.has_key('src'):
+        if 'src' not in kywds:
             kywds = self.getvar("kywds")
         super(FigSurface,self).__init__(*args, **kywds)
         self._method  = 'plot_surface'
@@ -581,7 +581,7 @@
             obj._fine_artist = None
             return obj
 
-        if kywds.has_key('src'):
+        if 'src' in kywds:
             obj = FigObj.__new__(cls, *args, **kywds)
             obj = set_hidden_vars(obj)
             return obj
@@ -615,7 +615,7 @@
             kywds['cmap'] = v['cmap']
             del v['cmap']
 
-        for name in v.keys(): obj.setvar(name, v[name])
+        for name in list(v.keys()): obj.setvar(name, v[name])
         obj.setvar("kywds", kywds)
         return obj
 
--- python/ifigure/mto/fig_text.py	(original)
+++ python/ifigure/mto/fig_text.py	(refactored)
@@ -53,7 +53,7 @@
             obj._drag_start = None
             return obj
 
-        if kywds.has_key('src'):
+        if 'src' in kywds:
             obj = FigObjGPHolder.__new__(cls, *args, **kywds)
             obj = set_hidden_vars(obj)
             obj.setvar('clip', True)   ## backword compatiblity should come here
@@ -93,7 +93,7 @@
         obj = FigObjGPHolder.__new__(cls, *args, **kywds)
         obj = set_hidden_vars(obj)
 
-        for name in v.keys(): 
+        for name in list(v.keys()): 
             obj.setvar(name, v[name])
         obj.setvar("kywds", kywds)
 
@@ -104,7 +104,7 @@
         self._cb_added = False
         self._2d_text = True
         args = []
-        if not kywds.has_key('src'):
+        if 'src' not in kywds:
             kywds = self.getvar("kywds")
         GenericPointsHolder.__init__(self, num = num_gp)
         super(FigText,self).__init__(*args, **kywds)
--- python/ifigure/mto/fig_triplot.py	(original)
+++ python/ifigure/mto/fig_triplot.py	(refactored)
@@ -37,7 +37,7 @@
             obj._objs=[]  ## for debug....     
             obj._data_extent=None
             return obj
-        if kywds.has_key('src'):
+        if 'src' in kywds:
             obj = FigObj.__new__(cls, *args, **kywds)
             obj = set_hidden_vars(obj)
             return obj
@@ -59,7 +59,7 @@
         obj = set_hidden_vars(obj)
         if (v["x"] is None and not isdynamic(v["y"])):
             v["x"] = np.arange(v["y"].shape[-1])
-        for name in v.keys(): obj.setvar(name, v[name])
+        for name in list(v.keys()): obj.setvar(name, v[name])
         obj.setvar("kywds", kywds) 
         obj.setvar("tri", tri) 
 
@@ -76,7 +76,7 @@
         YUser.__init__(self)
         TrianglePlots.__init__(self)   
         args = []
-        if not kywds.has_key('src'):
+        if 'src' not in kywds:
             kywds = self.getvar("kywds")
         super(FigTriplot,self).__init__(*args, **kywds)
 
--- python/ifigure/mto/fileholder.py	(original)
+++ python/ifigure/mto/fileholder.py	(refactored)
@@ -200,7 +200,7 @@
             # this check is to recovery from a bug
             # once introduced before.     
             if (not isinstance(self.getvar(pathname), str) and
-                not isinstance(self.getvar(pathname), unicode)):
+                not isinstance(self.getvar(pathname), str)):
                 self.delvar(pathname)
                 return ''
             return os.path.join(base, self.getvar(pathname))
--- python/ifigure/mto/generic_points.py	(original)
+++ python/ifigure/mto/generic_points.py	(refactored)
@@ -4,7 +4,7 @@
 from ifigure.widgets.canvas.custom_picker import linehit_test, abs_d
 from ifigure.widgets.undo_redo_history import GlobalHistory, UndoRedoArtistProperty,UndoRedoFigobjProperty,UndoRedoFigobjMethod
 import weakref
-import cPickle as pickle
+import pickle as pickle
 import numpy as np
 
 '''
--- python/ifigure/mto/hg_support.py	(original)
+++ python/ifigure/mto/hg_support.py	(refactored)
@@ -52,7 +52,7 @@
             if has_repo(obj):
                 url, root, path = obj.get_mercurial_url()
                 if url is None: continue 
-                print('checking incoming to ' + str(url))
+                print(('checking incoming to ' + str(url)))
                 try:
                     repo = hgapi.Repo(obj.owndir())
                     l1, l2 = obj.hg_incoming_outgoing_changesets_list(repo, url)
@@ -86,7 +86,7 @@
        broken_repo = []
        for obj in obj0.get_root_parent().walk_tree():
             if has_repo(obj):
-                print('verifing repo at ' + str(obj))
+                print(('verifing repo at ' + str(obj)))
                 os.chdir(obj.owndir())
                 p = subprocess.Popen(shlex.split('hg verify'), 
                                      stdout=subprocess.PIPE, 
@@ -94,7 +94,7 @@
                 aaa = p.stdout.readlines()
                 for a in aaa: 
                     if a.find('damaged') != -1: 
-                       print('broken repo at ' + str(obj))
+                       print(('broken repo at ' + str(obj)))
                        broken_repo.append(obj)
                        break
        os.chdir(cwd)
@@ -217,7 +217,7 @@
            if overwrite:
                parent.get_child(name = name).destroy()
            else:
-               print(parent.get_full_path()+'.'+name + ' already exists.')
+               print((parent.get_full_path()+'.'+name + ' already exists.'))
                obj = parent.get_child(name = name)
                _add_include_exclude(obj)
                return obj
@@ -228,7 +228,7 @@
        try:
           repo2 = repo.hg_clone(url, dpath)
        except:
-          print url, dpath
+          print(url, dpath)
           dialog.showtraceback(parent = app,
                                    txt='Failed to clone subtree from '+url, 
                                    title='Failed to clone',
@@ -358,7 +358,7 @@
                    break
 
            else:  
-               print(isBinary(path), path)
+               print((isBinary(path), path))
                if isBinary(path):
                    if item in include or any(fnmatch(itemb, x) for x in include):    
                        repo.hg_add(path)
@@ -407,7 +407,7 @@
           repo.hg_push(url)
           repo2 = hgapi.Repo(url)
           latest = repo2.revisions(slice(-1,-1))[0].rev
-          repo2.hg_update(long(latest))
+          repo2.hg_update(int(latest))
        os.chdir(ocwd)
 
        #app = wx.GetApp().TopWindow
@@ -590,7 +590,7 @@
                if value[1][2] and not url.startswith('ssh'):
                    repo2 = hgapi.Repo(url)
                    latest = repo2.revisions(slice(-1,-1))[0].rev
-                   repo2.hg_update(long(latest))
+                   repo2.hg_update(int(latest))
            except:
                dialog.showtraceback(parent = app,
                                     txt='Failed to push',
@@ -754,9 +754,9 @@
            b = str(value[1][2])
            if b == '':
               args = (str(a),)
-           elif long(a) != long(b):
+           elif int(a) != int(b):
               args = (str(a), str(b),)
-           elif long(a) == long(b):
+           elif int(a) == int(b):
               args = tuple()
            try:
                res = repo.hg_diff(*args)
@@ -795,7 +795,7 @@
 #                    self._status = '!'
                     return None
 
-           repo.hg_update(long(m))
+           repo.hg_update(int(m))
 
            parent = self.get_parent()
            owndir = self.owndir()
@@ -894,7 +894,7 @@
                #  and gather *.py to make PyScript
                #  I should be handling other files here too?  
                #
-               print vars
+               print(vars)
                td = handle_pure_file_repo(parent, name, owndir)
                td.setvar(vars)
                load_fpath = False
@@ -967,13 +967,13 @@
        def hg_changesets_list(self, repo = None):
            if repo is None: repo = hgapi.Repo(self.owndir())
            lines = repo.hg_log().split('\n')
-           return [long(l.split(':')[1]) for l in lines if l.find('changeset') != -1]
+           return [int(l.split(':')[1]) for l in lines if l.find('changeset') != -1]
 
        def hg_incoming_outgoing_changesets_list(self, repo = None, url='default'):        
            if repo is None: repo = hgapi.Repo(self.owndir())
            try:
                lines1 = repo.hg_command('incoming', url).split('\n')
-               incoming = [long(l.split(':')[1]) for l in lines1 if l.find('changeset') != -1]
+               incoming = [int(l.split(':')[1]) for l in lines1 if l.find('changeset') != -1]
            except:
                import traceback
                if 'no changes found' in traceback.format_exc():
@@ -983,7 +983,7 @@
                    return [], []            
            try:
                lines2 = repo.hg_command('outgoing', url).split('\n')
-               outgoing = [long(l.split(':')[1]) for l in lines2 if l.find('changeset') != -1]
+               outgoing = [int(l.split(':')[1]) for l in lines2 if l.find('changeset') != -1]
            except:
                import traceback
                if 'no changes found' in traceback.format_exc():
@@ -1002,7 +1002,7 @@
                 self.save2(fid)
                 fid.close()
                 return True
-           except IOError, error:
+           except IOError as error:
                 dprint1('Failed to create current tree data')
                 return False
 
@@ -1127,7 +1127,7 @@
            
 except:
    import traceback
-   print(traceback.print_exc())
+   print((traceback.print_exc()))
    has_hg = False
    def has_repo(obj):
        return False
--- python/ifigure/mto/project_top.py	(original)
+++ python/ifigure/mto/project_top.py	(refactored)
@@ -1,5 +1,5 @@
 import os, sys, weakref, logging, threading
-import cPickle as pickle
+import pickle as pickle
 from ifigure.mto.treedict import TopTreeDict, TreeDict
 from ifigure.mto.py_code import PyParam, AbsModuleContainer, AbsScriptContainer, AbsFileContainer
 from ifigure.mto.py_code import PyModel
@@ -126,7 +126,7 @@
      def show_log(self):
          name = os.path.join(self.eval("wdir"), 'log')
          fid = open(name, 'r')
-         print(''.join(fid.readlines()))
+         print((''.join(fid.readlines())))
          fid.close()
           
      def tree_viewer_menu(self):
@@ -252,7 +252,7 @@
         logging.basicConfig(level=logging.DEBUG)
 
         root = self.get_root_parent()
-        exec root._name + ' = root'
+        exec(root._name + ' = root')
         if len(value[1])!=0:
          try:
               b = eval(value[1])
@@ -542,7 +542,7 @@
                  if (child.hasvar('subtree_path') and
                      os.path.exists(child.getvar('subtree_path'))):
                         path = child.getvar('subtree_path')
-                        print('exporting subtree to '+path)
+                        print(('exporting subtree to '+path))
                         child.save_subtree(path)
 
      def init_after_load(self, olist, nlist):
@@ -557,43 +557,43 @@
         #
         h2=self.getvar("load_property")
 
-        if h2.has_key("isetting"):
+        if "isetting" in h2:
            oid = h2["isetting"]
            self._psetting = self.resolve_olist_nlist_map(oid, olist, nlist)
-        if h2.has_key("imodel"):
+        if "imodel" in h2:
            oid = h2["imodel"]
            self._pmodel = self.resolve_olist_nlist_map(oid, olist, nlist)
-        if h2.has_key("isolver"):
+        if "isolver" in h2:
            oid = h2["isolver"]
            self._psolver = self.resolve_olist_nlist_map(oid, olist, nlist)
-        if h2.has_key("ibook"):
+        if "ibook" in h2:
            oid = h2["ibook"]
            self._pbook = self.resolve_olist_nlist_map(oid, olist, nlist)
-        if h2.has_key("isol"):
+        if "isol" in h2:
            oid = h2["isol"]
            self._psol = self.resolve_olist_nlist_map(oid, olist, nlist)
 
-        if h2.has_key("isetting_path"):
+        if "isetting_path" in h2:
            self._psetting = self.resolve_td_path(h2["isetting_path"])
-        if h2.has_key("imodel_path"):
+        if "imodel_path" in h2:
            self._pmodel = self.resolve_td_path(h2["imodel_path"])
-        if h2.has_key("isolver_path"):
+        if "isolver_path" in h2:
            self._psolver = self.resolve_td_path(h2["isolver_path"])
-        if h2.has_key("ibook_path"):
+        if "ibook_path" in h2:
            self._pbook = self.resolve_td_path(h2["ibook_path"])
-        if h2.has_key("isol_path"):
+        if "isol_path" in h2:
            self._psol = self.resolve_td_path(h2["isol_path"])
 
 
         self.delvar("load_property")
 
         if self._pbook is None:
-           print("??? self._pbook is None", "adjusting ...")
+           print(("??? self._pbook is None", "adjusting ..."))
            if self.num_book() == 0:
                self.onAddBook()
            else:
                for name, child in self.get_children():
                    if isinstance(child, FigBook):
                       self.set_pbook(child)
-           print(self._pbook)
+           print((self._pbook))
            
--- python/ifigure/mto/py_code.py	(original)
+++ python/ifigure/mto/py_code.py	(refactored)
@@ -53,7 +53,7 @@
 from ifigure.widgets.canvas.file_structure import *
 from ifigure.mto.treedict import TreeDict
 import ifigure, os, time, imp, sys, logging, weakref, shutil, wx
-import cPickle as pickle
+import pickle as pickle
 import ifigure.utils.cbook as cbook
 import ifigure.events
 from   ifigure.utils.edit_list import DialogEditList
@@ -117,7 +117,7 @@
          self.add_child(name, obj)
          obj.mk_owndir()
          path = os.path.join(obj.owndir(), obj.name + '.txt')
-         print('creating file ', path)
+         print(('creating file ', path))
          open(path, 'a').close()
          obj.set_path_pathmode(path)
          obj.store_mtime()
@@ -348,7 +348,7 @@
         dest = os.path.join(child.owndir(), name+'.py')
         shutil.copyfile(temp, dest)        
 
-        print('loading...', dest)
+        print(('loading...', dest))
         child.load_module(dest)
 
         w = None
@@ -378,7 +378,7 @@
 
     def onAddAbsModule(self, e, file=None):
         self.add_absmodule(file)
-        print('loading add-on', file)
+        print(('loading add-on', file))
         e.Skip()
 
     def build_module_menu(self, mod_path):
@@ -450,7 +450,7 @@
         if name is None:
              name=self.get_next_name(child.get_namebase())
         if self.has_child(name):
-             print 'doing here'
+             print('doing here')
              name=self.get_next_name(name)
         idx=self.add_child(name, child)
         #print('loading add-on', file)
@@ -611,8 +611,8 @@
         s, f, c, g = self.eval_script_location()
         if s is not None:
            if self._run_verbose:
-               print('Entering :', self.name)
-               print('   Running ', s.get_full_path())
+               print(('Entering :', self.name))
+               print(('   Running ', s.get_full_path()))
            s.do_run()
 
     def do_clean(self):
@@ -621,7 +621,7 @@
            c.do_run()
         for name, treeobj in self.get_children():
            if isinstance(treeobj, PyModel):
-                print("Entering : ", name)
+                print(("Entering : ", name))
                 treeobj.do_clean()
 
     def walk_model(self):
@@ -682,8 +682,8 @@
            # expression is stored as it is
            try:
               root = self.get_root_parent()
-              exec root.name + '= self.get_root_parent()'
-              exec 'ret'+txt
+              exec(root.name + '= self.get_root_parent()')
+              exec('ret'+txt)
            except:
               ret = None
         else:
@@ -691,8 +691,8 @@
               txt = self.get_full_path()+txt
            try:
               root = self.get_root_parent()
-              exec root.name + '= self.get_root_parent()'
-              exec  'ret='+txt
+              exec(root.name + '= self.get_root_parent()')
+              exec('ret='+txt)
            except:
               ret = None
         return ret  
@@ -858,21 +858,21 @@
 
     def load_data2(self, data):
         h2 = data['PyModel'][1]
-        if h2.has_key("r"):
+        if "r" in h2:
             self._run_script=h2["r"]
-        if h2.has_key("c"):
+        if "c" in h2:
             self._cleanup_script=h2["c"]
-        if h2.has_key("f"):
+        if "f" in h2:
             self._finish_script=h2["f"]
-        if h2.has_key("g"):
+        if "g" in h2:
             self._gui_script=h2["g"]
-        if h2.has_key("background"):
+        if "background" in h2:
             self._background = h2["background"]
-        if h2.has_key("run_after"):
+        if "run_after" in h2:
             self._run_after = str(h2["run_after"])
-        if h2.has_key("run_mode"):
+        if "run_mode" in h2:
             self._run_mode = h2["run_mode"]
-        if h2.has_key("run_verbose"):
+        if "run_verbose" in h2:
             self._run_verbose = h2["run_verbose"]
         return super(PyModel, self).load_data2(data)
 
@@ -939,13 +939,13 @@
            if path:
               return d
            else:
-              return d.keys()
+              return list(d.keys())
 
         for item in self.get_parent().walk_tree_up():
             for name, child in item.get_children():
                 if isinstance(child, PyParam):
-                    for key in (child.getvar()).keys():
-                        if not d.has_key(key):
+                    for key in list((child.getvar()).keys()):
+                        if key not in d:
                             d[key]=[(child.get_full_path(), child)]
                         else:
                             d[key].append((child.get_full_path(), child))
@@ -956,22 +956,22 @@
                 if path:
                      return d
                 else:
-                     return d.keys()
+                     return list(d.keys())
 
         except:
            if path:
                return d
            else:
-               return d.keys()
-
-        for key in item.getvar().keys():
-            if not d.has_key(key):
+               return list(d.keys())
+
+        for key in list(item.getvar().keys()):
+            if key not in d:
                 d[key]= (item.get_full_path(), item)
             else:
                 d[key].append((item.get_full_path(), item))
         if path:
             return d
-        return d.keys()
+        return list(d.keys())
 
     def set(self, name, var):
         d = self.eval_all_keys(path=True)
@@ -1007,14 +1007,14 @@
     def onPrint(self, e):
         d = self.eval_all_keys(path=True)
         for key in d:
-            print(key,'defined as...')
+            print((key,'defined as...'))
             for x in d[key]:
                 val=x[1]._var[key]
                 if isinstance(val, str):
                      if val.startswith('='):
                           val = eval(val[1:])
 
-                print('   ', str(val), ' at ',  x[1].get_full_path())
+                print(('   ', str(val), ' at ',  x[1].get_full_path()))
 
     def onExport(self, e):
         d={}
--- python/ifigure/mto/py_connection.py	(original)
+++ python/ifigure/mto/py_connection.py	(refactored)
@@ -37,7 +37,7 @@
     def setSetting(self, value):
         self.setvar('use_ssh', value[1][0])
         self.setvar('server', str(value[1][1][0]))
-        self.setvar('port', long(value[1][1][1]))
+        self.setvar('port', int(value[1][1][1]))
         self.setvar('user', str(value[1][1][2]))
         self.setvar('queue_type', str(value[2]))        
 
@@ -92,7 +92,7 @@
                  p = subprocess.Popen(args, stderr=subprocess.STDOUT,
                                       stdout = subprocess.PIPE, **kargs)
         except:
-            print(traceback.format_exc())
+            print((traceback.format_exc()))
 
         if not nowait:
             while p.poll() == None:
@@ -129,7 +129,7 @@
                  p = subprocess.Popen(args, stderr=subprocess.STDOUT,
                      stdout = subprocess.PIPE, **kargs)
         except:
-            print(traceback.format_exc())
+            print((traceback.format_exc()))
 
         if not nowait:
             while p.poll() == None:
@@ -158,13 +158,13 @@
             p = subprocess.Popen(args, stderr=subprocess.STDOUT,
                  stdout = subprocess.PIPE, **kargs)
         except:
-            print(traceback.format_exc())
-        print('a new process (id =' + str(p.pid) + ') is running')
+            print((traceback.format_exc()))
+        print(('a new process (id =' + str(p.pid) + ') is running'))
         if not nowait:
             while p.poll() == None:
                 #if isInMainThread(): wx.Yield()
                 time.sleep(sltime)
-            print(p.wait())
+            print((p.wait()))
         return p
 
 
--- python/ifigure/mto/py_contents.py	(original)
+++ python/ifigure/mto/py_contents.py	(refactored)
@@ -23,7 +23,7 @@
 #     Copyright(c) 2012- S. Shiraiwa
 #*******************************************
 
-import collections, weakref, sys, time, Queue
+import collections, weakref, sys, time, queue
 import ifigure.events
 from ifigure.widgets.var_viewerg2 import VarViewerGValue
 from ifigure.utils.cbook import SetText2Clipboard
@@ -49,8 +49,8 @@
        text=self._path+',"'+key+'")'
        return text
    def OnCompareItems(self, t1, t2):
-       return (t1[0]._var0.keys().index(t1[1][0])-
-               t2[0]._var0.keys().index(t2[1][0]))
+       return (list(t1[0]._var0.keys()).index(t1[1][0])-
+               list(t2[0]._var0.keys()).index(t2[1][0]))
 
 class Namelist(PyContents):
    def __setitem__(self, key, value):
@@ -86,7 +86,7 @@
        if keylist is None:
             keylist = []
        pitem = item
-       for key in base.keys():
+       for key in list(base.keys()):
            tree.SetItemHasChildren(pitem)
            pitem2 = tree.AppendItem(pitem, key, img)
            vv_val =  self.get_varviewer_value(td, key)
@@ -118,7 +118,7 @@
 
 class MatData(dict):
     def __repr__(self):
-        dataname = ['  ' + x for x in self.keys() if not x.startswith('__')]
+        dataname = ['  ' + x for x in list(self.keys()) if not x.startswith('__')]
         return "Matlab (.mat) data (derived from dict class). \n" + '\n'.join(dataname)
 
 class Matfile(Namelist):
@@ -145,7 +145,7 @@
 
 class IDLData(PyContents):
     def __repr__(self):
-        dataname = ['  ' + x for x in self.keys() if not x.startswith('__')]
+        dataname = ['  ' + x for x in list(self.keys()) if not x.startswith('__')]
         return "IDL (.sav) data (derived from dict class). \n" + '\n'.join(dataname)
 
 class IDLfile(Namelist):
@@ -188,7 +188,7 @@
    def make_contents_branch(self, tree, td, pitem, d, img, 
                             keylist=None):
        if keylist is None: keylist = []
-       for key in d.keys():
+       for key in list(d.keys()):
            tree.SetItemHasChildren(pitem)
            pitem2 = tree.AppendItem(pitem, key, img)
            vv_val =  self.get_varviewer_value(td, keylist+[key])
@@ -210,7 +210,7 @@
        for k in keylist:
           p = p[k]
 
-       var = {x: p[x] for x in p.keys() if not isinstance(p[x], IDLfile)}
+       var = {x: p[x] for x in list(p.keys()) if not isinstance(p[x], IDLfile)}
 
        note = {}
        val = IDLfileVVV(p._var0, note)
@@ -285,8 +285,8 @@
        for key in klist[:-1]:
            p2 = p2[key]
 
-       return (p1.keys().index(t1[1][0][-1])-
-               p2.keys().index(t2[1][0][-1]))
+       return (list(p1.keys()).index(t1[1][0][-1])-
+               list(p2.keys()).index(t2[1][0][-1]))
    def tree_viewer_menu(self):
        if self.hasvar('mds_path'):
            return [("Show in MDSScope (1D)",  self.onScope1D, None),
@@ -393,7 +393,7 @@
    def make_contents_branch(self, tree, td, pitem, d, img, 
                             keylist=None):
        if keylist is None: keylist = []
-       for key in d.keys():
+       for key in list(d.keys()):
            tree.SetItemHasChildren(pitem)
            pitem2 = tree.AppendItem(pitem, key, img)
            vv_val =  self.get_varviewer_value(td, keylist+[key])
@@ -426,7 +426,7 @@
        return pydata[0].get_full_path()+'.get_contents("'+txt+'")'
 
    def get_info(self):
-       print('getting info', self.mds_path)
+       print(('getting info', self.mds_path))
 
    def eval(self, td, **kargs):
        return self.mds_eval(td, **kargs)
@@ -436,7 +436,7 @@
            key : 'value', 'dim0', 'dim1'
        '''
 #       import ifigure.utils.mdsplusr as mds
-       if debug: print('eval', key, self.mds_path)
+       if debug: print(('eval', key, self.mds_path))
  
 #       td = self._td()
        if key == "value":
@@ -471,7 +471,7 @@
        ana = MDSsession()
        job0 = MDSjob('connection_mode', server)
        ana.add_job([job0], 'connection_mode', idx=0)            
-       job1 = MDSjob('open', tree,  long(shot))
+       job1 = MDSjob('open', tree,  int(shot))
        ana.add_job([job1], 'connection')  
        ana.add_job([MDSjob('value', expr)], 'value')
 
@@ -522,8 +522,8 @@
        for key in klist[:-1]:
            p2 = p2[key]
 
-       return (p1.keys().index(t1[1][0][-1])-
-               p2.keys().index(t2[1][0][-1]))
+       return (list(p1.keys()).index(t1[1][0][-1])-
+               list(p2.keys()).index(t2[1][0][-1]))
 
    def tree_viewer_menu(self):
        if self._content()._data_loaded:
@@ -639,7 +639,7 @@
    def make_contents_branch(self, tree, td, pitem, img, 
                             keylist=None):
        if keylist is None: keylist = []
-       for key in self.keys():
+       for key in list(self.keys()):
            tree.SetItemHasChildren(pitem)
            pitem2 = tree.AppendItem(pitem, key, img)
            vv_val =  self[key].get_varviewer_value(td, keylist+[key])
@@ -711,7 +711,7 @@
        if keylist is None:
             keylist = []
        pitem = item
-       for key in base.keys():
+       for key in list(base.keys()):
            tree.SetItemHasChildren(pitem)
            if 'name' in self[key]:
                extra = '('+self[key]['name']+')'
--- python/ifigure/mto/py_module.py	(original)
+++ python/ifigure/mto/py_module.py	(refactored)
@@ -91,7 +91,7 @@
         try:
             return self._obj.run_method(mname, *args, **kargs)
         except Exception:
-            raise(ValueError, "Module Method Call Failed")
+            raise ValueError
 #            logging.exception("Module Method Call Failed")
 
     def call_function(self, fname, *args, **kargs):
@@ -100,7 +100,7 @@
             f = getattr(self._obj._m_co, fname)
             return f(*args, **kargs)
         except Exception:
-            raise(ValueError, "Module Function Call Failed")
+            raise ValueError
 #            logging.exception("Module Method Call Failed")
     
     def load_module(self, file):
@@ -145,7 +145,7 @@
            self._first_load = False
       except:
         logging.exception("Module Method Call Failed")
-        print("PyModule: load_module failed:", file)
+        print(("PyModule: load_module failed:", file))
       return self
 
     def activate(self):
@@ -220,7 +220,7 @@
 #    def onProjTreeActivate(self, e):
 #        self.onEditModule(e)     
     def onEditModule(self, e):
-        print(wx.GetKeyState(wx.WXK_CONTROL))
+        print((wx.GetKeyState(wx.WXK_CONTROL)))
 #        if wx.GetKeyState(wx.WXK_CONTROL):
 #           self._obj.edit_module()
 #           return
@@ -326,7 +326,7 @@
                 os.rename(sfile, nsfile)
                 self.set_path_pathmode(nsfile)
             else:
-                print('can not find', sfile)
+                print(('can not find', sfile))
 
             #### remove old pyc pyo
             if os.path.exists(sfile+'c'):
@@ -376,7 +376,7 @@
             return self.path2fullpath(mn, pn)
         except:
             import traceback
-            print(traceback.format_exc())
+            print((traceback.format_exc()))
             return ''
       
 
--- python/ifigure/mto/py_moduled.py	(original)
+++ python/ifigure/mto/py_moduled.py	(refactored)
@@ -114,7 +114,7 @@
            self._first_load = False
       except:
         logging.exception("Module Method Call Failed")
-        print("PyModule: load_module failed:", file)
+        print(("PyModule: load_module failed:", file))
       return self
 
     def tree_viewer_menu(self):
--- python/ifigure/mto/py_script.py	(original)
+++ python/ifigure/mto/py_script.py	(refactored)
@@ -14,7 +14,7 @@
 #            0.7 8/30/12 keyborad interupt 
 #
 import collections, weakref, os, logging, wx, threading, types, shutil, multiprocessing, sys, traceback
-import cPickle as pickle
+import pickle as pickle
 from  ifigure.mto.py_code import PyCode
 import ifigure.utils.cbook as cbook
 import ifigure, ifigure.events
@@ -65,7 +65,7 @@
     def RunA(self, *args, **kargs):
         self.Run(*args, **kargs)
         if 'ans' in kargs:
-           obj = kargs['ans'].func_defaults[1]
+           obj = kargs['ans'].__defaults__[1]
         else:
            obj = self
         val =  obj._ans
@@ -133,7 +133,7 @@
           self._debug = 0  ### make sure that next time will run in normal mode
           try:
               if debug == 0:
-                  exec self._script_co in lc, lc 
+                  exec(self._script_co, lc, lc) 
               elif debug == 1:
                   import pdb
                   pdb.run(self._script_co, lc, lc )
@@ -143,11 +143,11 @@
           except ExitScript:
               return True
           except ScriptStop as e:
-              print('Script execution stops : ', e.message)
+              print(('Script execution stops : ', e.message))
               return False
           except Exception:
               print('script exectuion failed')
-              print(traceback.format_exc())
+              print((traceback.format_exc()))
               return False
               #logging.exception("Script Execution Failed")
           return True
@@ -166,8 +166,8 @@
             self._script_co = None
             self._script_mtime = -1
 
-            print('Failed to compile script '+file)
-            print(traceback.format_exc())
+            print(('Failed to compile script '+file))
+            print((traceback.format_exc()))
 
 
 
@@ -703,7 +703,7 @@
            obj.add_child(path[-1], script) 
            fpath = os.path.join(script.owndir(), path[-1]+'.py')
            script.set_path_pathmode(fpath)
-           print('creating...', script)
+           print(('creating...', script))
            ifigure.events.SendChangedEvent(script, w=wx.GetApp().TopWindow)
         return script
 
@@ -719,7 +719,7 @@
         sol_list = self._make_list2([], proj.find_by_full_path(base_sol))
         for sol, src_name in sol_list:
             script = self._find_script_in_sol(sol, src_name)
-            print('running...', script.get_full_path())# value
+            print(('running...', script.get_full_path()))# value
             if value[4]:
                 wx.CallAfter(script.do_run_t, None, *(value[2][1]), **(value[3][1]))
             else:
@@ -757,7 +757,7 @@
         src_file = FileHolder.path2fullpath(self)
         for sol, src_name in sol_list:
             script = self._find_script_in_sol(sol, src_name)
-            print('updating...', script)
+            print(('updating...', script))
             dest_file = FileHolder.path2fullpath(script)
             shutil.copyfile(src_file, dest_file)
 
--- python/ifigure/mto/py_solver.py	(original)
+++ python/ifigure/mto/py_solver.py	(refactored)
@@ -15,7 +15,7 @@
 #*******************************************
 
 import os, wx, time, imp, sys, logging, weakref, shutil, threading
-import cPickle as pickle
+import pickle as pickle
 import ifigure
 import ifigure.utils.cbook as cbook
 import ifigure.widgets.dialog as dialog
@@ -58,7 +58,7 @@
     app = solver.get_app()
     try:
        root = solver.get_root_parent()
-       exec root._name + ' = root'
+       exec(root._name + ' = root')
        if len(value[1].split()) != 0:
          a = eval(value[1])
          if isinstance(a, PyModel):
@@ -281,21 +281,21 @@
 
     def init_after_load(self, olist, nlist):
         h2=self.getvar("load_property")
-        if h2.has_key("model"):
+        if "model" in h2:
            oid = h2["model"]
            self._model = self.resolve_olist_nlist_map(oid, olist, nlist)
-        if h2.has_key("sol"):
+        if "sol" in h2:
            oid = h2["sol"]
            self._sol = self.resolve_olist_nlist_map(oid, olist, nlist)
-        if h2.has_key("param"):
+        if "param" in h2:
            oid = h2["param"]
            self._param = self.resolve_olist_nlist_map(oid, olist, nlist)
 
-        if h2.has_key("model_path"):
+        if "model_path" in h2:
            self._model = self.resolve_td_path(h2["model_path"])
-        if h2.has_key("sol_path"):
+        if "sol_path" in h2:
            self._sol = self.resolve_td_path(h2["sol_path"])
-        if h2.has_key("param_path"):
+        if "param_path" in h2:
            self._param =  self.resolve_td_path(h2["param_path"])
 
         self.delvar("load_property")
@@ -629,7 +629,7 @@
         return check
 
     def print_cases(self):
-        print(self._pvalue)
+        print((self._pvalue))
 
     def onRun(self, evt):
         if not self.is_valid_setting(): return
--- python/ifigure/mto/threaded_worker.py	(original)
+++ python/ifigure/mto/threaded_worker.py	(refactored)
@@ -4,7 +4,7 @@
 #      in model execution.
 #
 
-import time, ifigure, wx, Queue, threading
+import time, ifigure, wx, queue, threading
 from ifigure.utils.event_driven_thread2 import get_thread, send_event
 def c_thread():
     import threading
@@ -43,7 +43,7 @@
         '''
         self._initialize_waitlist()
 
-        if wait is not None: return_queue = Queue.Queue()   
+        if wait is not None: return_queue = queue.Queue()   
         t, queue = get_thread(return_queue)
         t._verbose = self._run_verbose
         trigger = t.bind_init(self, self._doJob1)
@@ -129,7 +129,7 @@
 
         name = self.get_full_path()
         if self._run_verbose:
-            print('performing ' + name + '.job1 in ' + c_thread().name)
+            print(('performing ' + name + '.job1 in ' + c_thread().name))
         self._status = 'running...'
         app = wx.GetApp().TopWindow
 #        print 'in do job1', self, threading.current_thread().name
@@ -151,7 +151,7 @@
 
         name = self.get_full_path()
         if self._run_verbose:
-            print('performing ' + name + '.job2 in ' + c_thread().name)
+            print(('performing ' + name + '.job2 in ' + c_thread().name))
 
         send_event(name + '.job2_done')
 
--- python/ifigure/mto/treedict.py	(original)
+++ python/ifigure/mto/treedict.py	(refactored)
@@ -21,7 +21,7 @@
 import collections, weakref, threading, traceback
 import ifigure.utils.cbook as cbook
 import sys, os, shutil, tarfile, time, wx
-import cPickle as pickle
+import pickle as pickle
 import ifigure
 from ifigure.utils.debug import dprint
 import ifigure.ifigure_config as ifigure_config
@@ -38,10 +38,10 @@
 def fill_td_name_space(filename):
     try:
         file, co, mtime = cbook.LoadScriptFile(filename) 
-        exec co in {}, td_name_space
+        exec(co, {}, td_name_space)
     except:
         print('Failed to build script name space')
-        print(traceback.format_exc())
+        print((traceback.format_exc()))
 
 def working_dir_exists_message1(path): 
     m = 'Working directory already exists. Do you want to delete it to continue?\nwdir = ' + str(path)
@@ -66,10 +66,9 @@
     def __init__(cls, name, base, d):
         cls._image_load_done=False
         type.__init__(cls, name, base, d)
-class TreeDict(object):
+class TreeDict(object, metaclass=BaseAttr):
     ### index number of object commonly used 
     ### among all classes derived from TreeDict
-    __metaclass__ = BaseAttr
     _debug=0
     _id_base = 0
     _save_var = True
@@ -228,7 +227,7 @@
            self._parent._del_child(self)
 
        #### clean var
-       for key in self._var.keys(): self._var[key]=None
+       for key in list(self._var.keys()): self._var[key]=None
 
 
     def __getattr__(self, attr):
@@ -245,7 +244,7 @@
        raise AttributeError('Tree name should not start from "_"')
 
     def __setattr__(self, attr, val):
-       if not self.__dict__.has_key('_TreeDict__initialised'):  
+       if '_TreeDict__initialised' not in self.__dict__:  
   #         this test allows attributes to be set in the __init__ method
            return object.__setattr__(self, attr, val)     
        elif attr.startswith("_"):
@@ -292,7 +291,7 @@
 
     def _process_kywd(self, kywds, key, defv):
 #        print 'in', kywds
-        if kywds.has_key(key): 
+        if key in kywds: 
             self.setvar(key, kywds[key])
             del kywds[key]
         else: self.setvar(key, defv)
@@ -301,7 +300,7 @@
 
     def _process_kywd2(self, kywds, key, defv):
 #        print 'in', kywds
-        if kywds.has_key(key): 
+        if key in kywds: 
             val = kywds[key]
             del kywds[key]
         else: 
@@ -314,7 +313,7 @@
           # easy to read string representation of data
           # print "generating string"
           rl = []
-          for k,v in self._getLeaves().items():
+          for k,v in list(self._getLeaves().items()):
               rl.append("%s = %s" %  (k, v.__repr__()))
   #        return "\n".join(rl)
           return rl
@@ -530,7 +529,7 @@
            conflict = False
            flag, bname1, do_rename = name_check(bname, warning)
            if not flag:
-               print('can not add '+name)
+               print(('can not add '+name))
                return
            while hasattr(self, bname1): 
                conflict = True
@@ -602,7 +601,7 @@
         for name in a[1:]:
             p = p.get_child(name=name)
             if p is None:
-               print('can not find', name)
+               print(('can not find', name))
                return None
         return p
 
@@ -754,10 +753,10 @@
    #   Variable/Note Setter and Getter
    #
     def get_varlist(self):
-       return self._var.keys()
+       return list(self._var.keys())
 
     def hasvar(self, name):
-       return self._var.has_key(name)
+       return name in self._var
 
     def setvar(self, *args):
 #       print self, args
@@ -779,7 +778,7 @@
        eval("x", "y", "z") = evaluate "x", "y", "z"
        eval() = return self._var0
        '''
-       if kargs.has_key('np'): np = kargs['np']
+       if 'np' in kargs: np = kargs['np']
        else: np = False
        if len(args) == 1: 
            return self._eval(args[0], use_np=np)
@@ -903,7 +902,7 @@
               else: return value
           return value
        except Exception:
-          print(sys.exc_info())
+          print((sys.exc_info()))
 #          pass
        return None
 
@@ -920,7 +919,7 @@
     def getvar_copy(self):
         var = self.getvar()
         d = collections.OrderedDict()
-        for key in var.keys():
+        for key in list(var.keys()):
            d[key] = var[key]
         return d
     
@@ -928,7 +927,7 @@
        """
        compare vars stored in two tree dicts
        """
-       print("comparing", self.get_full_path(), td.get_full_path())
+       print(("comparing", self.get_full_path(), td.get_full_path()))
        diff = cbook.DictDiffer(self.getvar(), td.getvar())
 
     def setnote(self, *args):
@@ -939,7 +938,7 @@
           try:
             a = self._var[args[0]]
           except KeyError:
-            print("!!!", self.get_full_path(), " does not have ", name)
+            print(("!!!", self.get_full_path(), " does not have ", name))
             return 
           self._note[args[0]]=args[1]
        if len(args)==1:
@@ -1130,7 +1129,7 @@
        if (self.hasvar('subtree_path') and
            os.path.exists(self.getvar('subtree_path'))):
            path = self.getvar('subtree_path')
-           print('exporting subtree to '+path)
+           print(('exporting subtree to '+path))
            self.save_subtree(path)
        else:
            self.onSaveSubTreeAs(e)
@@ -1142,7 +1141,7 @@
         if path == '': return
         if path[-4:] != '.pfs':
               path=path+'.pfs'
-        print('exporting subtree to '+path)
+        print(('exporting subtree to '+path))
         self.save_subtree(path)
         self.setvar('subtree_path', path)
 
@@ -1152,7 +1151,7 @@
 
         if path == '': return
         path = os.path.join(path, self._name)
-        print('exporting files to '+path)
+        print(('exporting files to '+path))
         import shutil
         shutil.copytree(self.owndir(), path)
 
@@ -1239,7 +1238,7 @@
         if self._name == new: return True
         if self.get_parent() is None: return False
         if hasattr(self.get_parent(), new):
-           print(self.get_parent().get_full_path() +' already has attr '+ new)
+           print((self.get_parent().get_full_path() +' already has attr '+ new))
            return False
         if self._name != self._genuine_name:
            dprint1('Cannot rename since object has different screen name')
@@ -1264,7 +1263,7 @@
         if (self.has_owndir() and  #self._can_have_child
             self._has_private_owndir):
            print(' name seems to be used in the past')
-           print(' delete ' + self.has_owndir() + ' manually')
+           print((' delete ' + self.has_owndir() + ' manually'))
            self._name = old
            return False
         if (rename_owndir and
@@ -1319,7 +1318,7 @@
             try:
                 __func__(path)
             except OSError:
-                print('Remove error', path)
+                print(('Remove error', path))
         def removeall(path):
             if not os.path.isdir(path):
                return
@@ -1374,7 +1373,7 @@
         import subprocess as sp
         if not self.has_owndir(): self.mk_owndir()
         d = os.getcwd()
-        print(sp.Popen(command, stdout=sp.PIPE, shell=True).stdout.read())
+        print((sp.Popen(command, stdout=sp.PIPE, shell=True).stdout.read()))
         os.chdir(d)
     #
     #  write2shell : write variable to shell
@@ -1455,7 +1454,7 @@
                  '_genuine_name': self._genuine_name,  }
         data['TreeDict'] = (1, param)
         if not self.check_ownitem_exists():
-            print("incomplete own items" + str(self))
+            print(("incomplete own items" + str(self)))
         return data
 
     def load(self, fid, olist=None, nlist=None, 
@@ -1494,7 +1493,7 @@
            if "var" in h2:
                for key in h2["var"]: obj._var[key]=h2["var"][key]
            obj._note=h2["note"]
-           if h2.has_key('format'):
+           if 'format' in h2:
               dprint2('Fileformat ', h2["format"])
               if h2["format"] == 1:
                   obj.load_data(fid)
@@ -1554,7 +1553,7 @@
             for item in obj.ownitem():
                 fpath = os.path.join(obj.owndir(), item)
                 if not os.path.exists(fpath): 
-                     print("not found :" + fpath)
+                     print(("not found :" + fpath))
     def check_ownitem_exists(self):
         for item in self.ownitem():
             fpath = os.path.join(self.owndir(), item)
@@ -1580,7 +1579,7 @@
         obj, ol, nl=TreeDict().load(fid)
         name=obj.get_next_name(obj.get_namebase())
         if obj.name != name:
-           print("renaming object name", obj.name, "->", name)
+           print(("renaming object name", obj.name, "->", name))
         self.add_child(name, obj)
         return obj, ol, nl
 
@@ -1646,8 +1645,8 @@
              fid = open(fpath, 'wb')
              self.save2(fid)
              fid.close()
-         except IOError, error:
-             print(traceback.format_exc())
+         except IOError as error:
+             print((traceback.format_exc()))
              return False
          if not maketar: return True, tmpdir
 
@@ -1972,7 +1971,7 @@
             #  to files.
             self.save(fid)
             fid.close()
-         except IOError, error:
+         except IOError as error:
             return False
 
          ### set proj.filename
@@ -2076,7 +2075,7 @@
          print("initializing model...")
          for obj in real_top.walk_tree(stop_at_ext = True):
              obj.init_after_load(olist, nlist)
-         print("done....(init) "+ str(real_top))
+         print(("done....(init) "+ str(real_top)))
       
          return real_top
 
@@ -2162,17 +2161,17 @@
     root.test.add_child("test3", TreeDict()) 
     
 
-    print("root", root)
-    print("root.test", root.test)
-    print("root.test.test3", root.test.test3)
-    print("root.test2", root.test2)
+    print(("root", root))
+    print(("root.test", root.test))
+    print(("root.test.test3", root.test.test3))
+    print(("root.test2", root.test2))
 
     gen=root.walk_tree()
-    print(gen.next().get_full_path())
-    print(gen.next().get_full_path())
-    print(gen.next().get_full_path())
-    print(gen.next().get_full_path())
-    print(gen.next().get_full_path())
+    print((gen.next().get_full_path()))
+    print((gen.next().get_full_path()))
+    print((gen.next().get_full_path()))
+    print((gen.next().get_full_path()))
+    print((gen.next().get_full_path()))
 
 
 
@@ -2200,7 +2199,7 @@
 
      #  attribute setting
      page.setp('area', [0,1,0,1])
-     print(page.getp("area"))
+     print((page.getp("area")))
 
      # if you do  getp_all, pay attention that
      # the returned value is the SAME object 
@@ -2211,16 +2210,16 @@
      print(a)
 
      ### this generate tree list ###
-     print(page.list_all())
+     print((page.list_all()))
 
      ### can access read-only member
      ### if getter is properly set
-     print(page.axes1.plot.id)
+     print((page.axes1.plot.id))
 
      #   page.axes1.plot.id=100  
      #   this will cause error (read-only)
 
-     print(page.axes1.plot)
+     print((page.axes1.plot))
 
      ### this is not allowed
      #  in other word, all members are read-only
--- python/ifigure/mto/treelink.py	(original)
+++ python/ifigure/mto/treelink.py	(refactored)
@@ -104,4 +104,4 @@
      page.add_child("link", link)
      axes.add_child("plot", plot)
 
-     print(page.list_all())
+     print((page.list_all()))
--- python/ifigure/rpo/client_efit.py	(original)
+++ python/ifigure/rpo/client_efit.py	(refactored)
@@ -11,4 +11,4 @@
 nameserver=Pyro4.locateNS(host=nshost)
 uri=nameserver.lookup("proxy_efit")
 proxy=Pyro4.Proxy(uri)
-print(proxy.run_minus_5(shot='1120710012', time='1000'))
+print((proxy.run_minus_5(shot='1120710012', time='1000')))
--- python/ifigure/rpo/client_nepolar.py	(original)
+++ python/ifigure/rpo/client_nepolar.py	(refactored)
@@ -11,4 +11,4 @@
 nameserver=Pyro4.locateNS(host=nshost)
 uri=nameserver.lookup("proxy_nepolar")
 proxy=Pyro4.Proxy(uri)
-print(proxy.run_idl(shot=1120612006))
+print((proxy.run_idl(shot=1120612006)))
--- python/ifigure/rpo/client_nete.py	(original)
+++ python/ifigure/rpo/client_nete.py	(refactored)
@@ -11,4 +11,4 @@
 nameserver=Pyro4.locateNS(host=nshost)
 uri=nameserver.lookup("proxy_nete")
 proxy=Pyro4.Proxy(uri)
-print(proxy.run_idl(shot=1120710012, time=1.))
+print((proxy.run_idl(shot=1120710012, time=1.)))
--- python/ifigure/rpo/proxy_efit.py	(original)
+++ python/ifigure/rpo/proxy_efit.py	(refactored)
@@ -4,9 +4,9 @@
     def filename(self, shot, time, prefix='k'):
         # time in [s]
         a = '0'*5
-        b=str(long(time*1000))
+        b=str(int(time*1000))
         c=a[:-len(b)]+b
-        return '.'.join([prefix+str(long(shot)), c])
+        return '.'.join([prefix+str(int(shot)), c])
 
     def run_minus_5(self, shot=1120710020, 
                     time=1, 
@@ -17,12 +17,12 @@
         p.stdin.write('-5\n')
         p.stdin.write('0\n')
         p.stdin.write('0\n')
-        p.stdin.write(str(shot)+', '+str(long(time*1000))+', ' +
-                      str(long(time*1000))+', ' + '1\n')
+        p.stdin.write(str(shot)+', '+str(int(time*1000))+', ' +
+                      str(int(time*1000))+', ' + '1\n')
 
         p.stdin.write(tree+'\n')
         p.stdin.write("\\" + tree + "::\n")     
-        print(p.wait())
+        print((p.wait()))
 
         path = self.filename(shot, time)
         content = ''
--- python/ifigure/rpo/proxy_nepolar.py	(original)
+++ python/ifigure/rpo/proxy_nepolar.py	(refactored)
@@ -3,12 +3,12 @@
 import os, Pyro4
 class ProxyNepolar(object):
     def fill_array(self, i, txt):
-        ndim = long(txt[i])
+        ndim = int(txt[i])
         i = i+1 
         dim = [0]*ndim
         nel = 1
         for j in range(ndim):
-           dim[j] = long(txt[i])
+           dim[j] = int(txt[i])
            nel = nel*dim[j]
            i = i+1
         arr = np.zeros(nel)
--- python/ifigure/rpo/proxy_nete.py	(original)
+++ python/ifigure/rpo/proxy_nete.py	(refactored)
@@ -3,8 +3,8 @@
 class ProxyNeTe(object):
     def fill_array(self, i, txt):
         ct = []
-        print(i,txt[i])
-        for t in range(1+i, long(txt[i])+1+i):
+        print((i,txt[i]))
+        for t in range(1+i, int(txt[i])+1+i):
            ct.append(txt[t])
         return t+1, ct
 
--- python/ifigure/rpo/pyro_ssh.py	(original)
+++ python/ifigure/rpo/pyro_ssh.py	(refactored)
@@ -68,7 +68,7 @@
 #           logging.exception("nslookup failed")
 #           p.terminate()
 #           return None
-        print('killing process', p.pid)
+        print(('killing process', p.pid))
         p.terminate()
         p.kill()
         return uri
@@ -94,7 +94,7 @@
            p = self.process[idx]
            self.process.remove(p)
            self.proxy.remove(proxy)
-           print('terminating process', p.pid)
+           print(('terminating process', p.pid))
            p.terminate()
            p.kill()
 
@@ -103,10 +103,10 @@
     c = PyroSSH()
     uri=c.nslookup('cmodws30.psfc.mit.edu', 'proxy_efit')
     print(uri)
-    print(uri.object)
+    print((uri.object))
 
     proxy=c.open_proxy(uri)
-    print(proxy.filename(shot=1120809022, time=1.0, prefix='k'))
-    print(proxy.run_minus_5(shot=1120809022, time=1.0))
+    print((proxy.filename(shot=1120809022, time=1.0, prefix='k')))
+    print((proxy.run_minus_5(shot=1120809022, time=1.0)))
     c.close_proxy(proxy)
 
--- python/ifigure/test/gldemo.py	(original)
+++ python/ifigure/test/gldemo.py	(refactored)
@@ -31,7 +31,7 @@
 
         box = wx.BoxSizer(wx.VERTICAL)
         box.Add((20, 30))
-        keys = buttonDefs.keys()
+        keys = list(buttonDefs.keys())
         keys.sort()
         for k in keys:
             text = buttonDefs[k][1]
--- python/ifigure/test/run_test.py	(original)
+++ python/ifigure/test/run_test.py	(refactored)
@@ -6,28 +6,28 @@
 import traceback
 
 def check_prop_read(obj):
-   print('read property test :' + str(obj))
+   print(('read property test :' + str(obj)))
    props = property(obj)
    ret = {}
    for prop in props:
        try:
            val = property(obj, prop)
-           print(str(prop)+ ' : ' + str(val))
+           print((str(prop)+ ' : ' + str(val)))
        except:
-           print('reading '+str(prop) + ' failed')
+           print(('reading '+str(prop) + ' failed'))
            traceback.print_exc()
            return ret
        ret[prop] = val
    return ret
 
 def check_prop_write(obj, data):
-    print('write property test :' + str(obj))
-    for prop in data.keys():
+    print(('write property test :' + str(obj)))
+    for prop in list(data.keys()):
        try:
-           print(str(prop)+ ' : ' + str(data[prop]))           
+           print((str(prop)+ ' : ' + str(data[prop])))           
            property(obj, prop, data[prop])
        except:
-           print('writinging '+str(key) + ' failed')
+           print(('writinging '+str(key) + ' failed'))
 
            
 def test_ax():       
--- python/ifigure/utils/args_parser.py	(original)
+++ python/ifigure/utils/args_parser.py	(refactored)
@@ -63,7 +63,7 @@
     return v
 
 def convert_ndarray(v, name):
-    if not v.has_key(name): return v
+    if name not in v: return v
     if v[name] is None: return v
     if isdynamic(v[name]): return v
     if isiterable(v[name]) and not isndarray(v[name]):
@@ -81,7 +81,7 @@
     return v
 
 def apply_squeeze(v, name, minimum_1D=False):
-    if not v.has_key(name): return v
+    if name not in v: return v
     if isdynamic(v[name]): return v
     try:
         if (v[name] is not None and not minimum_1D):
@@ -132,23 +132,23 @@
     def check_pairs(self, value):
         flag = True
         for name1, name2 in self.pairs:
-            if (not value.has_key(name1) and 
-                value.has_key(name2)): flag = False
-            if (value.has_key(name1) and 
-                not value.has_key(name2)): flag = False
+            if (name1 not in value and 
+                name2 in value): flag = False
+            if (name1 in value and 
+                name2 not in value): flag = False
         return flag
     def check_exclusives(self, value):
         flag = True
         for name1, name2 in self.exclusives:
-            if (value.has_key(name1) and 
-                value.has_key(name2)): flag = False
-            if (value.has_key(name1) and 
-                value.has_key(name2)): flag = False
+            if (name1 in value and 
+                name2 in value): flag = False
+            if (name1 in value and 
+                name2 in value): flag = False
         return flag
     def has_exclusives(self, name, value):
         for name1, name2 in self.exclusives:
-            if name1==name: return value.has_key(name2)
-            if name2==name: return value.has_key(name1)
+            if name1==name: return name2 in value
+            if name2==name: return name1 in value
         return False
 
     def check(self, value, incond):
@@ -167,9 +167,9 @@
            elif cond == 'sequence':
                return issequence(value)
            elif cond == 'str':
-               return isinstance(value, str) or isinstance(value, unicode)
+               return isinstance(value, str) or isinstance(value, str)
            elif cond == 'nonstr':
-               return not (isinstance(value, str) or isinstance(value, unicode))
+               return not (isinstance(value, str) or isinstance(value, str))
            elif cond == 'int':
                return isinstance(value, int)
            elif cond == 'float':
@@ -195,7 +195,7 @@
                  return False
            elif cond == 'any':
                return True
-           print('ArgsParser::Unknown condition (ignored)', cond)
+           print(('ArgsParser::Unknown condition (ignored)', cond))
            return True
 
         def do_check2(value, conds):
@@ -253,14 +253,14 @@
         ### pair is not set
         defv_names = []
         for v in self.vars:
-            if (len(v) == 3  and not value.has_key(v[0]) and
+            if (len(v) == 3  and v[0] not in value and
                 not self.has_exclusives(v[0], value)):
                 value[v[0]]=v[1]
                 defv_names.append(v[0])
 
         ### handle keyword values
         for key, v, t in self.key:
-           if kywds.has_key(key):
+           if key in kywds:
 #               value.append((key, kywds[key]))
                val = kywds[key]
                if t is not None:
@@ -296,7 +296,7 @@
       p.add_key('w', 'default keyword') ### keyword argment
 
       v, kywds, defv_names,  flag = p.process(*args, **kywds)
-      print(v, kywds, defv_names, flag)
+      print((v, kywds, defv_names, flag))
 
    def hogehoge2(*args, **kywds):
       '''
@@ -315,7 +315,7 @@
 #      p.set_squeeze('x', 'y')
 
       v, kywds,d, flag = p.process(*args, **kywds)
-      print(v, kywds, d,flag)
+      print((v, kywds, d,flag))
 
    def hogehoge3(*args, **kywds):
       '''
@@ -338,7 +338,7 @@
       p.set_exclusive('n', 'v')
 
       v, kywds, d, flag = p.process(*args, **kywds)
-      print(v, kywds, d, flag)
+      print((v, kywds, d, flag))
 
    print("hogehoge1(x, y(option), w='default keyword)")
    print('case 1')
--- python/ifigure/utils/arraykey_dict.py	(original)
+++ python/ifigure/utils/arraykey_dict.py	(refactored)
@@ -1,8 +1,8 @@
 def find_all_keys(d, key):
-    return [x for x in d.keys() if x.startswith(key+'(')]
+    return [x for x in list(d.keys()) if x.startswith(key+'(')]
 
 def find_idx(keys):
-    return [long((x.split('(')[1]).strip()[:-1]) for x in keys]
+    return [int((x.split('(')[1]).strip()[:-1]) for x in keys]
 
 def key_exists(d, key):
     return key in d or len(find_all_keys(d, key)) > 0
--- python/ifigure/utils/buildxobj.py	(original)
+++ python/ifigure/utils/buildxobj.py	(refactored)
@@ -63,7 +63,7 @@
                 setattr(self, key, [float(x) for x in value])
             else:
                 log.error('Unknown option: %s', key)
-        for key, value in kw.iteritems():
+        for key, value in kw.items():
             assert hasattr(self, key), key
             setattr(self, key, value)
 
@@ -192,7 +192,7 @@
     # All the filters must have been executed
     assert int(contents.Length) == len(contents.stream)
     if not allow_compressed:
-        assert len([x for x in contents.iteritems()]) == 1
+        assert len([x for x in contents.items()]) == 1
     return _cache_xobj(contents, resources, mbox, bbox, rotation)
 
 
--- python/ifigure/utils/cbook.py	(original)
+++ python/ifigure/utils/cbook.py	(refactored)
@@ -18,7 +18,7 @@
 
 def is_safename(txt):
     try:
-       exec txt + '= 3' in {}, {}
+       exec(txt + '= 3', {}, {})
     except:
        return False
     return True
@@ -34,15 +34,15 @@
         else:
            text = val.__repr__()
     elif isinstance(val, dict):
-        if len(val.keys()) > 5:
-           text = ({key:val[key] for key in val.keys()[0:5]}.__repr__())[:-1]+'...'
+        if len(list(val.keys())) > 5:
+           text = ({key:val[key] for key in list(val.keys())[0:5]}.__repr__())[:-1]+'...'
         else:
            text = val.__repr__()
     elif isinstance(val, np.ndarray):
         text = '**data**'
     elif hasattr(val, '__len__'):
        try:
-          if (len(val) >10 and not isinstance(val, str) and not isinstance(val, unicode)): 
+          if (len(val) >10 and not isinstance(val, str) and not isinstance(val, str)): 
               text = '**data**'
           else:
               text = val.__repr__()
@@ -118,7 +118,7 @@
     #import Image
     """ Method will convert PIL Image to wx.Image """
     if alpha:
-        image = apply(wxEmptyImage, pil.size )
+        image = wxEmptyImage(*pil.size)
         image.SetData( pil.convert( "RGB").tostring() )
         image.SetAlphaData(pil.convert("RGBA").tostring()[3::4])
     else:
@@ -149,7 +149,7 @@
             data = str(data)
     pil = Image.frombytes('RGB', (image.GetWidth(), image.GetHeight()),
                           data)
-    print pil
+    print(pil)
     return pil
 
 
@@ -249,7 +249,7 @@
      idx=ImageFiles._list.Add(bm)
      idx2=ImageFiles._list.Add(bm3)
      if self.IsOk(idx) is False:
-        print("can not read "+fpath)
+        print(("can not read "+fpath))
         idx = -1
         idx2 = -1
      return idx, idx2
@@ -274,12 +274,12 @@
 
 def Write2Main(val, name):
      import __main__
-     print("writing variable "+name+" to __main__")
-     exec '__main__.'+name+'=val'
+     print(("writing variable "+name+" to __main__"))
+     exec('__main__.'+name+'=val')
 
 def ReadFromMain(name):
      import __main__
-     print("writing variable "+name+" from __main__")
+     print(("writing variable "+name+" from __main__"))
      return eval('__main__.'+name)
 
 def FindFrame(w):
@@ -293,12 +293,12 @@
        if key.startswith(header+'_'):
           a=key[len(header)+1:]
           if a.isdigit():
-             num.append(long(a))
+             num.append(int(a))
           continue
        if key.startswith(header):
           a=key[len(header):]
           if a.isdigit():
-             num.append(long(a))
+             num.append(int(a))
           continue
     if len(num)==0:
        return header+'1'
@@ -316,7 +316,7 @@
 
 def ClassNameToFile(s):
    pos = [i for i,e in enumerate(s+'A') if e.isupper()]
-   parts = [s[pos[j]:pos[j+1]] for j in xrange(len(pos)-1)]
+   parts = [s[pos[j]:pos[j+1]] for j in range(len(pos)-1)]
    return '_'.join(parts).lower()
 
 def FileNameToClass(path):
@@ -647,7 +647,7 @@
     i = 0
     for seg in segpath:
        p = [(item[0], item[1]) for item in seg]
-       codes, verts = zip(*p)
+       codes, verts = list(zip(*p))
        obj = matplotlib.path.Path(verts, codes)
        a = PathPatch(obj)
        xy= a.get_verts()
@@ -760,7 +760,7 @@
    num = 1
    if x0.find('*') != -1:
       x = x0.split('*')[1]
-      num = long(x0.split('*')[0])
+      num = int(x0.split('*')[0])
    else:
       x = x0
 
@@ -814,7 +814,7 @@
     return True
 
 def isstringlike(x):
-    return  (isinstance(x, str) or isinstance(x, unicode))
+    return  (isinstance(x, str) or isinstance(x, str))
 
 def nd_iter(x):
     if x.size: return x
@@ -842,7 +842,7 @@
 def GetModuleDir(mname):
     import sys
     namelist=mname.split('.')
-    if sys.modules.has_key(namelist[0]) is False:
+    if (namelist[0] in sys.modules) is False:
        try:
           top= __import__(namelist[0], globals(), locals(), [], -1)
        except Exception:
@@ -868,7 +868,7 @@
     try:
        code=compile(txt, file, 'exec')
     except:
-       print(traceback.format_exc())
+       print((traceback.format_exc()))
        raise
     return txt, code, mtime
 
@@ -898,7 +898,7 @@
     os.system(txt)
 
 def ProcessKeywords(kywds, name, value=None):
-    if kywds.has_key(name):
+    if name in kywds:
          value = kywds[name]
          del kywds[name]
     return value, kywds
@@ -951,7 +951,7 @@
         '<': r'\textless',
         '>': r'\textgreater',
     }
-    regex = re.compile('|'.join(re.escape(unicode(key)) for key in sorted(conv.keys(), key = lambda item: - len(item))))
+    regex = re.compile('|'.join(re.escape(str(key)) for key in sorted(list(conv.keys()), key = lambda item: - len(item))))
     return regex.sub(lambda match: conv[match.group()], text)
 
 def escape_split(s, delim):
@@ -998,7 +998,7 @@
     walk OrdereDictionary tree
     '''
     import collections
-    for key in od.keys():
+    for key in list(od.keys()):
         if isinstance(od[key], collections.OrderedDict):
            if basekey == '':
                basekey2 = key
@@ -1037,19 +1037,19 @@
         self.show_detail()
 
     def show_detail(self):
-       print("Added:", self.added())
+       print(("Added:", self.added()))
        for item in  self.added():
-          print(item, ':', self.current_dict[item])
-
-       print("Removed:", self.removed())
+          print((item, ':', self.current_dict[item]))
+
+       print(("Removed:", self.removed()))
        for item in  self.removed():
-           print(item, ':', self.past_dict[item])
-
-       print("Changed:", self.changed())
+           print((item, ':', self.past_dict[item]))
+
+       print(("Changed:", self.changed()))
        for item in  self.changed():
-           print(item, ':', self.current_dict[item], self.past_dict[item])
-
-       print("Unchanged:", self.unchanged())
+           print((item, ':', self.current_dict[item], self.past_dict[item]))
+
+       print(("Unchanged:", self.unchanged()))
 
 
     def added(self):
--- python/ifigure/utils/daemon.py	(original)
+++ python/ifigure/utils/daemon.py	(refactored)
@@ -24,7 +24,7 @@
                         if pid > 0:
                                 # exit first parent
                                 sys.exit(0)
-                except OSError, e:
+                except OSError as e:
                         sys.stderr.write("fork #1 failed: %d (%s)\n" % (e.errno, e.strerror))
                         sys.exit(1)
        
@@ -38,7 +38,7 @@
                         if pid > 0:
                                 # exit from second parent
                                 sys.exit(0)
-                except OSError, e:
+                except OSError as e:
                         sys.stderr.write("fork #2 failed: %d (%s)\n" % (e.errno, e.strerror))
                         sys.exit(1)
 
@@ -56,7 +56,7 @@
                 atexit.register(self.delpid)
                 pid = str(os.getpid())
                 file(self.pidfile,'w+').write("%s\n" % pid)
-                print(pid, self.pidfile)
+                print((pid, self.pidfile))
         def delpid(self):
                 print('Removing pid file')
                 os.remove(self.pidfile)
@@ -105,13 +105,13 @@
                         while 1:
                                 os.kill(pid, SIGTERM)
                                 time.sleep(0.1)
-                except OSError, err:
+                except OSError as err:
                         err = str(err)
                         if err.find("No such process") > 0:
                                 if os.path.exists(self.pidfile):
                                         os.remove(self.pidfile)
                         else:
-                                print(str(err))
+                                print((str(err)))
                                 sys.exit(1)
  
         def restart(self):
--- python/ifigure/utils/debug.py	(original)
+++ python/ifigure/utils/debug.py	(refactored)
@@ -41,7 +41,7 @@
        import sys
        ostdout = sys.stdout
        sys.stdout = debug_stdout
-       print('DEBUG('+str(debug_mode)+')::'+s)
+       print(('DEBUG('+str(debug_mode)+')::'+s))
        sys.stdout = ostdout
 
 def find_by_id(_id_):
@@ -67,7 +67,7 @@
             import sys
             ostdout = sys.stdout
             sys.stdout = debug_stdout
-            print('DEBUG('+str(self.name)+')::'+s)
+            print(('DEBUG('+str(self.name)+')::'+s))
             sys.stdout = ostdout
 
 def prints(n):
--- python/ifigure/utils/edit_list.py	(original)
+++ python/ifigure/utils/edit_list.py	(refactored)
@@ -151,7 +151,7 @@
             
 class LabelPanel(Panel):
     def __init__(self, *args, **kargs):
-        if kargs.has_key("setting"):
+        if "setting" in kargs:
            setting = kargs["setting"] 
            del  kargs["setting"] 
         super(LabelPanel, self).__init__(*args,**kargs)
@@ -213,7 +213,7 @@
                        "18", "20", "24", "36", "48"]}
 class AxisPositionPanel(Panel):
     def __init__(self, *args, **kargs):
-        if kargs.has_key("setting"):
+        if "setting" in kargs:
            setting = kargs["setting"] 
            del  kargs["setting"] 
         super(AxisPositionPanel, self).__init__(*args,**kargs)
@@ -296,7 +296,7 @@
         
 class LogLinScale(Panel):
     def __init__(self, *args, **kargs):
-        if kargs.has_key("setting"):
+        if "setting" in kargs:
            setting = kargs["setting"] 
            del  kargs["setting"] 
         super(LogLinScale, self).__init__(*args,**kargs)
@@ -389,7 +389,7 @@
 
 class AxisRange(wx.Panel):
     def __init__(self, *args, **kargs):
-        if kargs.has_key("setting"):
+        if "setting" in kargs:
            setting = kargs["setting"] 
            del  kargs["setting"] 
         super(AxisRange, self).__init__(*args,**kargs)
@@ -492,7 +492,7 @@
             import numpy as np
             if a != 0:
                si = a/abs(a)
-               ex = long(np.log10(abs(a)))
+               ex = int(np.log10(abs(a)))
                ai = (np.floor(a/(10.**ex)))*10.**ex
 #               if (a/(10.**ex) % 1)== 0. or a < 0:
 
@@ -501,7 +501,7 @@
             else: ai = 0.
             if b != 0:
                si = b/abs(b)
-               ex = long(np.log10(abs(b)))
+               ex = int(np.log10(abs(b)))
                if (b/(10.**ex) % 1) == 0.:
                   bi = (np.floor(b/(10.**ex)))*10.**ex
                else:
@@ -587,7 +587,7 @@
 
         import math
 
-        self.gsizer.SetRows(long(math.ceil(len(names)/5.)))
+        self.gsizer.SetRows(int(math.ceil(len(names)/5.)))
         for name, label, fname in zip(names, labels, filenames):
 
             if label  is not None:
@@ -601,7 +601,7 @@
                if not os.path.exists(imageFile):
                    imageFile =os.path.join(icondir, 'image', 
                                     'color_'+b64encode('other')+'.png')
-                   print('Cannot find bitmap for ' + ftitle + '=' + fname)
+                   print(('Cannot find bitmap for ' + ftitle + '=' + fname))
                bitmap=wx.Bitmap(imageFile)
                h, w = bitmap.GetSize()
 
@@ -678,7 +678,7 @@
 
 class Color(BitmapButtons):
     def _a2n(self, value):
-        value = [long(v*255) for v in value]
+        value = [int(v*255) for v in value]
         return value[3]*256*256*256 + value[2]*256*256 + value[1]*256 + value[0]
         #return 1*256*256*256 + value[2]*256*256 + value[1]*256 + value[0]
     def _n2a(self, value):
@@ -736,7 +736,7 @@
             val = [0,0,0,0]
         elif isinstance(val, str): 
             val = CC().to_rgba(val)
-        elif isinstance(val, unicode): 
+        elif isinstance(val, str): 
             val = CC().to_rgba(val)
         else:
            if not isinstance(val, str) and len(val) == 3: 
@@ -866,7 +866,7 @@
         else:
             if isinstance(value, str):
                 bitmap = colorbutton_bitmap(CC().to_rgba(value))
-            elif isinstance(value, unicode):
+            elif isinstance(value, str):
                 bitmap = colorbutton_bitmap(CC().to_rgba(value))               
             else:
                 bitmap = colorbutton_bitmap(value)
@@ -1220,7 +1220,7 @@
 
 class ColorMap(wx.Panel):
     def __init__(self, *args, **kargs):
-        if kargs.has_key("setting"):
+        if "setting" in kargs:
 #           setting = kargs["setting"] 
            del kargs["setting"] 
 #        else: setting = {"reverse": False}
@@ -1550,8 +1550,8 @@
 
     def GetValue(self):
         punctuation = {
-          ord(u'\u2018'): unicode("'"),
-          ord(u'\u2019'): unicode("'"),
+          ord('\u2018'): str("'"),
+          ord('\u2019'): str("'"),
         }
         try:
             wxval = wx.TextCtrl.GetValue(self)
@@ -1728,7 +1728,7 @@
         sizer=wx.BoxSizer(wx.HORIZONTAL)
 
         self.t1 = None
-        if setting.has_key("text_box"):
+        if "text_box" in setting:
            if setting["text_box"]==True:
               self.t1=TextCtrlCopyPaste(self, wx.ID_ANY, 
                                     str(setting["val"]), 
@@ -2023,17 +2023,17 @@
         if self._use_float:        
             return self.sl.GetValue()
         else:
-            return long(self.sl.GetValue())
+            return int(self.sl.GetValue())
     def SetValue(self, value):
         if value is None:
            self.sl.SetValue(1.0)
            if self._use_float:
               self.cb.SetValue(str(self.sl._range[1]))
            else:
-              self.cb.SetValue(str(long(self.sl._range[1])))
+              self.cb.SetValue(str(int(self.sl._range[1])))
         else:
            if not self._use_float:
-              v = long(value)
+              v = int(value)
            else:
               v = float(value)
            self.sl.SetValue(v)
@@ -2342,7 +2342,7 @@
              self.Layout()
 
     def _set_size(self):
-        print(self.elp.GetSize(), self.elp2.GetSize())
+        print((self.elp.GetSize(), self.elp2.GetSize()))
 
 #   self.elp[i]=EditListPanel(nb, [x[0:4] for x in list])
 #   value = DialogEditListTab(tab, l, tip=tip, parent=parent, 
@@ -2627,7 +2627,7 @@
                   self.axes, self.axes_sel_mode)
         self.axes_sel_mode = False
         self.set_button_eneable()
-        print('getvalue in generic...' , value)
+        print(('getvalue in generic...' , value))
 
         return value
     def set_button_eneable(self):
@@ -2719,7 +2719,7 @@
        #print 'switch panel', mode, self.mode
        if self.elp is not None:
           self._elp_values[self.mode] = self.elp.GetValue()
-       if not self.panels.has_key(mode): return False
+       if mode not in self.panels: return False
        if self.mode == mode:
            self.GetParent().Layout()
            #print 'fitting'
@@ -2948,7 +2948,7 @@
         del kargs['setting']['keyname']
         del kargs['setting']['dialog']
         del kargs['setting']['def_value']
-        if len(kargs['setting'].keys()) == 0: del kargs['setting']
+        if len(list(kargs['setting'].keys())) == 0: del kargs['setting']
         kargs['style'] = wx.CB_DROPDOWN
         kargs['choices'] = ['']
 
@@ -3199,7 +3199,7 @@
                'default_node': v[1],
                'title': v[2],}
 
-        sigs =  self.pages2data().keys()
+        sigs =  list(self.pages2data().keys())
         for i, name in enumerate(sigs):
             p = self.nb.GetPage(i)
             name = ''.join(name.split('*'))
@@ -3211,7 +3211,7 @@
     def onPageClose(self, evt):
         ipage = self.nb.GetSelection()
         label  = self.nb.GetPageText(ipage).strip()
-        print label, 'closing'
+        print(label, 'closing')
         if str(label) in ['x', 'y', 'z', 'xerr', 'yerr']:
             ret=dialog.message(self,
                           '"'+label+'"' + " is reserved and cannot be deleted",
@@ -3225,7 +3225,7 @@
         self.elp.SetValue([value['experiment'],
                            value['default_node'],
                            value['title']])
-        sigs =  value.keys()
+        sigs =  list(value.keys())
         for key in  ['experiment', 'default_node', 'title', 'event', '_flag']:
             if key in sigs: sigs.remove(key)
         for key in sigs:
@@ -3277,7 +3277,7 @@
             p.SetText(txt)
 #            if not mod: p.SetSavePoint()
         except UnicodeDecodeError:
-            p.SetText(unicode(txt, errors='ignore'))
+            p.SetText(str(txt, errors='ignore'))
 #            if not mod: p.SetSavePoint()
 
     def onHitAlways(self, evt):
@@ -3298,7 +3298,7 @@
 #            self.Freeze()
             new_name = str(dlg.GetValue())
             data  = self.pages2data()
-            if new_name in  data.keys(): 
+            if new_name in  list(data.keys()): 
                 dlg.Destroy()
                 return
 #            len(data.keys())
@@ -3673,7 +3673,7 @@
            elif val[2] == 4: 
               if len(val)==4:
                  setting=val[3]
-                 if setting.has_key("style") is False:
+                 if ("style" in setting) is False:
 #                    setting["style"]=wx.CB_DROPDOWN
                     setting["style"]=wx.TE_PROCESS_ENTER
               else:
@@ -3689,7 +3689,7 @@
                  setting=val[3]
                  if "readonly" in setting:
                      setting["style"] = wx.CB_READONLY if setting["readonly"] else wx.DROPDOWN
-                 if setting.has_key("style") is False:
+                 if ("style" in setting) is False:
                     setting["style"]=wx.TE_PROCESS_ENTER
               else:
                  setting={"style":wx.CB_READONLY,
@@ -4109,7 +4109,7 @@
                except:
                    import traceback
                    traceback.print_exc()
-                   print("failed to call SetValue" + str(w))                   
+                   print(("failed to call SetValue" + str(w)))                   
                    continue
                if err is False:
                   w.Hide()
@@ -4623,7 +4623,7 @@
         val = dia.ShowModal()
         if val == wx.ID_OK:
            print("YES")
-           print(dia.GetValue())
+           print((dia.GetValue()))
         dia.Destroy()
         self.Close()
 
--- python/ifigure/utils/event_driven_thread.py	(original)
+++ python/ifigure/utils/event_driven_thread.py	(refactored)
@@ -1,8 +1,8 @@
-import time, weakref, threading, Queue
+import time, weakref, threading, queue
 
 queues = []
 def get_thread():
-    queues.append(Queue.Queue())
+    queues.append(queue.Queue())
     return EventDrivenThread(queues[-1]), queues[-1]
 def send_event(event, t=None):
     if t is None: 
@@ -54,16 +54,16 @@
            else:
                event = self.queue.get(False)
                print(event)
-               print(self.events)
+               print((self.events))
                if event in self.events:
-                   print('calling method for ', event)
+                   print(('calling method for ', event))
                    for m in self.events[event]:
                        m(event)
         remove_queue(self.queue)
         send_event(self.finish_event)
         self.queue = None
         self.events = None
-        print('Exiting...', self.name)
+        print(('Exiting...', self.name))
 
     def onQuitThread(self, e):
         self.flag = False
--- python/ifigure/utils/event_driven_thread2.py	(original)
+++ python/ifigure/utils/event_driven_thread2.py	(refactored)
@@ -1,11 +1,11 @@
-import time, weakref, threading, Queue
+import time, weakref, threading, queue
 
 
 lock = threading.Lock()
 queues = []
 def get_thread(return_queue = None):
     lock.acquire()
-    new_queue = Queue.Queue()
+    new_queue = queue.Queue()
     queues.append(new_queue)
     lock.release()
     return EventDrivenThread(queues[-1], return_queue), new_queue
@@ -70,13 +70,13 @@
 
 #                       print self.events
                time.sleep(0.1)
-           if len(self.events.keys()) == 0: self.flag = False
+           if len(list(self.events.keys())) == 0: self.flag = False
         remove_queue(self.queue)
         send_event(self.finish_event)
         self.queue = None
         self.events = None
         if self.rqueue is not None: self.rqueue.put(self.name) 
         self.rqueue = None
-        print('Exiting...', self.name)
+        print(('Exiting...', self.name))
 
 
--- python/ifigure/utils/geom.py	(original)
+++ python/ifigure/utils/geom.py	(refactored)
@@ -189,7 +189,7 @@
           ans =  np.array((p1 - q1)*(np.matrix((-p, q))**-1)).flatten()
       else:
           continue
-      if debug: print q1, q2, ans
+      if debug: print(q1, q2, ans)
       if 0. < ans[-1] <= 1.:
           if not internal_only or (internal_only and 
                                    (0. < ans[0] <= 1.)):
@@ -230,7 +230,7 @@
           ans =  np.array((p1 - q1)*(np.matrix((-p, q))**-1)).flatten()
       else:
           continue
-      if debug: print ans
+      if debug: print(ans)
       if 0. < ans[-1] <= 1.:
           if not internal_only or (internal_only and 
                                    (0. < ans[0] <= 1.)):
@@ -374,7 +374,7 @@
     if idx is None:
         return cumsum
     else:
-        lidx = long(idx)
+        lidx = int(idx)
         didx = idx - lidx
         return cumsum[lidx] + norm_dpath[lidx] * didx
 '''
--- python/ifigure/utils/gif_animation.py	(original)
+++ python/ifigure/utils/gif_animation.py	(refactored)
@@ -11,5 +11,5 @@
        image = canvas.canvas.bitmap.ConvertToImage()
        images.append(image_to_pil(image))
 
-   print(writeGif.__doc__)
+   print((writeGif.__doc__))
    writeGif(filename, images, duration=duration, dither=dither)
--- python/ifigure/utils/hdf_data_export.py	(original)
+++ python/ifigure/utils/hdf_data_export.py	(refactored)
@@ -70,11 +70,11 @@
            flags[key] = False
 
 def set_all_properties_all(flags, value):
-    keys = flags.keys()
+    keys = list(flags.keys())
     for labels in keys:
         if len(labels) < 2: continue
         if labels[1] == 'property': flags[labels] = value
-    keys = flags.keys()        
+    keys = list(flags.keys())        
     for labels in keys:
         if not (labels[0], 'property') in flags:
             flags[(labels[0], 'property')] = value
@@ -134,7 +134,7 @@
             dd = obj.export()
         except NotImplementedError:
             if verbose:            
-                print(name + ' does not have data to export')
+                print((name + ' does not have data to export'))
         except:
             print('Unexpected error')
             raise
@@ -147,8 +147,8 @@
             obj.assign_default_metadata()
             obj.update_data_metadata()
             if verbose:
-                txt = ['member '+ str(i) + ' exprot ' + ','.join(d.keys()) for i, d in enumerate(dd)]
-                print(name + ' : ' + ','.join(txt))
+                txt = ['member '+ str(i) + ' exprot ' + ','.join(list(d.keys())) for i, d in enumerate(dd)]
+                print((name + ' : ' + ','.join(txt)))
         try:
             props = get_all_properties(obj)
         except:
@@ -190,12 +190,12 @@
     #rootgrp = Dataset(filename, "w", format="NETCDF4")
     
     import time
-    meta = metadata[metadata.keys()[0]]
+    meta = metadata[list(metadata.keys())[0]]
     meta['description'] = "Figure data exported from piScope"
     meta['date']= time.ctime(time.time())
     for key in six.iterkeys(meta):
         rootgrp.attrs[key] = str(meta[key])
-    metadata[metadata.keys()[0]] = {}
+    metadata[list(metadata.keys())[0]] = {}
 
     for key in six.iterkeys(data):
         labels = (key, )
@@ -203,7 +203,7 @@
             not export_flag[labels]): continue
         key_grp = rootgrp.create_group(key)
         
-        data_keys = [k for k in  data[key].keys() if k.startswith('data')]
+        data_keys = [k for k in  list(data[key].keys()) if k.startswith('data')]
         for i, k in enumerate(data_keys):
             if len(data_keys) > 1:
                 data_grp = key_grp.create_group(k)
--- python/ifigure/utils/images2gif.py	(original)
+++ python/ifigure/utils/images2gif.py	(refactored)
@@ -201,7 +201,7 @@
             images2.append(im)
             
         else:
-            print(isinstance(im, Image.Image))
+            print((isinstance(im, Image.Image)))
             raise ValueError("Unknown image type.")
     
     # check duration
@@ -220,7 +220,7 @@
     # write
     try:
         n = _writeGifToFile(fp, images2, durations, loops)
-        print(n, 'frames written')
+        print((n, 'frames written'))
     finally:
         fp.close()
 
--- python/ifigure/utils/mailfile.py	(original)
+++ python/ifigure/utils/mailfile.py	(refactored)
@@ -40,7 +40,7 @@
         msg.attach(part)
  
     if ssl:
-       print(server, ssl_port)
+       print((server, ssl_port))
        smtp = smtplib.SMTP_SSL(server, ssl_port)
        smtp.login(ssl_username, ssl_passwd)
     else:
@@ -52,7 +52,7 @@
    if len(sys.argv[1:]) == 1:
       file = sys.argv[1:][0]
       if os.path.exists(file): 
-          print('sending : '+file)
+          print(('sending : '+file))
           file = os.path.abspath(file)
       sendMail(
            ["shiraiwa@psfc.mit.edu"],
--- python/ifigure/utils/make_release.py	(original)
+++ python/ifigure/utils/make_release.py	(refactored)
@@ -45,7 +45,7 @@
                  if lines[0].startswith('#!'): continue
                  for l in lines:
                      if l.upper().find('COPYRIGHT(C)') != -1: 
-                         print('skipping ', path)
+                         print(('skipping ', path))
                          break
                  else:
 #                     print 'processing ', path
@@ -55,7 +55,7 @@
                          fid.write(l)
                      fid.close()
                      c = c + 1
-    print('total ', str(c) + ' files are processed')
+    print(('total ', str(c) + ' files are processed'))
 #            if c > 3: return
 
 def check_print():
@@ -79,7 +79,7 @@
                              if l.find('#') <  l.upper().find('PRINT '): continue
                          print((path, l))
                          c = c + 1
-    print('total ', str(c) + ' PRINT statement detected')
+    print(('total ', str(c) + ' PRINT statement detected'))
 #            if c > 3: return
 
 def make_release(release = 'piscope_release', version = 'beta'):
@@ -129,7 +129,7 @@
                      os.remove(path)
                      continue
                 if f.startswith('.nfs'):
-                     print('removing ', path)
+                     print(('removing ', path))
                      os.remove(path)
                      continue
 
--- python/ifigure/utils/mdsplus_gateway.py	(original)
+++ python/ifigure/utils/mdsplus_gateway.py	(refactored)
@@ -2,14 +2,14 @@
 
 import socket
 import threading
-import SocketServer
+import socketserver
 import paramiko
 import os
 import MDSplus
 import binascii, sys
-import cPickle as pickle
+import pickle as pickle
 
-class ThreadedTCPRequestHandler(SocketServer.BaseRequestHandler):
+class ThreadedTCPRequestHandler(socketserver.BaseRequestHandler):
     
 #
 
@@ -20,11 +20,11 @@
         param=data[1:]
 
         response = ''
-        print("Request " , data)
+        print(("Request " , data))
         if com == 'c': # connection request
            tree, shot, node=param.split(',')
            try:
-              self.t = MDSplus.Tree(tree, long(shot))
+              self.t = MDSplus.Tree(tree, int(shot))
               tn = self.t.getNode(node)
               self.t.setDefault(tn)
               response='ok'
@@ -38,15 +38,15 @@
            node = a[2]
            expr = ','.join(a[3:])
            try:
-              self.t = MDSplus.Tree(tree, long(shot))
+              self.t = MDSplus.Tree(tree, int(shot))
               if node.strip() != '':
                  tn = self.t.getNode(node)
                  self.t.setDefault(tn)
               r =MDSplus.Data.compile(expr).evaluate().data() 
               sr=pickle.dumps(r)
               response = binascii.b2a_hex(sr)
-              print("sending data (length)", len(response), 'original :', type(sr))
-              print(type(binascii.a2b_hex(response)))
+              print(("sending data (length)", len(response), 'original :', type(sr)))
+              print((type(binascii.a2b_hex(response))))
 
            except Exception:
               response=str(sys.exc_info()[1])+','+str(sys.exc_info()[2])
@@ -55,13 +55,13 @@
            r =MDSplus.Data.compile(param).evaluate().data() 
            sr=pickle.dumps(r)
            response = binascii.b2a_hex(sr)
-           print("sending data (length)", len(response), 'original :', type(sr))
-           print(type(binascii.a2b_hex(response)))
+           print(("sending data (length)", len(response), 'original :', type(sr)))
+           print((type(binascii.a2b_hex(response))))
         #response = "{}: {}".format(cur_thread.name, data)
 
         self.request.sendall(response+'\n')
 
-class ThreadedTCPServer(SocketServer.ThreadingMixIn, SocketServer.TCPServer):
+class ThreadedTCPServer(socketserver.ThreadingMixIn, socketserver.TCPServer):
     pass
 
 
@@ -72,7 +72,7 @@
     server = ThreadedTCPServer((HOST, PORT), ThreadedTCPRequestHandler)
     ip, port = server.server_address
 
-    print(ip, port)
+    print((ip, port))
     # Start a thread with the server -- that thread will then start one
     # more thread for each request
     server_thread = threading.Thread(target=server.serve_forever)
@@ -83,9 +83,9 @@
     #usr=os.getenv("USER")
     from ifigure.utils.get_username import get_username
     usr = get_username()
-    print("Server loop running in thread:", server_thread.name)
+    print(("Server loop running in thread:", server_thread.name))
 
-    raw_input()
+    input()
 
 
     server.shutdown()
--- python/ifigure/utils/minifier.py	(original)
+++ python/ifigure/utils/minifier.py	(refactored)
@@ -52,7 +52,7 @@
 something is broken.
 """
 
-import sys, re, cStringIO, tokenize
+import sys, re, io, tokenize
 from optparse import OptionParser
 
 # Compile our regular expressions for speed
@@ -93,7 +93,7 @@
         def noop():
             pass
     """
-    io_obj = cStringIO.StringIO(source)
+    io_obj = io.StringIO(source)
     out = ""
     prev_toktype = tokenize.INDENT
     last_lineno = -1
@@ -163,7 +163,7 @@
         def foo(foo,bar,blah):
             test="This is a %s"%foo
     """
-    io_obj = cStringIO.StringIO(source)
+    io_obj = io.StringIO(source)
     remove_columns = []
     out = ""
     out_line = ""
@@ -409,7 +409,7 @@
         def foo(bar):
          test = "This is a test"
     """
-    io_obj = cStringIO.StringIO(source)
+    io_obj = io.StringIO(source)
     out = ""
     last_lineno = -1
     last_col = 0
@@ -505,7 +505,7 @@
         test = "foo"
         test2 = "bar"
     """
-    io_obj = cStringIO.StringIO(source)
+    io_obj = io.StringIO(source)
     source = [a for a in io_obj.readlines() if a.strip()]
     return "".join(source)
 
@@ -659,7 +659,7 @@
     options, args = parser.parse_args()
     try:
         source = open(args[0]).read()
-    except Exception, e:
+    except Exception as e:
         print(e)
         parser.print_help()
         sys.exit(2)
--- python/ifigure/utils/ndarray_cache.py	(original)
+++ python/ifigure/utils/ndarray_cache.py	(refactored)
@@ -7,7 +7,7 @@
 
     def show(self):
         for key in NdArrayCache.cache.iterkeyrefs():
-            print(NdArrayCache.cache[key()])
+            print((NdArrayCache.cache[key()]))
 
     def store(self, t):
         if self.get_id(t) is not None:
--- python/ifigure/utils/pickled_pipe.py	(original)
+++ python/ifigure/utils/pickled_pipe.py	(refactored)
@@ -1,4 +1,4 @@
-import cPickle as pickle
+import pickle as pickle
 import select, time
 
 class PickledPipe(object):
--- python/ifigure/utils/print_openfile.py	(original)
+++ python/ifigure/utils/print_openfile.py	(refactored)
@@ -1,22 +1,22 @@
-import __builtin__
+import builtins
 openfiles = set()
-oldfile = __builtin__.file
+oldfile = builtins.file
 class newfile(oldfile):
     def __init__(self, *args):
         self.x = args[0]
-        print("### OPENING %s ###" % str(self.x))            
+        print(("### OPENING %s ###" % str(self.x)))            
         oldfile.__init__(self, *args)
         openfiles.add(self)
 
     def close(self):
-        print("### CLOSING %s ###" % str(self.x))
+        print(("### CLOSING %s ###" % str(self.x)))
         oldfile.close(self)
         openfiles.remove(self)
-oldopen = __builtin__.open
+oldopen = builtins.open
 def newopen(*args):
     return newfile(*args)
-__builtin__.file = newfile
-__builtin__.open = newopen
+builtins.file = newfile
+builtins.open = newopen
 
 def printOpenFiles():
-    print("### %d OPEN FILES: [%s]" % (len(openfiles), ", ".join(f.x for f in openfiles)))
+    print(("### %d OPEN FILES: [%s]" % (len(openfiles), ", ".join(f.x for f in openfiles))))
--- python/ifigure/utils/read_afile.py	(original)
+++ python/ifigure/utils/read_afile.py	(refactored)
@@ -6,7 +6,7 @@
 
    a = line.split(' ')
    a = [x for x in a if len(x) != 0]
-   return long(a[0]), long(a[1])
+   return int(a[0]), int(a[1])
 
 def read1055(f):
    '''
@@ -34,7 +34,7 @@
    e = line[44:47]
    f = line[48:51]
    g = line[52:55]
-   return float(a), long(b), long(c), d, long(e), long(f), g
+   return float(a), int(b), int(c), d, int(e), int(f), g
 
 def read1040(f):
    '''
--- python/ifigure/utils/recarray.py	(original)
+++ python/ifigure/utils/recarray.py	(refactored)
@@ -8,8 +8,8 @@
     elif arr.dtype.names is not None:
         r = cls()
         for name in arr.dtype.names:
-            print name
-            print isinstance(arr[name], np.recarray)
+            print(name)
+            print(isinstance(arr[name], np.recarray))
             if isinstance(arr[name], np.recarray):
                 r[name] = rec2dict(arr[name])
             elif (isinstance(arr[name], np.ndarray) and 
--- python/ifigure/utils/rollback_importer.py	(original)
+++ python/ifigure/utils/rollback_importer.py	(refactored)
@@ -1,20 +1,20 @@
-import sys, __builtin__
+import sys, builtins
 class RollbackImporter:
     def __init__(self):
         "Creates an instance and installs as the global importer"
         self.previousModules = sys.modules.copy()
-        self.realImport = __builtin__.__import__
-        __builtin__.__import__ = self._import
+        self.realImport = builtins.__import__
+        builtins.__import__ = self._import
         self.newModules = {}
         
     def _import(self, name, globals=None, locals=None, fromlist=[]):
-        result = apply(self.realImport, (name, globals, locals, fromlist))
+        result = self.realImport(*(name, globals, locals, fromlist))
         self.newModules[name] = 1
         return result
         
     def uninstall(self):
-        for modname in self.newModules.keys():
-            if not self.previousModules.has_key(modname):
+        for modname in list(self.newModules.keys()):
+            if modname not in self.previousModules:
                 # Force reload when modname next imported
                 del(sys.modules[modname])
-        __builtin__.__import__ = self.realImport
+        builtins.__import__ = self.realImport
--- python/ifigure/utils/safename.py	(original)
+++ python/ifigure/utils/safename.py	(refactored)
@@ -5,6 +5,6 @@
     """
     import unicodedata
     value = unicodedata.normalize('NFKD', value).encode('ascii', 'ignore')
-    value = unicode(re.sub('[^\w\s-]', '', value).strip().lower())
+    value = str(re.sub('[^\w\s-]', '', value).strip().lower())
     valee = re.sub('[-\s]+', '-', value)
     return value
--- python/ifigure/utils/setting_parser.py	(original)
+++ python/ifigure/utils/setting_parser.py	(refactored)
@@ -97,7 +97,7 @@
             if nocheck or (name2 in rule):
                 rule[name2] = value
             else:
-                print('Undefined field :', name2, ' in rule ' + name)
+                print(('Undefined field :', name2, ' in rule ' + name))
             lc = lc+1
         return lc, rule
 
@@ -194,7 +194,7 @@
         if not os.path.exists(os.path.dirname(t)):
              self.mk_filepath_dir(os.path.dirname(t))
         else:
-             print('making directory', t)
+             print(('making directory', t))
              os.mkdir(t)
     def read_setting(self, mname, fromDefault=False):
         def_file, user_file = self.mname2file(mname)
@@ -231,7 +231,7 @@
             'port = 22',
             'host = transport']
    sp = SettingParser()
-   print(sp.read_file(lines=lines))
+   print((sp.read_file(lines=lines)))
 
 
    lines = ['version = 1',
@@ -250,7 +250,7 @@
 
    sp = SettingParser(rule_mode=1)
    sp.set_rule('student', {'name':'', 'age':16})
-   print(sp.read_file(lines=lines))
+   print((sp.read_file(lines=lines)))
 
    lines = ['version = 1', 
             'type = "proxy"',
@@ -284,7 +284,7 @@
    sp.set_rule('house', {})
    sp.set_rule('yard', {})
    sp.set_rule('toy', {})
-   print(sp.read_file(lines=lines))
+   print((sp.read_file(lines=lines)))
 
    lines = ['version = 1',
             'house',
--- python/ifigure/utils/sync_hg.py	(original)
+++ python/ifigure/utils/sync_hg.py	(refactored)
@@ -16,14 +16,14 @@
                lines = out.split('\n')
                numc = len([1 for l in lines if l.startswith('changeset')])
                if numc > 0:
-                   print(str(numc) + ' is coming from ' + url)
+                   print((str(numc) + ' is coming from ' + url))
 
             except:
                if traceback.format_exc().find('no changes found') != -1:
-                   print(url + ' is updated')
+                   print((url + ' is updated'))
                    continue
                if traceback.format_exc().find('There is no Mercurial') != -1:
-                   print('no repo found in '+url)
+                   print(('no repo found in '+url))
                    continue
                traceback.print_exc()
                continue
@@ -49,14 +49,14 @@
                lines = out.split('\n')
                numc = len([1 for l in lines if l.startswith('changeset')])
                if numc > 0:
-                   print(str(numc) + ' is coming from ' + url)
+                   print((str(numc) + ' is coming from ' + url))
 
             except:
                if traceback.format_exc().find('no changes found') != -1:
-                   print(url + ' is updated')
+                   print((url + ' is updated'))
                    continue
                if traceback.format_exc().find('There is no Mercurial') != -1:
-                   print('no repo found in '+url)
+                   print(('no repo found in '+url))
                    continue
                traceback.print_exc()
                continue
--- python/ifigure/utils/vctr_array.py	(original)
+++ python/ifigure/utils/vctr_array.py	(refactored)
@@ -17,7 +17,7 @@
 '''
 import numpy as np
 def expand_vctr(x, y, n, l):
-    print x.shape, 
+    print(x.shape, end=' ') 
     res_x = [np.hstack((x[k, :l[k]], np.nan)) for k in range(n)]
     res_y = [np.hstack((y[k, :l[k]], np.nan)) for k in range(n)]
 
--- python/ifigure/utils/weak_callback.py	(original)
+++ python/ifigure/utils/weak_callback.py	(refactored)
@@ -14,8 +14,8 @@
     """
     def __init__(self, mcallback):
         """Create a new Weak Callback calling the method @mcallback"""
-        obj = mcallback.im_self
-        attr = mcallback.im_func.__name__
+        obj = mcallback.__self__
+        attr = mcallback.__func__.__name__
         self.wref = weakref.ref(obj, self.object_deleted)
         self.callback_attr = attr
         self.token = None
@@ -35,7 +35,7 @@
             attr = getattr(obj, self.callback_attr)
             return attr
         else:
-            raise TypeError, 'Method called on dead object'
+            raise TypeError('Method called on dead object')
 
     def default_callback(self, *args, **kwargs):
         """Called instead of callback when expired"""
--- python/ifigure/widgets/advanced_config.py	(original)
+++ python/ifigure/widgets/advanced_config.py	(refactored)
@@ -36,7 +36,7 @@
         return list1, hint1
 
     def set_dialog_result(self, value):
-        self.setting["max_thread"]  = long(value[0])
+        self.setting["max_thread"]  = int(value[0])
         self.setting["keep_text_as_text"]  = not value[1]
         self.setting["image_dpi"]  = int(value[2])
         self.setting["hg_default_url"]  = str(value[3])
--- python/ifigure/widgets/artist_widgets.py	(original)
+++ python/ifigure/widgets/artist_widgets.py	(refactored)
@@ -141,7 +141,7 @@
        ['format', '%1.3f',   0, {}],
        ['skip', '0', 24,
         {"minV": 0.,"maxV": 5., "val" : 0, "res" : 1, "text_box" : True}],]
-init_v = [8.0, (False, [(0.0, 0.0, 0.0, 1.0)]), True, 5.0, u'%1.3f', '0']
+init_v = [8.0, (False, [(0.0, 0.0, 0.0, 1.0)]), True, 5.0, '%1.3f', '0']
 s_decimate = {"text": 'on'}
 listparam['decimate'] = ["decimate", True,  3, s_decimate, 'decimate', 2]
 
@@ -446,7 +446,7 @@
    def set_artist_property(self, evt):
        ### routine to set property of artist based on
        ### evt happend on aritst_widgets
-       print("debug", "set_artist_property", self)
+       print(("debug", "set_artist_property", self))
        pass
 
    def set_target_artist(self, a, td = None):
@@ -1120,7 +1120,7 @@
 
     def switch_panel(self, mode):
     
-       if not self.panels.has_key(mode): return False
+       if mode not in self.panels: return False
        if self.mode == mode: return True
        if self.mode != '':
           self.panels[self.mode].Hide()
@@ -1237,7 +1237,7 @@
             self.GetTopLevelParent().canvas._figure.figobj):
            self.enable(False)
            return
-        if self.panels.has_key(mode):
+        if mode in self.panels:
            if self.mode == mode: self.enable(True)
            self.panels[mode].set_value(self.artists[0]())
            self.panels[mode].set_target_artist(self.artists[0]())
@@ -1247,7 +1247,7 @@
     def change_artist_panel(self, figobj):
         name = figobj.get_namebase()
 
-        if not self.panels.has_key(name):
+        if name not in self.panels:
            if name in panel1.plistd:
                self.append_panel(name)
            else:
--- python/ifigure/widgets/at_wxthread.py	(original)
+++ python/ifigure/widgets/at_wxthread.py	(refactored)
@@ -3,7 +3,7 @@
    the main thread.
 '''
 from functools import wraps
-import wx, Queue, threading
+import wx, queue, threading
 class CallError(object):
       pass
 def at_wxthread(func):
@@ -20,7 +20,7 @@
         if t.name == 'MainThread':
            return func(*args, **kargs)
         else:
-           q = Queue.Queue()
+           q = queue.Queue()
            wx.CallAfter(func2, func,  q, *args, **kargs)
            value = q.get()
            if isinstance(value, CallError):
--- python/ifigure/widgets/axes_range_subs.py	(original)
+++ python/ifigure/widgets/axes_range_subs.py	(refactored)
@@ -352,7 +352,7 @@
             a = range0[0]; b = range0[1]
             if a != 0:
                si = a/abs(a)
-               ex = long(np.log10(abs(a)))
+               ex = int(np.log10(abs(a)))
 #               if (a/(10.**ex) % 1)== 0.:
                ai = (np.floor(a/(10.**ex)))*10.**ex
 #               else:
@@ -360,7 +360,7 @@
             else: ai = 0.
             if b != 0:
                si = b/abs(b)
-               ex = long(np.log10(abs(b)))
+               ex = int(np.log10(abs(b)))
                if (b/(10.**ex) % 1) == 0.:
                   bi = (np.floor(b/(10.**ex)))*10.**ex
                else:
@@ -436,7 +436,7 @@
                for m in ay.walk_member():
                    if m.is_suppress():continue
                    ax = m.get_xaxisparam()
-                   if newrange.has_key(ax):
+                   if ax in newrange:
                        xrange = newrange[ax]
                    else:
                        xrange = ax.range
@@ -465,11 +465,11 @@
                    if m.is_suppress():continue
                    ax = m.get_xaxisparam()
                    ay = m.get_yaxisparam()
-                   if newrange.has_key(ax):
+                   if ax in newrange:
                        xrange = newrange[ax]
                    else:
                        xrange = ax.range
-                   if newrange.has_key(ay):
+                   if ay in newrange:
                        yrange = newrange[ay]
                    else:
                        yrange = ay.range
@@ -498,11 +498,11 @@
                    if m.is_suppress():continue
                    ax = m.get_xaxisparam()
                    ay = m.get_yaxisparam()
-                   if newrange.has_key(ax):
+                   if ax in newrange:
                        xrange = newrange[ax]
                    else:
                        xrange = ax.range
-                   if newrange.has_key(ay):
+                   if ay in newrange:
                        yrange = newrange[ay]
                    else:
                        yrange = ay.range
--- python/ifigure/widgets/book_viewer.py	(original)
+++ python/ifigure/widgets/book_viewer.py	(refactored)
@@ -21,7 +21,7 @@
 __status__ = "beta"
 
 import wx, sys, os, time, webbrowser, weakref
-import cPickle as pickle
+import pickle as pickle
 import wx.aui as aui
 import ifigure
 import ifigure.events
@@ -456,7 +456,7 @@
         self.history = UndoRedoHistory(self)
  
         ###
-        if kargs.has_key("book"):
+        if "book" in kargs:
            self.book = kargs["book"]
            del kargs["book"]
            self.book.set_open(True)
@@ -711,8 +711,8 @@
             dia.Destroy()
             return
         dia.Destroy()
-        new_cx = long(value[-2])
-        new_cy = long(value[-1])
+        new_cx = int(value[-2])
+        new_cy = int(value[-1])
         
         self.Freeze()
         self.SetSize((new_cx+dx, new_cy+dy))
@@ -727,8 +727,8 @@
         dx = sx - cx
         dy = sy - cy
 
-        c1 = (cx, long(float(cx)*ratio))
-        c2 = (long(float(cy)/ratio), cy)
+        c1 = (cx, int(float(cx)*ratio))
+        c2 = (int(float(cy)/ratio), cy)
 
         if abs(c1[1] - cy) > abs(c2[0]-cx):
             new_cx, new_cy = c2
@@ -1007,7 +1007,7 @@
             if path is None:
                 self.onSaveBookAs(evt)
         if path == '': return 
-        print("saving to " + path)
+        print(("saving to " + path))
         s = self.canvas.get_canvas_screen_size()
         self.book._screen_size = (s[0], s[1])
         #print 'book size', self.book._screen_size
@@ -1025,7 +1025,7 @@
            path = save_dlg.GetPath()
            if path[-4:] != '.bfz':
               path=path+'.bfz'
-           print("saving to " + path)
+           print(("saving to " + path))
            self.onSaveBook(evt, path = path)
 #           self.update_exportas_menu()
         save_dlg.Destroy()
@@ -1592,7 +1592,7 @@
         for k in range(self.num_page()):
             param.append((k, self))
         from ifigure.utils.gif_animation import save_animation
-        print('saveing gif animation...'+filename)
+        print(('saveing gif animation...'+filename))
         save_animation(show_page, param, self.canvas, filename=filename,
                        duration=speed, dither = dither)
 
@@ -1616,7 +1616,7 @@
         from ifigure.matplotlib_mod.mpl_utils import call_savefig_method        
 
         for k in range(self.num_page()):
-            print('printing page: ', str(k))
+            print(('printing page: ', str(k)))
             self.show_page(k)
             self.draw()
             name = ret0+'_'+str(k)+'.pdf'
@@ -1921,16 +1921,16 @@
              xc, yc = self.canvas.canvas.bitmap.GetSize()
              ratio = min([float(xd)/float(xc), float(yd)/float(yc)])
              for p in self.book.walk_page():
-                 p.set_figure_dpi(long(p.getp('dpi')*ratio))
+                 p.set_figure_dpi(int(p.getp('dpi')*ratio))
 
              w = xd
              h = yd
              if (xd - xc*ratio) > 4: 
-                 w = long((xd - xc*ratio)/2)
+                 w = int((xd - xc*ratio)/2)
                  self.canvas.show_spacer(w=w, h=h, 
                                          direction=wx.HORIZONTAL)
              elif (yd - yc*ratio) > 4:
-                 h = long((yd - yc*ratio)/2)
+                 h = int((yd - yc*ratio)/2)
                  self.canvas.show_spacer(w=w, h=h, 
                                          direction=wx.VERTICAL)
              else:
--- python/ifigure/widgets/book_viewer_interactive.py	(original)
+++ python/ifigure/widgets/book_viewer_interactive.py	(refactored)
@@ -46,7 +46,7 @@
   try:
       _dtype_numbers.append(np.dtype(x))
   except:
-      print('numpy does not know type = '+x)
+      print(('numpy does not know type = '+x))
 
 class NoPageError(Exception):
     pass
@@ -113,7 +113,7 @@
             meta['long_description'] = meta0
 
         names = []
-        for k in kargs.keys():
+        for k in list(kargs.keys()):
             if k.endswith('metadata'):
                 names.append(k)
                 header = k[:-8]
@@ -361,7 +361,7 @@
                       obj.realize()
                   except:
                       traceback.print_exc()
-                      print("failed to realize (destroied)" + str(obj))
+                      print(("failed to realize (destroied)" + str(obj)))
                       obj.destroy()
               self._interactive_update_request = ([], [])
               ifigure.events.SendChangedEvent(self.book, w = self, useProcessEvent=True)
@@ -819,7 +819,7 @@
        try:
           obj=cls(*args, **kargs)
        except ValueError as x:
-           print(x.message)
+           print((x.message))
            return
 
        x = convert_2_real_array(obj.getvar('x'))
@@ -901,7 +901,7 @@
        try:
            obj=FigTriplot(*args, **kargs)
        except ValueError as x:
-           print(x.message)
+           print((x.message))
            return
 
        return obj
@@ -918,7 +918,7 @@
        try:
           obj=FigSpline(*args, **kargs)
        except ValueError as x:
-           print(x.message)
+           print((x.message))
            return
        return obj
    
@@ -929,7 +929,7 @@
         try:
            obj=FigContour(*args, **kargs)
         except ValueError as x:
-           print(x.message)
+           print((x.message))
            return
         return obj
     
@@ -940,7 +940,7 @@
         try:
            obj=FigContour(*args, **kargs)
         except ValueError as x:
-           print(x.message)
+           print((x.message))
            return
         return obj
 
@@ -950,7 +950,7 @@
         try:
            obj=FigScatter(*args, **kargs)
         except ValueError as x:
-           print(x.message)
+           print((x.message))
            return
         return obj
 
@@ -1006,7 +1006,7 @@
 
             if len(w) != nx:
                 raise ValueError('weights should have the same shape as x')
-            for i in xrange(nx):
+            for i in range(nx):
                 if len(w[i]) != len(x[i]):
                     raise ValueError(
                         'weights should have the same shape as x')
@@ -1034,7 +1034,7 @@
                    obj.add_child(name, obj2)
                wx.CallAfter(obj2.call_adjust_range)                                  
         except ValueError as x:
-           print(x.message)
+           print((x.message))
            return
 
         return obj
@@ -1046,7 +1046,7 @@
         try:
            obj=FigTricontour(*args, **kargs)
         except ValueError as x:
-           print(x.message)
+           print((x.message))
            return
         return obj
 
@@ -1057,7 +1057,7 @@
         try:
            obj=FigTricontour(*args, **kargs)
         except ValueError as x:
-           print(x.message)
+           print((x.message))
            return
         return obj
 
@@ -1070,7 +1070,7 @@
        try:
           obj=FigImage(*args, **kargs)
        except ValueError as x:
-          print(x.message)
+          print((x.message))
           return
        return obj
 
@@ -1085,7 +1085,7 @@
            else:
                obj=FigQuiver(*args, **kargs)
         except ValueError as x:
-           print(x.message)
+           print((x.message))
            return
         return obj
     @allow_interactive_call
@@ -1096,7 +1096,7 @@
         try:
            obj=FigQuiver3D(*args, **kargs)
         except ValueError as x:
-           print(x.message)
+           print((x.message))
            return
         return obj
       
@@ -1143,7 +1143,7 @@
        try:
           obj=FigSpec(*args, **kargs)
        except ValueError as x:
-          print(x.message)
+          print((x.message))
           return
        return obj
 
@@ -1153,7 +1153,7 @@
        try:
           obj=FigTripcolor(*args, **kargs)
        except ValueError as x:
-          print(x.message)
+          print((x.message))
           return
        return obj
 
@@ -1163,7 +1163,7 @@
        try:
           obj=FigAxline(*args, **kargs)
        except ValueError as x:
-          print(x.message)
+          print((x.message))
           return
 
        return obj
@@ -1174,7 +1174,7 @@
        try:
           obj=FigAxlineC(*args, **kargs)
        except ValueError as x:
-          print(x.message)
+          print((x.message))
           return
        return obj
 
@@ -1184,7 +1184,7 @@
        try:
           obj=FigAxspan(*args, **kargs)
        except ValueError as x:
-          print(x.message)
+          print((x.message))
           return
 
        return obj
@@ -1195,7 +1195,7 @@
        try:
           obj=FigAxspanC(*args, **kargs)
        except ValueError as x:
-          print(x.message)
+          print((x.message))
           return
 
        return obj
@@ -1209,7 +1209,7 @@
               kargs['trans'] = ['axes']*2
           obj = FigText(*args, **kargs)
        except ValueError as x:
-          print(x.message)
+          print((x.message))
           return
 
        return obj
@@ -1224,7 +1224,7 @@
           #kargs['autonext'] = False
           obj = FigArrow(*args, **kargs)
        except ValueError as x:
-          print(x.message)
+          print((x.message))
           return
        return obj
 
@@ -1235,7 +1235,7 @@
        try:
           obj = FigArrow(*args, **kargs)
        except ValueError as x:
-          print(x.message)
+          print((x.message))
           return
        return obj
 
@@ -1253,7 +1253,7 @@
        from ifigure.mto.fig_legend import FigLegend
        if len(args) == 0: return
        if len(args) == 1 and isinstance(args[0], str): args = ((args[0],),)
-       if kargs.has_key("axes2"): 
+       if "axes2" in kargs: 
             kargs["container_idx"] = 1 if kargs["axes2"] else 0
             del kargs["axes2"]
 
@@ -1366,7 +1366,7 @@
         if not fig_axes.get_3d(): return 
         ax = fig_axes._artists[0]
         l = ax.get_lighting()
-        if len(kargs.keys()) == 0: return l
+        if len(list(kargs.keys())) == 0: return l
         for k in kargs:
             if not k in l:
                  raise KeyError(str(k) + ' does not exists')
@@ -1380,7 +1380,7 @@
         if fig_axes is None: return
         if not fig_axes.get_3d(): return 
         ax = fig_axes._artists[0]
-        if len(args) == 0 and len(kargs.keys()) == 0:
+        if len(args) == 0 and len(list(kargs.keys())) == 0:
             return ax.elev, ax.azim
         elif len(args) == 2:
             ax.elev = args[0]
@@ -1462,7 +1462,7 @@
                 ax._show_3d_axes = False
                 fig_axes.set_bmp_update(False)
             else:
-                print('Unkonw keyword: '+ args[0])
+                print(('Unkonw keyword: '+ args[0]))
     def view(self, *args, **kargs):
         return self._view(*args, **kargs)
     
@@ -1563,10 +1563,10 @@
                    ll.append(listparam[p])
 
         if len(ll) == 0:
-            print('Property '+name+ ' is not found')
+            print(('Property '+name+ ' is not found'))
             return
         if len(ll) > 1:
-            print('More thant two properties are found by '+name)
+            print(('More thant two properties are found by '+name))
             print('Please inform developer this problem')
             return 
         #dprint1(ll)
--- python/ifigure/widgets/button_example.py	(original)
+++ python/ifigure/widgets/button_example.py	(refactored)
@@ -31,7 +31,7 @@
 axprev = plt.axes([0.7, 0.05, 0.1, 0.075])
 axnext = plt.axes([0.81, 0.05, 0.1, 0.075])
 bnext = Button(axnext, 'Next')
-bnext.on_clicked(callback.next)
+bnext.on_clicked(callback.__next__)
 bprev = Button(axprev, 'Previous')
 bprev.on_clicked(callback.prev)
 
--- python/ifigure/widgets/custom_double_slider.py	(original)
+++ python/ifigure/widgets/custom_double_slider.py	(refactored)
@@ -15,7 +15,7 @@
     mdc = wx.MemoryDC(bitmap)
     mdc.Blit(0, 0, w, h, wdc, 0, 0)    
     data = np.fromstring(bitmap.ConvertToImage().GetData(), np.uint8)
-    print(data.reshape((h,w,3))[0,0,:])
+    print((data.reshape((h,w,3))[0,0,:]))
     return bitmap
 
 class CustomPanel(wx.Panel):
@@ -350,9 +350,9 @@
         self.Bind(EVT_CDS_CHANGED, self.onCDS_CHANGED)
         self.Bind(EVT_CDS_CHANGING, self.onCDS_CHANGING)
     def onCDS_CHANGED(self, evt):
-        print(evt.GetEventObject().GetValue())
+        print((evt.GetEventObject().GetValue()))
     def onCDS_CHANGING(self, evt):
-        print(evt.GetEventObject().GetValue())
+        print((evt.GetEventObject().GetValue()))
 
 
 if __name__ == '__main__':
--- python/ifigure/widgets/debugger.py	(original)
+++ python/ifigure/widgets/debugger.py	(refactored)
@@ -42,7 +42,7 @@
 
         """
         try:
-            exec code in self._l_dict, self._g_dict
+            exec(code, self._l_dict, self._g_dict)
         except SystemExit:
             raise
         except:
@@ -51,7 +51,7 @@
             from code import softspace
             import sys            
             if softspace(sys.stdout, 0):
-                print
+                print()
 
 from ifigure.widgets.simple_shell import ShellBase
 class DebugShell(ShellBase):
@@ -144,7 +144,7 @@
                try:
 #                   print(eval(txt, self.frame.f_globals,
 #                                 self.frame.f_locals))
-                    exec compile(txt, 'text', 'exec')  in self.frame.f_globals, self.frame.f_locals
+                    exec(compile(txt, 'text', 'exec'), self.frame.f_globals, self.frame.f_locals)
                except:
                     print('evaluation failed')
 
@@ -166,8 +166,8 @@
            txt = str(self.txt.GetValue())
            if txt != '':
                try:
-                   print(eval(txt, self.frame.f_globals,
-                                   self.frame.f_locals))
+                   print((eval(txt, self.frame.f_globals,
+                                   self.frame.f_locals)))
                except:
                    print('evaluation failed')
        elif l == 'q':
@@ -228,12 +228,12 @@
            wx.Yield()
 
    def handle_user_return(self, frame, return_value):
-       print('return', frame, return_value,self._call_count)
+       print(('return', frame, return_value,self._call_count))
        if self._call_count > 0:
            self._call_count = self._call_count - 1
        else:
            self._status = 'stop'
-           print('exiting debug mode : return value = ', return_value)
+           print(('exiting debug mode : return value = ', return_value))
            self.exit_debug_mode()
 
    def handle_user_call(self, frame, return_value):
@@ -241,7 +241,7 @@
 
    def handle_user_exception(self, frame, exc_info):
        self._status = 'stop'
-       print('exiting debug mode : exception info = ', exc_info)
+       print(('exiting debug mode : exception info = ', exc_info))
        self.exit_debug_mode()
 
    def exit_debug_mode(self):         
--- python/ifigure/widgets/hdf_export_window.py	(original)
+++ python/ifigure/widgets/hdf_export_window.py	(refactored)
@@ -433,7 +433,7 @@
                         export_flag = flags,
                         filename = path,
                         verbose = True)
-            print('HDF export finished : '+path)
+            print(('HDF export finished : '+path))
         except:   
             dialog.showtraceback(parent = self,
                                txt='Failed to export HDF', 
--- python/ifigure/widgets/logwindow.py	(original)
+++ python/ifigure/widgets/logwindow.py	(refactored)
@@ -139,7 +139,7 @@
         ipage=self.nb.GetSelection()
         n = self.nb.GetPageCount()
         l = [True]*n
-        for ipage in reversed(range(n)):
+        for ipage in reversed(list(range(n))):
             p=self.nb.GetPage(ipage)
             keep = False
             for x in self.threadlist:
--- python/ifigure/widgets/proj_tree_viewer_aui.py	(original)
+++ python/ifigure/widgets/proj_tree_viewer_aui.py	(refactored)
@@ -375,7 +375,7 @@
               return (t1.get_parent().i_child(t1) -
                       t2.get_parent().i_child(t2))
            except:
-              print(t1, t2)
+              print((t1, t2))
               return False
         else:
            return t1[2].OnCompareItems(t1, t2)
@@ -1002,7 +1002,7 @@
             data.SetText(t)
             wx.TheClipboard.SetData(data)
             wx.TheClipboard.Close()            
-        text = unicode(t)
+        text = str(t)
         self._changed_flag = False        
         tdo = wx.TextDataObject(text)
         tdo._source = self
@@ -1198,7 +1198,7 @@
         oitem = croot
         while True:
           try:
-           ntd2=nge.next()
+           ntd2=next(nge)
            nindex = nindex + 1
            oindex = oindex + 1
            if len(oge_list) > oindex: 
@@ -1341,9 +1341,9 @@
         oitem = croot
         while True:
           try:
-           ntd2=nge.next()
+           ntd2=next(nge)
            try:
-              oitem2=oge.next()
+              oitem2=next(oge)
               otd2=self.tree.GetPyData(oitem2)
               #if not isinstance(otd2, TreeDict): continue
            except Exception:
@@ -1364,8 +1364,8 @@
                   oitem=pitem
                   pitem=self.tree.GetItemParent(pitem)
 
-              print "adding sibling", ntd2.get_full_path()
-              print "next to", self.tree.GetPyData(oitem).get_full_path()
+              print("adding sibling", ntd2.get_full_path())
+              print("next to", self.tree.GetPyData(oitem).get_full_path())
               nindex = self.fill_sub_tree_org(
                        pitem, 
                        ntd2, 
--- python/ifigure/widgets/proj_tree_viewer_aui2.py	(original)
+++ python/ifigure/widgets/proj_tree_viewer_aui2.py	(refactored)
@@ -388,7 +388,7 @@
 #        self.dragItem = e.GetItem()
         app=self.tree.GetTopLevelParent()
         app._text_clip=dictobj.get_full_path()
-        text = unicode(dictobj.get_full_path())
+        text = str(dictobj.get_full_path())
         tdo = wx.TextDataObject(text)
         tds = wx.DropSource(self.tree)
         tds.SetData(tdo)
@@ -477,8 +477,8 @@
         croot=self.tree.GetRootItem()
         for item in self.walk_treectrl(croot):
            treedict=self.tree.GetPyData(item)
-           print(treedict.get_full_path())
-           print(self.item_path(item))
+           print((treedict.get_full_path()))
+           print((self.item_path(item)))
            if treedict is None:
                 #rm_list.append(item)
                 self.tree.Delete(item)
@@ -516,9 +516,9 @@
         oitem = croot
         while True:
           try:
-           ntd2=nge.next()
+           ntd2=next(nge)
            try:
-              oitem2=oge.next()
+              oitem2=next(oge)
               otd2=self.tree.GetPyData(oitem2)
            except Exception:
               otd2=None
--- python/ifigure/widgets/property_editor.py	(original)
+++ python/ifigure/widgets/property_editor.py	(refactored)
@@ -82,7 +82,7 @@
             #print 'cp2'
             self.GetSizer().Replace(self.sizer_olditem, self.CP2)
             self.sizer_olditem = self.CP2
-            for p in self.CP2.panels.keys():
+            for p in list(self.CP2.panels.keys()):
                self.CP2.switch_panel(p)
                self.Layout()
                self.CP2.GetSizer().Layout()
@@ -95,7 +95,7 @@
             #print 'cp1'
             self.GetSizer().Replace(self.sizer_olditem, self.CP1)
             self.sizer_olditem = self.CP1
-            for p in self.CP1.panels.keys():
+            for p in list(self.CP1.panels.keys()):
                self.CP1.switch_panel(p)
                self.Layout()
                self.CP1.GetSizer().Layout()
--- python/ifigure/widgets/script_editor.py	(original)
+++ python/ifigure/widgets/script_editor.py	(refactored)
@@ -1223,7 +1223,7 @@
            p.SetReadOnly(readonly)
         except UnicodeDecodeError:
            logging.exception("Opening File Failed. Ignoring invalid bytes")
-           p.SetText(unicode(txt, errors='ignore'))
+           p.SetText(str(txt, errors='ignore'))
            pass
         p.EmptyUndoBuffer()
         p.Colourise(0, -1)
@@ -1451,7 +1451,7 @@
            idx = self.file_list.index(param["oldname"])
            self.file_list[idx]=param["newname"]
            ipage=self.nb.GetPageIndex(self.page_list[idx])
-           print(os.path.basename(param["newname"]))
+           print((os.path.basename(param["newname"])))
            self.nb.SetPageText(ipage, os.path.basename(param["newname"]),
                                doc_name = param["newname"])
            self.nb.SetPageToolTip(ipage, param["newname"])
--- python/ifigure/widgets/shellvar_viewer.py	(original)
+++ python/ifigure/widgets/shellvar_viewer.py	(refactored)
@@ -26,7 +26,7 @@
        self.obj = obj
 
     def OnDropText(self, x, y, indata):
-        print(type(indata))
+        print((type(indata)))
 
         ### this is ad-hoc....!
         app=self.obj.GetTopLevelParent()
@@ -35,7 +35,7 @@
 
         data='='+str(indata)
         try:
-          print(str(indata))
+          print((str(indata)))
           obj=EvalNode(str(indata))
           #print obj
           if obj.isTreeDict():
@@ -322,7 +322,7 @@
 
     def onButton(self, evt, mode):
         from ifigure.ifigure_config import vv_scratch
-        import cPickle as pickle
+        import pickle as pickle
 
         idx = self.grid.GetSelectedRows()
         if len(idx)==0 and mode != 'paste':  return
--- python/ifigure/widgets/simple_shell.py	(original)
+++ python/ifigure/widgets/simple_shell.py	(refactored)
@@ -1,5 +1,5 @@
 import wx, ifigure, os, sys
-import cPickle as pickle
+import pickle as pickle
 import ifigure.server
 import numpy as np
 
@@ -23,10 +23,10 @@
 from ifigure.utils.wx3to4 import isWX3
 
 import time
-import thread
+import _thread
 from threading import Timer, Thread
 try:
-    from Queue import Queue, Empty
+    from queue import Queue, Empty
 except ImportError:
     from queue import Queue, Empty  # python 3.x
     
@@ -96,8 +96,8 @@
         '''
         this overwrite the origial setBuiltinKeywords
         '''
-        import __builtin__
-        __builtin__.exit = __builtin__.quit = \
+        import builtins
+        builtins.exit = builtins.quit = \
              self.quit
         
     def OnKeyDown(self, evt):
@@ -259,7 +259,7 @@
                 dprint1('running startup file', file)
                 txt = 'Running user startup file '+file
                 self.push('print %r' % txt)
-                execfile(file, globals(), self.lvar)
+                exec(compile(open(file, "rb").read(), file, 'exec'), globals(), self.lvar)
 
        self.SetDropTarget(simple_shell_droptarget(self))
     
@@ -270,7 +270,7 @@
           self.history=pickle.load(f)
           f.close 
        except Exception:
-          print(sys.exc_info()[:2])
+          print((sys.exc_info()[:2]))
        if self.history[-1] != '#end of history':
           self.history.append('#end of history')
 
@@ -287,10 +287,10 @@
         '''
         this overwrite the origial setBuiltinKeywords
         '''
-        import __builtin__
-        __builtin__.exit = __builtin__.quit = \
+        import builtins
+        builtins.exit = builtins.quit = \
              self.quit
-        __builtin__.sx = sx
+        builtins.sx = sx
     def set_command_history(self, panel):
         self.ch = panel
 
@@ -331,7 +331,7 @@
                  self.lvar['_tmp_'] = None                
                  txt ='if isinstance(command, TreeDict): _tmp_='+command+'get_children()'
                  code = compile(txt, '<string>', 'exec')
-                 exec code in globals(), self.lvar
+                 exec(code, globals(), self.lvar)
              except:
                  pass
 
@@ -373,7 +373,7 @@
         txt = '_tmp_='+name
         try:
            code = compile(txt, '<string>', 'exec')
-           exec code in globals(), self.lvar
+           exec(code, globals(), self.lvar)
         except:
 #           dprint1(txt)
            pass
@@ -461,7 +461,7 @@
                  str(getattr(types, name)).split("'")[1]
                  for name in dir(types) if not name.startswith('_')}
         
-        for key in self.lvar.keys():
+        for key in list(self.lvar.keys()):
             if not key.startswith('_'):
                 val = self.lvar[key]
                 t0 = type(val).__name__
--- python/ifigure/widgets/taskbar.py	(original)
+++ python/ifigure/widgets/taskbar.py	(refactored)
@@ -535,7 +535,7 @@
     "YA72pbSLgMh1B4hXYN8vtevu+xdtA2AONthgg72iDTrMwQYbbLBXtAEwBxtssMFe0f4/U4pA"
     "UwOVBpYAAAAASUVORK5CYII=")
 
-import os, threading, subprocess, Queue, weakref, tempfile
+import os, threading, subprocess, queue, weakref, tempfile
 import wx, sys, time
 import wx.aui as aui
 
@@ -710,7 +710,7 @@
         self.Bind(wx.EVT_CLOSE, self.OnCloseWindow)
 
     def OnOpenNew(self, evt):
-        self.queues.append(Queue.Queue())
+        self.queues.append(queue.Queue())
         thread = JobMonitor(self.queues[-1], self.redirector)
         log = wx.TextCtrl(self.nb, -1, 
                 style=wx.TE_MULTILINE|wx.TE_READONLY) 
--- python/ifigure/widgets/undo_redo_history.py	(original)
+++ python/ifigure/widgets/undo_redo_history.py	(refactored)
@@ -62,8 +62,8 @@
 dprint1, dprint2, dprint3 = debug.init_dprints('UndoRedoHistory')
 
 def weakref_method(meth, callback):
-    weak_obj = weakref.ref(meth.im_self, callback)
-    weak_func = weakref.ref(meth.im_func, callback)
+    weak_obj = weakref.ref(meth.__self__, callback)
+    weak_func = weakref.ref(meth.__func__, callback)
     return weak_obj, weak_func
 def weakref_deref(meth_ref):
     obj = meth_ref[0]()
@@ -546,7 +546,7 @@
         
     def add(self):
         o_list = []
-        for k in reversed(range(len(self.filenames))):
+        for k in reversed(list(range(len(self.filenames)))):
             path = self.figobj_paths[k]
             parent = self.proj.find_by_full_path(
                                  '.'.join(path.split('.')[0:-1]))
@@ -557,7 +557,7 @@
             #print child, self.filenames[k]           
             parent.move_child(child.get_ichild(), self.child_idx[k])
             child.realize()
-            print('removing', self.filenames[k])
+            print(('removing', self.filenames[k]))
             os.remove(self.filenames[k])
             o_list.append(child)
         self.filenames = []
@@ -584,7 +584,7 @@
             idx = figobj.get_ichild()
             filename = os.path.join(self.proj.getvar('wdir'), '.trash', 
                                 self.proj.random_tmp_name(seed=k))
-            print('saving', filename)
+            print(('saving', filename))
             figobj.save_subtree(filename)
             self.filenames.append(filename)
             self.child_idx.append(idx)
--- python/ifigure/widgets/var_viewerg2.py	(original)
+++ python/ifigure/widgets/var_viewerg2.py	(refactored)
@@ -73,9 +73,9 @@
         self._allow_eval = False
 
     def get_varlist(self):
-       return self._var.keys()
+       return list(self._var.keys())
     def hasvar(self, name):
-       return self._var.has_key(name)
+       return name in self._var
     def setvar(self, *args):
        if len(args)==2:
           self._var[args[0]]=args[1]
@@ -133,7 +133,7 @@
 
     def OnDropText(self, x, y, indata):
         print("drop target")
-        print(type(indata))
+        print((type(indata)))
 
         ### this is ad-hoc....!
         app=self.obj.GetTopLevelParent()
@@ -142,7 +142,7 @@
 
         data='='+str(indata)
         try:
-          print(str(indata))
+          print((str(indata)))
           obj=EvalNode(str(indata))
           #print obj
           if obj.isTreeDict():
@@ -263,7 +263,7 @@
                   obj.setvar(new_name, None)
                   gt.SetTreeDict(obj)
                else:
-                  print("variable "+new_name + " exist!")
+                  print(("variable "+new_name + " exist!"))
         dlg.Destroy()
         
     def onDelete(self, e):
@@ -620,12 +620,12 @@
         evt.Skip()
         
     def onGridLDClick(self, evt):
-        print 'Grid DClick'        
+        print('Grid DClick')        
         evt.Skip()
         
     def onButton(self, evt, mode):
         from ifigure.ifigure_config import vv_scratch
-        import cPickle as pickle
+        import pickle as pickle
 
         idx = self.grid.GetSelectedRows()
         if len(idx)==0 and mode != 'paste':  return
@@ -847,7 +847,7 @@
         name = gt.get_row_name(row)
         val=obj.getvar(name)
         txt=str(val)
-        if ((isinstance(val, str) or isinstance(val, unicode)) and
+        if ((isinstance(val, str) or isinstance(val, str)) and
                not val.startswith('=')):
                txt='"'+txt+'"'
 
--- python/ifigure/widgets/video_viewer.py	(original)
+++ python/ifigure/widgets/video_viewer.py	(refactored)
@@ -56,7 +56,7 @@
                      parent=self,)
 
         if value[0] is True:
-            ipage = long(value[1][0])
+            ipage = int(value[1][0])
         else:
             return 
         self.goto_frame(ipage)
--- python/ifigure/widgets/videoplayer_buttons.py	(original)
+++ python/ifigure/widgets/videoplayer_buttons.py	(refactored)
@@ -167,7 +167,7 @@
             v.stop_play()            
             v.step_rev()            
         else:
-            print btask
+            print(btask)
             
     def reset_btn_toggle_bitmap(self):
         self.set_toggle('')
--- python/ifigure/widgets/wave_viewer.py	(original)
+++ python/ifigure/widgets/wave_viewer.py	(refactored)
@@ -163,7 +163,7 @@
         try:
            o=FigQuiver(*args, **kwargs)
         except ValueError as x:
-           print(x.message)
+           print((x.message))
            return
         if o.getvar('u').dtype.name.startswith('complex'):
             convert_figobj(o)
--- python/ifigure/widgets/canvas/dnd_areasplitter.py	(original)
+++ python/ifigure/widgets/canvas/dnd_areasplitter.py	(refactored)
@@ -20,7 +20,7 @@
     for axes in reversed(figure.axes):
         hit, extra = cpicker.axes_picker(axes, evt, 
                           canvas=canvas.canvas)
-        print(hit, extra)
+        print((hit, extra))
 
        
 
--- python/ifigure/widgets/canvas/ifigure_canvas.py	(original)
+++ python/ifigure/widgets/canvas/ifigure_canvas.py	(refactored)
@@ -62,7 +62,7 @@
 from matplotlib.patches import Ellipse, PathPatch
 import matplotlib.path
 import weakref
-import cPickle as pickle
+import pickle as pickle
 from ifigure.ifigure_config import *
 from ifigure.utils import geom as geom_util
 from ifigure.utils.geom import transform_point
@@ -355,7 +355,7 @@
            self.panel._figure.patches.remove(self.rb)
         self.rb = None
     def _add_patch(self):
-        codes, verts = zip(*self.pathdata)
+        codes, verts = list(zip(*self.pathdata))
         path = matplotlib.path.Path(verts, codes)
         self.rb = PathPatch(path, facecolor='none', 
                             figure=self.panel._figure, 
@@ -1140,7 +1140,7 @@
 #        print 'set frame art'
         canvas = e.GetEventObject()
         for item in canvas.selection:
-            print item()
+            print(item())
             if item() is not None:
                 item().figobj.set_frameart(True)
         canvas.draw_all()
@@ -1160,7 +1160,7 @@
 
     def onArrange(self, e):
         canvas = e.GetEventObject()        
-        print('arrange', e.ExtraInfo)
+        print(('arrange', e.ExtraInfo))
 
         dx=[0]*len(canvas.selection)
         dy=[0]*len(canvas.selection)
@@ -1390,7 +1390,7 @@
       #self.Bind(wx.EVT_SIZE, self.HandleResize)
 
       from ifigure.ifigure_config import icondir
-      if len(bitmaps.keys()) == 0:
+      if len(list(bitmaps.keys())) == 0:
           for icon in bitmap_names:
               path=os.path.join(icondir, '16x16', icon)
               if icon[-3:]=='png':
@@ -1470,7 +1470,7 @@
        self.sizer2.Add(self.canvas, 1, wx.EXPAND, 0)
        self.sizer2.Add(self.spacer2, 0)
 
-       rgba = [long(x*255) for x in self._figure.get_facecolor()]
+       rgba = [int(x*255) for x in self._figure.get_facecolor()]
        self.std_bg_color = self.TopLevelParent.GetBackgroundColour()
        self.TopLevelParent.SetBackgroundColour(rgba[0:3])
        self.spacer1.set_color(rgba[0:3])
@@ -1964,7 +1964,7 @@
                                     for o in figax_list]))]
 
        if len(alist) == 0: return
-       zorder, figax_list = zip(*alist)
+       zorder, figax_list = list(zip(*alist))
        for figax in figax_list:
               for ax in figax._artists:
                   hit, extra = cpicker.axes_picker(ax, event)
@@ -2577,7 +2577,7 @@
                   ax = figobj()._artists[0]
                   images.append(a) 
               else:
-                  print(type(a))
+                  print((type(a)))
        self._figure.lines += lines
        if ax is not None: 
            ax.collections += collections
@@ -3229,7 +3229,7 @@
        if wx.GetApp().TopWindow.aconfig.setting['keep_text_as_text']:
              matplotlib.rcParams['text.usetex'] = True
              matplotlib.rcParams['ps.usedistiller'] = 'xpdf'
-             matplotlib.rcParams['font.family'] = [u'serif']
+             matplotlib.rcParams['font.family'] = ['serif']
              call_convert_to_tex_style_text(True)
 #             matplotlib.rcParams['ps.fonttype'] = 42
 
@@ -3251,7 +3251,7 @@
                 self.GetTopLevelParent().save_animgif(filename = fname+'.gif')
             except:
                 import traceback
-                print(traceback.format_exc())    
+                print((traceback.format_exc()))    
             if (matplotlib.rcParams['text.usetex'] and
                 not org_rc[0]):
                 call_convert_to_tex_style_text(False)          
@@ -3266,7 +3266,7 @@
                 self.GetTopLevelParent().save_multipdf(filename = fname+'.pdf')
             except:
                 import traceback
-                print(traceback.format_exc())
+                print((traceback.format_exc()))
             if (matplotlib.rcParams['text.usetex'] and
                 not org_rc[0]):
                 call_convert_to_tex_style_text(False)          
@@ -3293,7 +3293,7 @@
                call_savefig_method(self, 'print_pdf', ret+'.pdf', dpi=image_dpi)
        except:
            import traceback
-           print(traceback.format_exc())
+           print((traceback.format_exc()))
 
        if (matplotlib.rcParams['text.usetex'] and
            not org_rc[0]):
@@ -3426,7 +3426,7 @@
        except:
           print('Failed to create legend')
           import traceback
-          print(traceback.format_exc())
+          print((traceback.format_exc()))
           return
 
        ### registor paste action to history
@@ -3838,7 +3838,7 @@
            self._line_insert_a = None
 
        p = [(item[0], item[1]) for item in path]
-       codes, verts = zip(*p)
+       codes, verts = list(zip(*p))
        path = matplotlib.path.Path(verts, codes)
        self._line_insert_a = PathPatch(path, facecolor='none', 
                             figure=self._figure, 
@@ -3951,7 +3951,7 @@
    def onKey3(self, evt):
        print('key_event')
    def dnd_motion(self, evt):
-       print('dnd motion', evt.xdata, evt.ydata)
+       print(('dnd motion', evt.xdata, evt.ydata))
        pass
 
    def _check_can_group(self):
